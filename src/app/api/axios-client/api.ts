/* tslint:disable */
/* eslint-disable */
/**
 * CSPM API
 * Test description
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AWSCloudTrailAttributeValue
 */
export interface AWSCloudTrailAttributeValue {
    /**
     * 
     * @type {number}
     * @memberof AWSCloudTrailAttributeValue
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AWSCloudTrailAttributeValue
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface AccountsApiActivityLogsList200Response
 */
export interface AccountsApiActivityLogsList200Response {
    /**
     * 
     * @type {number}
     * @memberof AccountsApiActivityLogsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiActivityLogsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiActivityLogsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ActivityLog>}
     * @memberof AccountsApiActivityLogsList200Response
     */
    'results': Array<ActivityLog>;
}
/**
 * 
 * @export
 * @interface AccountsApiPermissionsList200Response
 */
export interface AccountsApiPermissionsList200Response {
    /**
     * 
     * @type {number}
     * @memberof AccountsApiPermissionsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiPermissionsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiPermissionsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Permission>}
     * @memberof AccountsApiPermissionsList200Response
     */
    'results': Array<Permission>;
}
/**
 * 
 * @export
 * @interface AccountsApiRolePermissionList200Response
 */
export interface AccountsApiRolePermissionList200Response {
    /**
     * 
     * @type {number}
     * @memberof AccountsApiRolePermissionList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiRolePermissionList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiRolePermissionList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<RolePermission>}
     * @memberof AccountsApiRolePermissionList200Response
     */
    'results': Array<RolePermission>;
}
/**
 * 
 * @export
 * @interface AccountsApiRolesList200Response
 */
export interface AccountsApiRolesList200Response {
    /**
     * 
     * @type {number}
     * @memberof AccountsApiRolesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiRolesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiRolesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Role>}
     * @memberof AccountsApiRolesList200Response
     */
    'results': Array<Role>;
}
/**
 * 
 * @export
 * @interface AccountsApiTenantsList200Response
 */
export interface AccountsApiTenantsList200Response {
    /**
     * 
     * @type {number}
     * @memberof AccountsApiTenantsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiTenantsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiTenantsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Tenant>}
     * @memberof AccountsApiTenantsList200Response
     */
    'results': Array<Tenant>;
}
/**
 * 
 * @export
 * @interface AccountsApiUsersList200Response
 */
export interface AccountsApiUsersList200Response {
    /**
     * 
     * @type {number}
     * @memberof AccountsApiUsersList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiUsersList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiUsersList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<TenantUser>}
     * @memberof AccountsApiUsersList200Response
     */
    'results': Array<TenantUser>;
}
/**
 * 
 * @export
 * @interface ActivityLog
 */
export interface ActivityLog {
    /**
     * 
     * @type {number}
     * @memberof ActivityLog
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ActivityLog
     */
    'actor'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ActivityLog
     */
    'action_type': ActivityLogActionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ActivityLog
     */
    'action_time'?: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityLog
     */
    'remarks'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ActivityLog
     */
    'status'?: ActivityLogStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof ActivityLog
     */
    'data'?: object;
    /**
     * 
     * @type {number}
     * @memberof ActivityLog
     */
    'tenant'?: number | null;
}

export const ActivityLogActionTypeEnum = {
    Create: 'Create',
    Read: 'Read',
    Update: 'Update',
    Delete: 'Delete',
    Login: 'Login',
    Logout: 'Logout',
    LoginFailed: 'Login Failed'
} as const;

export type ActivityLogActionTypeEnum = typeof ActivityLogActionTypeEnum[keyof typeof ActivityLogActionTypeEnum];
export const ActivityLogStatusEnum = {
    Success: 'Success',
    Failed: 'Failed'
} as const;

export type ActivityLogStatusEnum = typeof ActivityLogStatusEnum[keyof typeof ActivityLogStatusEnum];

/**
 * 
 * @export
 * @interface AssetCountByRegion
 */
export interface AssetCountByRegion {
    /**
     * 
     * @type {number}
     * @memberof AssetCountByRegion
     */
    'cloud_account_id': number;
}
/**
 * 
 * @export
 * @interface ByteArray
 */
export interface ByteArray {
    /**
     * 
     * @type {string}
     * @memberof ByteArray
     */
    'byte_array': string;
    /**
     * 
     * @type {string}
     * @memberof ByteArray
     */
    'file_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ByteArray
     */
    'file_extension'?: string;
}
/**
 * 
 * @export
 * @interface CFTFTemplate
 */
export interface CFTFTemplate {
    /**
     * 
     * @type {number}
     * @memberof CFTFTemplate
     */
    'tenant'?: number;
    /**
     * 
     * @type {string}
     * @memberof CFTFTemplate
     */
    'file'?: string;
}
/**
 * 
 * @export
 * @interface CloudProviderCloudProviderList200Response
 */
export interface CloudProviderCloudProviderList200Response {
    /**
     * 
     * @type {number}
     * @memberof CloudProviderCloudProviderList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof CloudProviderCloudProviderList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CloudProviderCloudProviderList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ProviderService>}
     * @memberof CloudProviderCloudProviderList200Response
     */
    'results': Array<ProviderService>;
}
/**
 * 
 * @export
 * @interface CloudProviderCloudProviderResourceTypesList200Response
 */
export interface CloudProviderCloudProviderResourceTypesList200Response {
    /**
     * 
     * @type {number}
     * @memberof CloudProviderCloudProviderResourceTypesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof CloudProviderCloudProviderResourceTypesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CloudProviderCloudProviderResourceTypesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<CloudProviderResourceTypes>}
     * @memberof CloudProviderCloudProviderResourceTypesList200Response
     */
    'results': Array<CloudProviderResourceTypes>;
}
/**
 * 
 * @export
 * @interface CloudProviderCountriesList200Response
 */
export interface CloudProviderCountriesList200Response {
    /**
     * 
     * @type {number}
     * @memberof CloudProviderCountriesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof CloudProviderCountriesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CloudProviderCountriesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Country>}
     * @memberof CloudProviderCountriesList200Response
     */
    'results': Array<Country>;
}
/**
 * 
 * @export
 * @interface CloudProviderResourceTypes
 */
export interface CloudProviderResourceTypes {
    /**
     * 
     * @type {number}
     * @memberof CloudProviderResourceTypes
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CloudProviderResourceTypes
     */
    'cloud_provider'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudProviderResourceTypes
     */
    'resource_types'?: string;
    /**
     * 
     * @type {number}
     * @memberof CloudProviderResourceTypes
     */
    'cloud_provider_id': number;
    /**
     * 
     * @type {number}
     * @memberof CloudProviderResourceTypes
     */
    'resource_types_id'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof CloudProviderResourceTypes
     */
    'resource_types__id': Array<number>;
}
/**
 * 
 * @export
 * @interface CloudProviderResourceTypesList200Response
 */
export interface CloudProviderResourceTypesList200Response {
    /**
     * 
     * @type {number}
     * @memberof CloudProviderResourceTypesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof CloudProviderResourceTypesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CloudProviderResourceTypesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<CloudResourceTypes>}
     * @memberof CloudProviderResourceTypesList200Response
     */
    'results': Array<CloudResourceTypes>;
}
/**
 * 
 * @export
 * @interface CloudProviderServiceResourceTypesList200Response
 */
export interface CloudProviderServiceResourceTypesList200Response {
    /**
     * 
     * @type {number}
     * @memberof CloudProviderServiceResourceTypesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof CloudProviderServiceResourceTypesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CloudProviderServiceResourceTypesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<CloudServiceTypes>}
     * @memberof CloudProviderServiceResourceTypesList200Response
     */
    'results': Array<CloudServiceTypes>;
}
/**
 * 
 * @export
 * @interface CloudResourceTypes
 */
export interface CloudResourceTypes {
    /**
     * 
     * @type {number}
     * @memberof CloudResourceTypes
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CloudResourceTypes
     */
    'resource_type': string;
    /**
     * 
     * @type {boolean}
     * @memberof CloudResourceTypes
     */
    'status'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CloudResourceTypes
     */
    'cloud_provider': string;
}
/**
 * 
 * @export
 * @interface CloudServiceTypes
 */
export interface CloudServiceTypes {
    /**
     * 
     * @type {number}
     * @memberof CloudServiceTypes
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CloudServiceTypes
     */
    'service_resource': string;
    /**
     * 
     * @type {boolean}
     * @memberof CloudServiceTypes
     */
    'status'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CloudServiceTypes
     */
    'cloud_provider': string;
}
/**
 * 
 * @export
 * @interface CloudTrailAlarmLog
 */
export interface CloudTrailAlarmLog {
    /**
     * 
     * @type {number}
     * @memberof CloudTrailAlarmLog
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailAlarmLog
     */
    'event_time'?: string;
    /**
     * 
     * @type {CustomProviderService}
     * @memberof CloudTrailAlarmLog
     */
    'cloud_provider_account_id': CustomProviderService;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailAlarmLog
     */
    'scan_frequency': string;
    /**
     * 
     * @type {number}
     * @memberof CloudTrailAlarmLog
     */
    'tenant': number;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailAlarmLog
     */
    'scan_log': string;
    /**
     * 
     * @type {number}
     * @memberof CloudTrailAlarmLog
     */
    'active_alarms'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CloudTrailAlarmLog
     */
    'triggered_alarms'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CloudTrailAlarmLog
     */
    'resolved'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailAlarmLog
     */
    'last_run'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailAlarmLog
     */
    'fetch_status'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailAlarmLog
     */
    'created_on'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailAlarmLog
     */
    'period'?: string | null;
}
/**
 * 
 * @export
 * @interface CloudTrailEvent
 */
export interface CloudTrailEvent {
    /**
     * 
     * @type {number}
     * @memberof CloudTrailEvent
     */
    'id'?: number;
    /**
     * 
     * @type {CustomCloudTrailAlarmLog}
     * @memberof CloudTrailEvent
     */
    'log': CustomCloudTrailAlarmLog;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailEvent
     */
    'event_id': string;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailEvent
     */
    'event_time': string;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailEvent
     */
    'event_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailEvent
     */
    'event_source'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailEvent
     */
    'aws_region'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailEvent
     */
    'source_ip_address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailEvent
     */
    'user_agent'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof CloudTrailEvent
     */
    'request_parameters'?: object | null;
    /**
     * 
     * @type {object}
     * @memberof CloudTrailEvent
     */
    'response_elements'?: object | null;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailEvent
     */
    'event_type'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof CloudTrailEvent
     */
    'user_identity'?: object | null;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailEvent
     */
    'request_id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailEvent
     */
    'error_code'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailEvent
     */
    'error_message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailEvent
     */
    'event_category'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailEvent
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface CloudTrailFilters
 */
export interface CloudTrailFilters {
    /**
     * 
     * @type {number}
     * @memberof CloudTrailFilters
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailFilters
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailFilters
     */
    'description'?: string;
    /**
     * 
     * @type {object}
     * @memberof CloudTrailFilters
     */
    'filter_pattern'?: object;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailFilters
     */
    'filter_pattern_type'?: string;
    /**
     * 
     * @type {number}
     * @memberof CloudTrailFilters
     */
    'tenant'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof CloudTrailFilters
     */
    'pattern': Array<number>;
}
/**
 * 
 * @export
 * @interface CloudTrailSetUp
 */
export interface CloudTrailSetUp {
    /**
     * 
     * @type {number}
     * @memberof CloudTrailSetUp
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CloudTrailSetUp
     */
    'cloud_provider_account_id': number;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailSetUp
     */
    'scan_frequency': CloudTrailSetUpScanFrequencyEnum;
    /**
     * 
     * @type {number}
     * @memberof CloudTrailSetUp
     */
    'tenant'?: number;
    /**
     * 
     * @type {Set<number>}
     * @memberof CloudTrailSetUp
     */
    'filter_patterns': Set<number>;
}

export const CloudTrailSetUpScanFrequencyEnum = {
    Hourly: 'hourly',
    Daily: 'daily',
    Weekly: 'weekly',
    Monthly: 'monthly'
} as const;

export type CloudTrailSetUpScanFrequencyEnum = typeof CloudTrailSetUpScanFrequencyEnum[keyof typeof CloudTrailSetUpScanFrequencyEnum];

/**
 * 
 * @export
 * @interface CloudTrailSetUpList
 */
export interface CloudTrailSetUpList {
    /**
     * 
     * @type {number}
     * @memberof CloudTrailSetUpList
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CloudTrailSetUpList
     */
    'cloud_provider_account_id': number;
    /**
     * 
     * @type {string}
     * @memberof CloudTrailSetUpList
     */
    'scan_frequency': CloudTrailSetUpListScanFrequencyEnum;
    /**
     * 
     * @type {number}
     * @memberof CloudTrailSetUpList
     */
    'tenant'?: number;
    /**
     * 
     * @type {Array<CustomCloudTrailFilters>}
     * @memberof CloudTrailSetUpList
     */
    'filter_patterns'?: Array<CustomCloudTrailFilters>;
}

export const CloudTrailSetUpListScanFrequencyEnum = {
    Hourly: 'hourly',
    Daily: 'daily',
    Weekly: 'weekly',
    Monthly: 'monthly'
} as const;

export type CloudTrailSetUpListScanFrequencyEnum = typeof CloudTrailSetUpListScanFrequencyEnum[keyof typeof CloudTrailSetUpListScanFrequencyEnum];

/**
 * 
 * @export
 * @interface Country
 */
export interface Country {
    /**
     * 
     * @type {number}
     * @memberof Country
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CreateRuleSuppressionSetUp
 */
export interface CreateRuleSuppressionSetUp {
    /**
     * 
     * @type {number}
     * @memberof CreateRuleSuppressionSetUp
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateRuleSuppressionSetUp
     */
    'tenant'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateRuleSuppressionSetUp
     */
    'cloud_provider': string;
    /**
     * 
     * @type {number}
     * @memberof CreateRuleSuppressionSetUp
     */
    'resource_type': number;
    /**
     * 
     * @type {number}
     * @memberof CreateRuleSuppressionSetUp
     */
    'resource': number | null;
    /**
     * 
     * @type {number}
     * @memberof CreateRuleSuppressionSetUp
     */
    'rule': number | null;
    /**
     * 
     * @type {string}
     * @memberof CreateRuleSuppressionSetUp
     */
    'expiration': string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateRuleSuppressionSetUp
     */
    'comments': string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateRuleSuppressionSetUp
     */
    'region': string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateRuleSuppressionSetUp
     */
    'status'?: boolean;
}
/**
 * 
 * @export
 * @interface CustomCloudAccount
 */
export interface CustomCloudAccount {
    /**
     * 
     * @type {number}
     * @memberof CustomCloudAccount
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomCloudAccount
     */
    'account_name': string;
    /**
     * 
     * @type {string}
     * @memberof CustomCloudAccount
     */
    'cloud_provider_name': string;
}
/**
 * 
 * @export
 * @interface CustomCloudProvider
 */
export interface CustomCloudProvider {
    /**
     * 
     * @type {number}
     * @memberof CustomCloudProvider
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomCloudProvider
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface CustomCloudTrailAlarmLog
 */
export interface CustomCloudTrailAlarmLog {
    /**
     * 
     * @type {number}
     * @memberof CustomCloudTrailAlarmLog
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomCloudTrailAlarmLog
     */
    'triggered_alarms'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CustomCloudTrailAlarmLog
     */
    'resolved'?: number | null;
}
/**
 * 
 * @export
 * @interface CustomCloudTrailFilters
 */
export interface CustomCloudTrailFilters {
    /**
     * 
     * @type {number}
     * @memberof CustomCloudTrailFilters
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomCloudTrailFilters
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CustomCloudTrailFilters
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface CustomLoginTenant
 */
export interface CustomLoginTenant {
    /**
     * 
     * @type {number}
     * @memberof CustomLoginTenant
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomLoginTenant
     */
    'full_name': string;
}
/**
 * 
 * @export
 * @interface CustomPasswordReset
 */
export interface CustomPasswordReset {
    /**
     * 
     * @type {string}
     * @memberof CustomPasswordReset
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface CustomPolicy
 */
export interface CustomPolicy {
    /**
     * 
     * @type {number}
     * @memberof CustomPolicy
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomPolicy
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CustomPolicy
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof CustomPolicy
     */
    'status'?: boolean;
}
/**
 * 
 * @export
 * @interface CustomPolicyRun
 */
export interface CustomPolicyRun {
    /**
     * 
     * @type {number}
     * @memberof CustomPolicyRun
     */
    'id'?: number;
    /**
     * 
     * @type {CustomPolicy}
     * @memberof CustomPolicyRun
     */
    'policy': CustomPolicy;
}
/**
 * 
 * @export
 * @interface CustomProviderService
 */
export interface CustomProviderService {
    /**
     * 
     * @type {number}
     * @memberof CustomProviderService
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomProviderService
     */
    'cloud_provider_name': string;
    /**
     * 
     * @type {string}
     * @memberof CustomProviderService
     */
    'account_name': string;
}
/**
 * 
 * @export
 * @interface CustomRepoScanSetUp
 */
export interface CustomRepoScanSetUp {
    /**
     * 
     * @type {number}
     * @memberof CustomRepoScanSetUp
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomRepoScanSetUp
     */
    'repo_url': string;
    /**
     * 
     * @type {string}
     * @memberof CustomRepoScanSetUp
     */
    'repo_type': string;
    /**
     * 
     * @type {string}
     * @memberof CustomRepoScanSetUp
     */
    'repo_name'?: string;
}
/**
 * 
 * @export
 * @interface CustomResource
 */
export interface CustomResource {
    /**
     * 
     * @type {number}
     * @memberof CustomResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomResource
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface CustomResourceType
 */
export interface CustomResourceType {
    /**
     * 
     * @type {number}
     * @memberof CustomResourceType
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomResourceType
     */
    'resource_type'?: string;
}
/**
 * 
 * @export
 * @interface CustomRule
 */
export interface CustomRule {
    /**
     * 
     * @type {number}
     * @memberof CustomRule
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomRule
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface CustomSuppressedBySeializer
 */
export interface CustomSuppressedBySeializer {
    /**
     * 
     * @type {number}
     * @memberof CustomSuppressedBySeializer
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomSuppressedBySeializer
     */
    'full_name'?: string;
}
/**
 * 
 * @export
 * @interface CustomTenantSeializer
 */
export interface CustomTenantSeializer {
    /**
     * 
     * @type {number}
     * @memberof CustomTenantSeializer
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomTenantSeializer
     */
    'full_name': string;
}
/**
 * 
 * @export
 * @interface CustomTicket
 */
export interface CustomTicket {
    /**
     * 
     * @type {number}
     * @memberof CustomTicket
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomTicket
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomTicket
     */
    'subject'?: string;
}
/**
 * 
 * @export
 * @interface CustomTicketType
 */
export interface CustomTicketType {
    /**
     * 
     * @type {number}
     * @memberof CustomTicketType
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomTicketType
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomTicketType
     */
    'code'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CustomTicketType
     */
    'status'?: boolean;
}
/**
 * 
 * @export
 * @interface FetchAsset
 */
export interface FetchAsset {
    /**
     * 
     * @type {number}
     * @memberof FetchAsset
     */
    'cloud_provider_account_id': number;
}
/**
 * 
 * @export
 * @interface ForgetPasswordChange
 */
export interface ForgetPasswordChange {
    /**
     * 
     * @type {string}
     * @memberof ForgetPasswordChange
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ForgetPasswordChange
     */
    'password1': string;
    /**
     * 
     * @type {string}
     * @memberof ForgetPasswordChange
     */
    'password2': string;
}
/**
 * 
 * @export
 * @interface FullScan
 */
export interface FullScan {
    /**
     * 
     * @type {number}
     * @memberof FullScan
     */
    'tenant_id'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof FullScan
     */
    'cloud_provider_account_id': number;
}
/**
 * 
 * @export
 * @interface HtmlData
 */
export interface HtmlData {
    /**
     * 
     * @type {string}
     * @memberof HtmlData
     */
    'html_data': string;
}
/**
 * 
 * @export
 * @interface JsonData
 */
export interface JsonData {
    /**
     * 
     * @type {object}
     * @memberof JsonData
     */
    'json_data': object;
}
/**
 * 
 * @export
 * @interface Login
 */
export interface Login {
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface OneTimeRepoScan
 */
export interface OneTimeRepoScan {
    /**
     * 
     * @type {number}
     * @memberof OneTimeRepoScan
     */
    'policy_id': number;
    /**
     * 
     * @type {string}
     * @memberof OneTimeRepoScan
     */
    'repo_url': string;
    /**
     * 
     * @type {string}
     * @memberof OneTimeRepoScan
     */
    'access_token': string;
}
/**
 * 
 * @export
 * @interface PasswordChange
 */
export interface PasswordChange {
    /**
     * 
     * @type {string}
     * @memberof PasswordChange
     */
    'new_password1': string;
    /**
     * 
     * @type {string}
     * @memberof PasswordChange
     */
    'new_password2': string;
}
/**
 * 
 * @export
 * @interface Permission
 */
export interface Permission {
    /**
     * 
     * @type {number}
     * @memberof Permission
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Permission
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface Policy
 */
export interface Policy {
    /**
     * 
     * @type {number}
     * @memberof Policy
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Policy
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Policy
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof Policy
     */
    'status'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Policy
     */
    'is_tenant'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Policy
     */
    'created_by'?: number;
    /**
     * 
     * @type {string}
     * @memberof Policy
     */
    'policy_type': string;
}
/**
 * 
 * @export
 * @interface PolicyPolicyListCreateList200Response
 */
export interface PolicyPolicyListCreateList200Response {
    /**
     * 
     * @type {number}
     * @memberof PolicyPolicyListCreateList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PolicyPolicyListCreateList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PolicyPolicyListCreateList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Policy>}
     * @memberof PolicyPolicyListCreateList200Response
     */
    'results': Array<Policy>;
}
/**
 * 
 * @export
 * @interface PolicyPolicyRuleList200Response
 */
export interface PolicyPolicyRuleList200Response {
    /**
     * 
     * @type {number}
     * @memberof PolicyPolicyRuleList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PolicyPolicyRuleList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PolicyPolicyRuleList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<PolicyRule>}
     * @memberof PolicyPolicyRuleList200Response
     */
    'results': Array<PolicyRule>;
}
/**
 * 
 * @export
 * @interface PolicyPolicyRunResultsList200Response
 */
export interface PolicyPolicyRunResultsList200Response {
    /**
     * 
     * @type {number}
     * @memberof PolicyPolicyRunResultsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PolicyPolicyRunResultsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PolicyPolicyRunResultsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<PolicyRunResult>}
     * @memberof PolicyPolicyRunResultsList200Response
     */
    'results': Array<PolicyRunResult>;
}
/**
 * 
 * @export
 * @interface PolicyPolicyRunScanHistoryList200Response
 */
export interface PolicyPolicyRunScanHistoryList200Response {
    /**
     * 
     * @type {number}
     * @memberof PolicyPolicyRunScanHistoryList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PolicyPolicyRunScanHistoryList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PolicyPolicyRunScanHistoryList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<PolicyRun>}
     * @memberof PolicyPolicyRunScanHistoryList200Response
     */
    'results': Array<PolicyRun>;
}
/**
 * 
 * @export
 * @interface PolicyPolicyRunScanStatsList200Response
 */
export interface PolicyPolicyRunScanStatsList200Response {
    /**
     * 
     * @type {number}
     * @memberof PolicyPolicyRunScanStatsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PolicyPolicyRunScanStatsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PolicyPolicyRunScanStatsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof PolicyPolicyRunScanStatsList200Response
     */
    'results': Array<object>;
}
/**
 * 
 * @export
 * @interface PolicyRepoScanSetupList200Response
 */
export interface PolicyRepoScanSetupList200Response {
    /**
     * 
     * @type {number}
     * @memberof PolicyRepoScanSetupList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PolicyRepoScanSetupList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PolicyRepoScanSetupList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<RepoScanSetUp>}
     * @memberof PolicyRepoScanSetupList200Response
     */
    'results': Array<RepoScanSetUp>;
}
/**
 * 
 * @export
 * @interface PolicyRule
 */
export interface PolicyRule {
    /**
     * 
     * @type {number}
     * @memberof PolicyRule
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PolicyRule
     */
    'policy_id': number;
    /**
     * 
     * @type {string}
     * @memberof PolicyRule
     */
    'policy'?: string;
    /**
     * 
     * @type {number}
     * @memberof PolicyRule
     */
    'rule_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PolicyRule
     */
    'rule'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof PolicyRule
     */
    'rule__id': Array<number>;
}
/**
 * 
 * @export
 * @interface PolicyRulesList200Response
 */
export interface PolicyRulesList200Response {
    /**
     * 
     * @type {number}
     * @memberof PolicyRulesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PolicyRulesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PolicyRulesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Rule>}
     * @memberof PolicyRulesList200Response
     */
    'results': Array<Rule>;
}
/**
 * 
 * @export
 * @interface PolicyRun
 */
export interface PolicyRun {
    /**
     * 
     * @type {number}
     * @memberof PolicyRun
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PolicyRun
     */
    'policy'?: string;
    /**
     * 
     * @type {number}
     * @memberof PolicyRun
     */
    'tenant': number;
    /**
     * 
     * @type {string}
     * @memberof PolicyRun
     */
    'start_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof PolicyRun
     */
    'end_date'?: string;
    /**
     * 
     * @type {number}
     * @memberof PolicyRun
     */
    'requested_by': number;
    /**
     * 
     * @type {string}
     * @memberof PolicyRun
     */
    'comments': string;
    /**
     * 
     * @type {number}
     * @memberof PolicyRun
     */
    'compliance': number;
    /**
     * 
     * @type {string}
     * @memberof PolicyRun
     */
    'scan_frequency'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PolicyRun
     */
    'vulnerability': number;
    /**
     * 
     * @type {string}
     * @memberof PolicyRun
     */
    'cloud'?: string | null;
    /**
     * 
     * @type {CustomRepoScanSetUp}
     * @memberof PolicyRun
     */
    'repo': CustomRepoScanSetUp;
    /**
     * 
     * @type {string}
     * @memberof PolicyRun
     */
    'scan_type': string;
    /**
     * 
     * @type {CustomCloudAccount}
     * @memberof PolicyRun
     */
    'cloud_account': CustomCloudAccount;
}
/**
 * 
 * @export
 * @interface PolicyRunId
 */
export interface PolicyRunId {
    /**
     * 
     * @type {number}
     * @memberof PolicyRunId
     */
    'policy_run_id': number;
}
/**
 * 
 * @export
 * @interface PolicyRunResult
 */
export interface PolicyRunResult {
    /**
     * 
     * @type {number}
     * @memberof PolicyRunResult
     */
    'id'?: number;
    /**
     * 
     * @type {CustomPolicyRun}
     * @memberof PolicyRunResult
     */
    'policy_run': CustomPolicyRun;
    /**
     * 
     * @type {object}
     * @memberof PolicyRunResult
     */
    'result_json'?: object | null;
    /**
     * 
     * @type {string}
     * @memberof PolicyRunResult
     */
    'start_time': string;
    /**
     * 
     * @type {string}
     * @memberof PolicyRunResult
     */
    'stop_time': string;
    /**
     * 
     * @type {number}
     * @memberof PolicyRunResult
     */
    'tenant': number;
    /**
     * 
     * @type {string}
     * @memberof PolicyRunResult
     */
    'created_on'?: string;
    /**
     * 
     * @type {string}
     * @memberof PolicyRunResult
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof PolicyRunResult
     */
    'scan_message': string;
    /**
     * 
     * @type {string}
     * @memberof PolicyRunResult
     */
    'scan_type': string;
    /**
     * 
     * @type {string}
     * @memberof PolicyRunResult
     */
    'scan_frequency'?: string | null;
    /**
     * 
     * @type {CustomRepoScanSetUp}
     * @memberof PolicyRunResult
     */
    'repo': CustomRepoScanSetUp;
    /**
     * 
     * @type {CustomCloudAccount}
     * @memberof PolicyRunResult
     */
    'cloud_account': CustomCloudAccount;
}
/**
 * 
 * @export
 * @interface PolicyRunScan
 */
export interface PolicyRunScan {
    /**
     * 
     * @type {number}
     * @memberof PolicyRunScan
     */
    'policy_id': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyRunScan
     */
    'regions'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyRunScan
     */
    'services'?: Array<string> | null;
    /**
     * 
     * @type {number}
     * @memberof PolicyRunScan
     */
    'tenant_id'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PolicyRunScan
     */
    'scan_frequency': string;
    /**
     * 
     * @type {number}
     * @memberof PolicyRunScan
     */
    'cloud_provider_account_id': number;
}
/**
 * 
 * @export
 * @interface PolicyTemplatesList200Response
 */
export interface PolicyTemplatesList200Response {
    /**
     * 
     * @type {number}
     * @memberof PolicyTemplatesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PolicyTemplatesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PolicyTemplatesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<CFTFTemplate>}
     * @memberof PolicyTemplatesList200Response
     */
    'results': Array<CFTFTemplate>;
}
/**
 * 
 * @export
 * @interface ProviderService
 */
export interface ProviderService {
    /**
     * 
     * @type {number}
     * @memberof ProviderService
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProviderService
     */
    'cloud_provider_name': string;
    /**
     * 
     * @type {number}
     * @memberof ProviderService
     */
    'tenant': number;
    /**
     * 
     * @type {string}
     * @memberof ProviderService
     */
    'account_name': string;
    /**
     * 
     * @type {string}
     * @memberof ProviderService
     */
    'environment': string;
    /**
     * 
     * @type {number}
     * @memberof ProviderService
     */
    'created_by': number;
    /**
     * 
     * @type {string}
     * @memberof ProviderService
     */
    'account_id'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProviderService
     */
    'status'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProviderService
     */
    'connection_status': string;
}
/**
 * 
 * @export
 * @interface ProviderServiceInput
 */
export interface ProviderServiceInput {
    /**
     * 
     * @type {string}
     * @memberof ProviderServiceInput
     */
    'cloud_provider_name': string;
    /**
     * 
     * @type {string}
     * @memberof ProviderServiceInput
     */
    'role_arn': string;
    /**
     * 
     * @type {string}
     * @memberof ProviderServiceInput
     */
    'account_id': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProviderServiceInput
     */
    'onboarding_type': string;
    /**
     * 
     * @type {string}
     * @memberof ProviderServiceInput
     */
    'environment': string;
    /**
     * 
     * @type {string}
     * @memberof ProviderServiceInput
     */
    'account_name': string;
}
/**
 * 
 * @export
 * @interface ReadRuleSuppressionSetUp
 */
export interface ReadRuleSuppressionSetUp {
    /**
     * 
     * @type {number}
     * @memberof ReadRuleSuppressionSetUp
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ReadRuleSuppressionSetUp
     */
    'tenant'?: string;
    /**
     * 
     * @type {CustomCloudProvider}
     * @memberof ReadRuleSuppressionSetUp
     */
    'cloud_provider': CustomCloudProvider;
    /**
     * 
     * @type {CustomResourceType}
     * @memberof ReadRuleSuppressionSetUp
     */
    'resource_type': CustomResourceType;
    /**
     * 
     * @type {CustomResource}
     * @memberof ReadRuleSuppressionSetUp
     */
    'resource': CustomResource;
    /**
     * 
     * @type {CustomRule}
     * @memberof ReadRuleSuppressionSetUp
     */
    'rule': CustomRule;
    /**
     * 
     * @type {string}
     * @memberof ReadRuleSuppressionSetUp
     */
    'expiration'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReadRuleSuppressionSetUp
     */
    'comments'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReadRuleSuppressionSetUp
     */
    'region': string;
    /**
     * 
     * @type {boolean}
     * @memberof ReadRuleSuppressionSetUp
     */
    'status'?: boolean;
}
/**
 * 
 * @export
 * @interface ReadTicket
 */
export interface ReadTicket {
    /**
     * 
     * @type {number}
     * @memberof ReadTicket
     */
    'id'?: number;
    /**
     * 
     * @type {CustomTicketType}
     * @memberof ReadTicket
     */
    'ticket_type': CustomTicketType;
    /**
     * 
     * @type {string}
     * @memberof ReadTicket
     */
    'subject': string;
    /**
     * 
     * @type {string}
     * @memberof ReadTicket
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ReadTicket
     */
    'code': string;
    /**
     * 
     * @type {TicketAsset}
     * @memberof ReadTicket
     */
    'asset': TicketAsset;
    /**
     * 
     * @type {string}
     * @memberof ReadTicket
     */
    'created_by'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReadTicket
     */
    'status'?: string;
    /**
     * 
     * @type {TicketUser}
     * @memberof ReadTicket
     */
    'assigned_to': TicketUser;
    /**
     * 
     * @type {string}
     * @memberof ReadTicket
     */
    'tenant'?: string;
}
/**
 * 
 * @export
 * @interface Region
 */
export interface Region {
    /**
     * 
     * @type {number}
     * @memberof Region
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Region
     */
    'cloud_provider': string;
    /**
     * 
     * @type {string}
     * @memberof Region
     */
    'region_name': string;
    /**
     * 
     * @type {boolean}
     * @memberof Region
     */
    'status'?: boolean;
}
/**
 * 
 * @export
 * @interface RepoScan
 */
export interface RepoScan {
    /**
     * 
     * @type {number}
     * @memberof RepoScan
     */
    'policy_id': number;
    /**
     * 
     * @type {number}
     * @memberof RepoScan
     */
    'repo_id': number;
}
/**
 * 
 * @export
 * @interface RepoScanSetUp
 */
export interface RepoScanSetUp {
    /**
     * 
     * @type {number}
     * @memberof RepoScanSetUp
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof RepoScanSetUp
     */
    'access_token': string;
    /**
     * 
     * @type {string}
     * @memberof RepoScanSetUp
     */
    'tenant'?: string;
    /**
     * 
     * @type {string}
     * @memberof RepoScanSetUp
     */
    'repo_url': string;
    /**
     * 
     * @type {string}
     * @memberof RepoScanSetUp
     */
    'repo_type': string;
    /**
     * 
     * @type {string}
     * @memberof RepoScanSetUp
     */
    'repo_name'?: string;
}
/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {number}
     * @memberof Role
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface RolePermission
 */
export interface RolePermission {
    /**
     * 
     * @type {number}
     * @memberof RolePermission
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolePermission
     */
    'role_id': number;
    /**
     * 
     * @type {number}
     * @memberof RolePermission
     */
    'permission_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof RolePermission
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof RolePermission
     */
    'permission'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof RolePermission
     */
    'permission__id': Array<number>;
}
/**
 * 
 * @export
 * @interface Rule
 */
export interface Rule {
    /**
     * 
     * @type {number}
     * @memberof Rule
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Rule
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Rule
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Rule
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Rule
     */
    'severity'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Rule
     */
    'cloud_provider'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Rule
     */
    'service': string;
    /**
     * 
     * @type {string}
     * @memberof Rule
     */
    'rule_type': string;
    /**
     * 
     * @type {string}
     * @memberof Rule
     */
    'tenant'?: string;
}
/**
 * 
 * @export
 * @interface RuleSuppressionLog
 */
export interface RuleSuppressionLog {
    /**
     * 
     * @type {number}
     * @memberof RuleSuppressionLog
     */
    'id'?: number;
    /**
     * 
     * @type {CustomTenantSeializer}
     * @memberof RuleSuppressionLog
     */
    'tenant': CustomTenantSeializer;
    /**
     * 
     * @type {CustomSuppressedBySeializer}
     * @memberof RuleSuppressionLog
     */
    'suppressed_by': CustomSuppressedBySeializer;
    /**
     * 
     * @type {string}
     * @memberof RuleSuppressionLog
     */
    'comments'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RuleSuppressionLog
     */
    'expiration'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RuleSuppressionLog
     */
    'created_on'?: string;
    /**
     * 
     * @type {object}
     * @memberof RuleSuppressionLog
     */
    'result_json'?: object | null;
}
/**
 * 
 * @export
 * @interface SQLQuery
 */
export interface SQLQuery {
    /**
     * 
     * @type {string}
     * @memberof SQLQuery
     */
    'sql_query': string;
}
/**
 * 
 * @export
 * @interface SystemSetting
 */
export interface SystemSetting {
    /**
     * 
     * @type {number}
     * @memberof SystemSetting
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SystemSetting
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SystemSetting
     */
    'value': string;
    /**
     * 
     * @type {number}
     * @memberof SystemSetting
     */
    'tenant': number;
}
/**
 * 
 * @export
 * @interface SystemSettingsAssetManagementsList200Response
 */
export interface SystemSettingsAssetManagementsList200Response {
    /**
     * 
     * @type {number}
     * @memberof SystemSettingsAssetManagementsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsAssetManagementsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsAssetManagementsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<TenantAssetManagement>}
     * @memberof SystemSettingsAssetManagementsList200Response
     */
    'results': Array<TenantAssetManagement>;
}
/**
 * 
 * @export
 * @interface SystemSettingsAwsCloudtrailAttributeValueList200Response
 */
export interface SystemSettingsAwsCloudtrailAttributeValueList200Response {
    /**
     * 
     * @type {number}
     * @memberof SystemSettingsAwsCloudtrailAttributeValueList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsAwsCloudtrailAttributeValueList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsAwsCloudtrailAttributeValueList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<AWSCloudTrailAttributeValue>}
     * @memberof SystemSettingsAwsCloudtrailAttributeValueList200Response
     */
    'results': Array<AWSCloudTrailAttributeValue>;
}
/**
 * 
 * @export
 * @interface SystemSettingsCloudTrailFiltersList200Response
 */
export interface SystemSettingsCloudTrailFiltersList200Response {
    /**
     * 
     * @type {number}
     * @memberof SystemSettingsCloudTrailFiltersList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCloudTrailFiltersList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCloudTrailFiltersList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<CloudTrailFilters>}
     * @memberof SystemSettingsCloudTrailFiltersList200Response
     */
    'results': Array<CloudTrailFilters>;
}
/**
 * 
 * @export
 * @interface SystemSettingsCloudTrailSetupsList200Response
 */
export interface SystemSettingsCloudTrailSetupsList200Response {
    /**
     * 
     * @type {number}
     * @memberof SystemSettingsCloudTrailSetupsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCloudTrailSetupsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCloudTrailSetupsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<CloudTrailSetUpList>}
     * @memberof SystemSettingsCloudTrailSetupsList200Response
     */
    'results': Array<CloudTrailSetUpList>;
}
/**
 * 
 * @export
 * @interface SystemSettingsCloudtrailEventsList200Response
 */
export interface SystemSettingsCloudtrailEventsList200Response {
    /**
     * 
     * @type {number}
     * @memberof SystemSettingsCloudtrailEventsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCloudtrailEventsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCloudtrailEventsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<CloudTrailEvent>}
     * @memberof SystemSettingsCloudtrailEventsList200Response
     */
    'results': Array<CloudTrailEvent>;
}
/**
 * 
 * @export
 * @interface SystemSettingsCloudtrailLogsList200Response
 */
export interface SystemSettingsCloudtrailLogsList200Response {
    /**
     * 
     * @type {number}
     * @memberof SystemSettingsCloudtrailLogsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCloudtrailLogsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCloudtrailLogsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<CloudTrailAlarmLog>}
     * @memberof SystemSettingsCloudtrailLogsList200Response
     */
    'results': Array<CloudTrailAlarmLog>;
}
/**
 * 
 * @export
 * @interface SystemSettingsRegionsList200Response
 */
export interface SystemSettingsRegionsList200Response {
    /**
     * 
     * @type {number}
     * @memberof SystemSettingsRegionsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsRegionsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsRegionsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Region>}
     * @memberof SystemSettingsRegionsList200Response
     */
    'results': Array<Region>;
}
/**
 * 
 * @export
 * @interface SystemSettingsRuleSuppressionLogList200Response
 */
export interface SystemSettingsRuleSuppressionLogList200Response {
    /**
     * 
     * @type {number}
     * @memberof SystemSettingsRuleSuppressionLogList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsRuleSuppressionLogList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsRuleSuppressionLogList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<RuleSuppressionLog>}
     * @memberof SystemSettingsRuleSuppressionLogList200Response
     */
    'results': Array<RuleSuppressionLog>;
}
/**
 * 
 * @export
 * @interface SystemSettingsRuleSuppressionSetupList200Response
 */
export interface SystemSettingsRuleSuppressionSetupList200Response {
    /**
     * 
     * @type {number}
     * @memberof SystemSettingsRuleSuppressionSetupList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsRuleSuppressionSetupList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsRuleSuppressionSetupList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ReadRuleSuppressionSetUp>}
     * @memberof SystemSettingsRuleSuppressionSetupList200Response
     */
    'results': Array<ReadRuleSuppressionSetUp>;
}
/**
 * 
 * @export
 * @interface SystemSettingsSystemSettingsList200Response
 */
export interface SystemSettingsSystemSettingsList200Response {
    /**
     * 
     * @type {number}
     * @memberof SystemSettingsSystemSettingsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsSystemSettingsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsSystemSettingsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<SystemSetting>}
     * @memberof SystemSettingsSystemSettingsList200Response
     */
    'results': Array<SystemSetting>;
}
/**
 * 
 * @export
 * @interface SystemSettingsTagsList200Response
 */
export interface SystemSettingsTagsList200Response {
    /**
     * 
     * @type {number}
     * @memberof SystemSettingsTagsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsTagsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsTagsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof SystemSettingsTagsList200Response
     */
    'results': Array<Tag>;
}
/**
 * 
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * 
     * @type {number}
     * @memberof Tag
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof Tag
     */
    'tenant'?: number;
}
/**
 * 
 * @export
 * @interface Tenant
 */
export interface Tenant {
    /**
     * 
     * @type {number}
     * @memberof Tenant
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'full_name': string;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'business_email': string;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'logo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'date_created'?: string;
}
/**
 * 
 * @export
 * @interface TenantAssetManagement
 */
export interface TenantAssetManagement {
    /**
     * 
     * @type {number}
     * @memberof TenantAssetManagement
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TenantAssetManagement
     */
    'tenant'?: number;
    /**
     * 
     * @type {string}
     * @memberof TenantAssetManagement
     */
    'resource_types': string;
    /**
     * 
     * @type {string}
     * @memberof TenantAssetManagement
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TenantAssetManagement
     */
    'services': string;
    /**
     * 
     * @type {string}
     * @memberof TenantAssetManagement
     */
    'cloud_identifier': string;
    /**
     * 
     * @type {string}
     * @memberof TenantAssetManagement
     */
    'cloud_provider': string;
    /**
     * 
     * @type {string}
     * @memberof TenantAssetManagement
     */
    'region': string;
    /**
     * 
     * @type {number}
     * @memberof TenantAssetManagement
     */
    'cloud_account': number;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof TenantAssetManagement
     */
    'tags'?: Array<Tag>;
    /**
     * 
     * @type {Set<number>}
     * @memberof TenantAssetManagement
     */
    'tag_ids'?: Set<number>;
}
/**
 * 
 * @export
 * @interface TenantRegister
 */
export interface TenantRegister {
    /**
     * 
     * @type {string}
     * @memberof TenantRegister
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof TenantRegister
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof TenantRegister
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof TenantRegister
     */
    'user_image'?: string | null;
}
/**
 * 
 * @export
 * @interface TenantRegistration
 */
export interface TenantRegistration {
    /**
     * 
     * @type {string}
     * @memberof TenantRegistration
     */
    'business_email': string;
    /**
     * 
     * @type {string}
     * @memberof TenantRegistration
     */
    'full_name': string;
    /**
     * 
     * @type {string}
     * @memberof TenantRegistration
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof TenantRegistration
     */
    'password1': string;
    /**
     * 
     * @type {string}
     * @memberof TenantRegistration
     */
    'password2': string;
}
/**
 * 
 * @export
 * @interface TenantUser
 */
export interface TenantUser {
    /**
     * 
     * @type {number}
     * @memberof TenantUser
     */
    'id'?: number;
    /**
     * 
     * @type {Role}
     * @memberof TenantUser
     */
    'role': Role;
    /**
     * 
     * @type {string}
     * @memberof TenantUser
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TenantUser
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TenantUser
     */
    'latest_cloud_provider_account__id'?: string;
    /**
     * 
     * @type {CustomLoginTenant}
     * @memberof TenantUser
     */
    'tenant': CustomLoginTenant;
    /**
     * 
     * @type {string}
     * @memberof TenantUser
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof TenantUser
     */
    'user_image'?: string | null;
}
/**
 * 
 * @export
 * @interface Ticket
 */
export interface Ticket {
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'ticket_type': number;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'subject': string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'asset': number;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'created_by'?: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'status'?: string;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'assigned_to': number;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'tenant'?: string;
}
/**
 * 
 * @export
 * @interface TicketActvity
 */
export interface TicketActvity {
    /**
     * 
     * @type {number}
     * @memberof TicketActvity
     */
    'id'?: number;
    /**
     * 
     * @type {CustomTicket}
     * @memberof TicketActvity
     */
    'ticket': CustomTicket;
    /**
     * 
     * @type {string}
     * @memberof TicketActvity
     */
    'comments': string;
    /**
     * 
     * @type {TicketUser}
     * @memberof TicketActvity
     */
    'user'?: TicketUser;
    /**
     * 
     * @type {string}
     * @memberof TicketActvity
     */
    'timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof TicketActvity
     */
    'activity_type': string;
}
/**
 * 
 * @export
 * @interface TicketAsset
 */
export interface TicketAsset {
    /**
     * 
     * @type {number}
     * @memberof TicketAsset
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TicketAsset
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TicketAsset
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof TicketAsset
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface TicketType
 */
export interface TicketType {
    /**
     * 
     * @type {number}
     * @memberof TicketType
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TicketType
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TicketType
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof TicketType
     */
    'status'?: boolean;
}
/**
 * 
 * @export
 * @interface TicketUser
 */
export interface TicketUser {
    /**
     * 
     * @type {number}
     * @memberof TicketUser
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TicketUser
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TicketUser
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TicketUser
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface TicketsTicketActivitiesList200Response
 */
export interface TicketsTicketActivitiesList200Response {
    /**
     * 
     * @type {number}
     * @memberof TicketsTicketActivitiesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof TicketsTicketActivitiesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TicketsTicketActivitiesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<TicketActvity>}
     * @memberof TicketsTicketActivitiesList200Response
     */
    'results': Array<TicketActvity>;
}
/**
 * 
 * @export
 * @interface TicketsTicketTypesList200Response
 */
export interface TicketsTicketTypesList200Response {
    /**
     * 
     * @type {number}
     * @memberof TicketsTicketTypesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof TicketsTicketTypesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TicketsTicketTypesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<TicketType>}
     * @memberof TicketsTicketTypesList200Response
     */
    'results': Array<TicketType>;
}
/**
 * 
 * @export
 * @interface TicketsTicketsList200Response
 */
export interface TicketsTicketsList200Response {
    /**
     * 
     * @type {number}
     * @memberof TicketsTicketsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof TicketsTicketsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TicketsTicketsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ReadTicket>}
     * @memberof TicketsTicketsList200Response
     */
    'results': Array<ReadTicket>;
}
/**
 * 
 * @export
 * @interface TokenObtainPair
 */
export interface TokenObtainPair {
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPair
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPair
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface TokenRefresh
 */
export interface TokenRefresh {
    /**
     * 
     * @type {string}
     * @memberof TokenRefresh
     */
    'refresh': string;
    /**
     * 
     * @type {string}
     * @memberof TokenRefresh
     */
    'access'?: string;
}
/**
 * 
 * @export
 * @interface UpdateCloudEventStatus
 */
export interface UpdateCloudEventStatus {
    /**
     * List of Cloud Event IDs to update
     * @type {Array<number>}
     * @memberof UpdateCloudEventStatus
     */
    'event_ids': Array<number>;
    /**
     * New status to set for the Cloud Events
     * @type {string}
     * @memberof UpdateCloudEventStatus
     */
    'new_status': UpdateCloudEventStatusNewStatusEnum;
}

export const UpdateCloudEventStatusNewStatusEnum = {
    Triggered: 'triggered',
    Normal: 'normal'
} as const;

export type UpdateCloudEventStatusNewStatusEnum = typeof UpdateCloudEventStatusNewStatusEnum[keyof typeof UpdateCloudEventStatusNewStatusEnum];

/**
 * 
 * @export
 * @interface UserUpdate
 */
export interface UserUpdate {
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'user_image'?: string | null;
}

/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists Activity Log
         * @summary Lists Activity Log
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [status] Filter by log status (Success or Failed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiActivityLogsList: async (page?: number, pageSize?: number, status?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/api/v1/activity_logs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiActivityLogsRead: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiActivityLogsRead', 'id', id)
            const localVarPath = `/accounts/api/v1/activity_logs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefresh} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiApiTokenRefreshCreate: async (data: TokenRefresh, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiApiTokenRefreshCreate', 'data', data)
            const localVarPath = `/accounts/api/v1/api/token/refresh/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create New User
         * @summary Create New User
         * @param {TenantRegister} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiCreateUsersCreate: async (data: TenantRegister, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiCreateUsersCreate', 'data', data)
            const localVarPath = `/accounts/api/v1/create_users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ForgetPasswordChange} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiForgotPasswordChangeCreate: async (data: ForgetPasswordChange, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiForgotPasswordChangeCreate', 'data', data)
            const localVarPath = `/accounts/api/v1/forgot_password_change/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object\'s key.
         * @param {Login} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiLoginCreate: async (data: Login, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiLoginCreate', 'data', data)
            const localVarPath = `/accounts/api/v1/login/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accepts/Returns nothing.
         * @summary Calls Django logout method and delete the Token object assigned to the current User object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiLogoutCreate: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/api/v1/logout/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accepts/Returns nothing.
         * @summary Calls Django logout method and delete the Token object assigned to the current User object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiLogoutList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/api/v1/logout/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
         * @summary Calls Django Auth SetPasswordForm save method.
         * @param {PasswordChange} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPasswordChangeCreate: async (data: PasswordChange, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiPasswordChangeCreate', 'data', data)
            const localVarPath = `/accounts/api/v1/password/change/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends auto-generated Password Reset to User
         * @summary Email User Password Reset
         * @param {CustomPasswordReset} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPasswordResetCreate: async (data: CustomPasswordReset, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiPasswordResetCreate', 'data', data)
            const localVarPath = `/accounts/api/v1/password_reset/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create Permission
         * @summary Creates new Permission
         * @param {Permission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPermissionsCreate: async (data: Permission, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiPermissionsCreate', 'data', data)
            const localVarPath = `/accounts/api/v1/permissions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Permissions
         * @summary List created Permissions
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPermissionsList: async (page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/api/v1/permissions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * partially update Permission
         * @summary partially updates a Permission property
         * @param {number} id A unique integer value identifying this permission.
         * @param {Permission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPermissionsPartialUpdate: async (id: number, data: Permission, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiPermissionsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiPermissionsPartialUpdate', 'data', data)
            const localVarPath = `/accounts/api/v1/permissions/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * retrieves a Permission
         * @summary Retrieves an instance of a Permission
         * @param {number} id A unique integer value identifying this permission.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPermissionsRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiPermissionsRead', 'id', id)
            const localVarPath = `/accounts/api/v1/permissions/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update Permission
         * @summary updates a Permission
         * @param {number} id A unique integer value identifying this permission.
         * @param {Permission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPermissionsUpdate: async (id: number, data: Permission, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiPermissionsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiPermissionsUpdate', 'data', data)
            const localVarPath = `/accounts/api/v1/permissions/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RolePermission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolePermissionCreate: async (data: RolePermission, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiRolePermissionCreate', 'data', data)
            const localVarPath = `/accounts/api/v1/role_permission/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolePermissionList: async (page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/api/v1/role_permission/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * retrieves a RolePermission (Please pass role id for the id field)
         * @summary Retrieves an instance of a Role and its Permissions
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolePermissionRead: async (roleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('accountsApiRolePermissionRead', 'roleId', roleId)
            const localVarPath = `/accounts/api/v1/role_permission/{role_id}`
                .replace(`{${"role_id"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create Role
         * @summary Creates new Role
         * @param {Role} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolesCreate: async (data: Role, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiRolesCreate', 'data', data)
            const localVarPath = `/accounts/api/v1/roles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Roles
         * @summary List created Roles
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolesList: async (page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/api/v1/roles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * partially update Role
         * @summary partially updates a Role property
         * @param {number} id A unique integer value identifying this role.
         * @param {Role} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolesPartialUpdate: async (id: number, data: Role, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiRolesPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiRolesPartialUpdate', 'data', data)
            const localVarPath = `/accounts/api/v1/roles/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * retrieves a Role
         * @summary Retrieves an instance of a Role
         * @param {number} id A unique integer value identifying this role.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolesRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiRolesRead', 'id', id)
            const localVarPath = `/accounts/api/v1/roles/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update Role
         * @summary updates a Role property
         * @param {number} id A unique integer value identifying this role.
         * @param {Role} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolesUpdate: async (id: number, data: Role, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiRolesUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiRolesUpdate', 'data', data)
            const localVarPath = `/accounts/api/v1/roles/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TenantRegistration} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTenantSelfOnboardRegisterCreate: async (data: TenantRegistration, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiTenantSelfOnboardRegisterCreate', 'data', data)
            const localVarPath = `/accounts/api/v1/tenant_self_onboard_register/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Tenants
         * @summary List created Tenants
         * @param {string} [fullName] full_name
         * @param {string} [businessEmail] business_email
         * @param {string} [country] country
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTenantsList: async (fullName?: string, businessEmail?: string, country?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/api/v1/tenants/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (fullName !== undefined) {
                localVarQueryParameter['full_name'] = fullName;
            }

            if (businessEmail !== undefined) {
                localVarQueryParameter['business_email'] = businessEmail;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * partially update Tenant
         * @summary partially updates a Tenant property
         * @param {number} id A unique integer value identifying this tenant.
         * @param {Tenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTenantsPartialUpdate: async (id: number, data: Tenant, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiTenantsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiTenantsPartialUpdate', 'data', data)
            const localVarPath = `/accounts/api/v1/tenants/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * retrieves a Tenant
         * @summary Retrieves an instance of a Tenant
         * @param {number} id A unique integer value identifying this tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTenantsRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiTenantsRead', 'id', id)
            const localVarPath = `/accounts/api/v1/tenants/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update Tenant
         * @summary updates a Tenant property
         * @param {number} id A unique integer value identifying this tenant.
         * @param {Tenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTenantsUpdate: async (id: number, data: Tenant, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiTenantsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiTenantsUpdate', 'data', data)
            const localVarPath = `/accounts/api/v1/tenants/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {TokenObtainPair} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTokenCreate: async (data: TokenObtainPair, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiTokenCreate', 'data', data)
            const localVarPath = `/accounts/api/v1/token/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates Role Permissions (Admin)
         * @summary Updates Role Permissions. You can pass an Array as payload
         * @param {RolePermission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiUpdateRolePermissionUpdate: async (data: RolePermission, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiUpdateRolePermissionUpdate', 'data', data)
            const localVarPath = `/accounts/api/v1/update_role_permission/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Users
         * @summary List created Users in Request User Tenant
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [firstName] Filter by First Name
         * @param {string} [lastName] Filter by last_name
         * @param {any} [email] Filter by email
         * @param {number} [role] Filter by role id
         * @param {number} [tenant] Filter by tenant_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiUsersList: async (page?: number, pageSize?: number, firstName?: string, lastName?: string, email?: any, role?: number, tenant?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/api/v1/users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['first_name'] = firstName;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['last_name'] = lastName;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }

            if (tenant !== undefined) {
                localVarQueryParameter['Tenant'] = tenant;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * partially updates a User property
         * @summary partially updates a User property
         * @param {string} id 
         * @param {UserUpdate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiUsersPartialUpdate: async (id: string, data: UserUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiUsersPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiUsersPartialUpdate', 'data', data)
            const localVarPath = `/accounts/api/v1/users/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * retrieves a User
         * @summary Retrieves an instance of a User
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiUsersRead: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiUsersRead', 'id', id)
            const localVarPath = `/accounts/api/v1/users/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * UpdateS A User property
         * @summary updates a Tenant User property
         * @param {string} id 
         * @param {UserUpdate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiUsersUpdate: async (id: string, data: UserUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiUsersUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiUsersUpdate', 'data', data)
            const localVarPath = `/accounts/api/v1/users/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists Activity Log
         * @summary Lists Activity Log
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [status] Filter by log status (Success or Failed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiActivityLogsList(page?: number, pageSize?: number, status?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsApiActivityLogsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiActivityLogsList(page, pageSize, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiActivityLogsRead(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActivityLog>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiActivityLogsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefresh} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiApiTokenRefreshCreate(data: TokenRefresh, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenRefresh>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiApiTokenRefreshCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create New User
         * @summary Create New User
         * @param {TenantRegister} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiCreateUsersCreate(data: TenantRegister, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantRegister>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiCreateUsersCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ForgetPasswordChange} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiForgotPasswordChangeCreate(data: ForgetPasswordChange, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ForgetPasswordChange>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiForgotPasswordChangeCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object\'s key.
         * @param {Login} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiLoginCreate(data: Login, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Login>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiLoginCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Accepts/Returns nothing.
         * @summary Calls Django logout method and delete the Token object assigned to the current User object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiLogoutCreate(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiLogoutCreate(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Accepts/Returns nothing.
         * @summary Calls Django logout method and delete the Token object assigned to the current User object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiLogoutList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiLogoutList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
         * @summary Calls Django Auth SetPasswordForm save method.
         * @param {PasswordChange} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiPasswordChangeCreate(data: PasswordChange, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordChange>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiPasswordChangeCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends auto-generated Password Reset to User
         * @summary Email User Password Reset
         * @param {CustomPasswordReset} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiPasswordResetCreate(data: CustomPasswordReset, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomPasswordReset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiPasswordResetCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create Permission
         * @summary Creates new Permission
         * @param {Permission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiPermissionsCreate(data: Permission, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Permission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiPermissionsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Permissions
         * @summary List created Permissions
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiPermissionsList(page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsApiPermissionsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiPermissionsList(page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * partially update Permission
         * @summary partially updates a Permission property
         * @param {number} id A unique integer value identifying this permission.
         * @param {Permission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiPermissionsPartialUpdate(id: number, data: Permission, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Permission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiPermissionsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * retrieves a Permission
         * @summary Retrieves an instance of a Permission
         * @param {number} id A unique integer value identifying this permission.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiPermissionsRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Permission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiPermissionsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update Permission
         * @summary updates a Permission
         * @param {number} id A unique integer value identifying this permission.
         * @param {Permission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiPermissionsUpdate(id: number, data: Permission, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Permission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiPermissionsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RolePermission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiRolePermissionCreate(data: RolePermission, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolePermission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiRolePermissionCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiRolePermissionList(page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsApiRolePermissionList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiRolePermissionList(page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * retrieves a RolePermission (Please pass role id for the id field)
         * @summary Retrieves an instance of a Role and its Permissions
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiRolePermissionRead(roleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolePermission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiRolePermissionRead(roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create Role
         * @summary Creates new Role
         * @param {Role} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiRolesCreate(data: Role, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiRolesCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Roles
         * @summary List created Roles
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiRolesList(page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsApiRolesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiRolesList(page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * partially update Role
         * @summary partially updates a Role property
         * @param {number} id A unique integer value identifying this role.
         * @param {Role} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiRolesPartialUpdate(id: number, data: Role, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiRolesPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * retrieves a Role
         * @summary Retrieves an instance of a Role
         * @param {number} id A unique integer value identifying this role.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiRolesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiRolesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update Role
         * @summary updates a Role property
         * @param {number} id A unique integer value identifying this role.
         * @param {Role} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiRolesUpdate(id: number, data: Role, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiRolesUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TenantRegistration} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiTenantSelfOnboardRegisterCreate(data: TenantRegistration, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiTenantSelfOnboardRegisterCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Tenants
         * @summary List created Tenants
         * @param {string} [fullName] full_name
         * @param {string} [businessEmail] business_email
         * @param {string} [country] country
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiTenantsList(fullName?: string, businessEmail?: string, country?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsApiTenantsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiTenantsList(fullName, businessEmail, country, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * partially update Tenant
         * @summary partially updates a Tenant property
         * @param {number} id A unique integer value identifying this tenant.
         * @param {Tenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiTenantsPartialUpdate(id: number, data: Tenant, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tenant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiTenantsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * retrieves a Tenant
         * @summary Retrieves an instance of a Tenant
         * @param {number} id A unique integer value identifying this tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiTenantsRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tenant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiTenantsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update Tenant
         * @summary updates a Tenant property
         * @param {number} id A unique integer value identifying this tenant.
         * @param {Tenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiTenantsUpdate(id: number, data: Tenant, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tenant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiTenantsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {TokenObtainPair} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiTokenCreate(data: TokenObtainPair, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenObtainPair>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiTokenCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates Role Permissions (Admin)
         * @summary Updates Role Permissions. You can pass an Array as payload
         * @param {RolePermission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiUpdateRolePermissionUpdate(data: RolePermission, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolePermission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiUpdateRolePermissionUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Users
         * @summary List created Users in Request User Tenant
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [firstName] Filter by First Name
         * @param {string} [lastName] Filter by last_name
         * @param {any} [email] Filter by email
         * @param {number} [role] Filter by role id
         * @param {number} [tenant] Filter by tenant_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiUsersList(page?: number, pageSize?: number, firstName?: string, lastName?: string, email?: any, role?: number, tenant?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsApiUsersList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiUsersList(page, pageSize, firstName, lastName, email, role, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * partially updates a User property
         * @summary partially updates a User property
         * @param {string} id 
         * @param {UserUpdate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiUsersPartialUpdate(id: string, data: UserUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiUsersPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * retrieves a User
         * @summary Retrieves an instance of a User
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiUsersRead(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiUsersRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * UpdateS A User property
         * @summary updates a Tenant User property
         * @param {string} id 
         * @param {UserUpdate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiUsersUpdate(id: string, data: UserUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiUsersUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * Lists Activity Log
         * @summary Lists Activity Log
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [status] Filter by log status (Success or Failed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiActivityLogsList(page?: number, pageSize?: number, status?: string, options?: any): AxiosPromise<AccountsApiActivityLogsList200Response> {
            return localVarFp.accountsApiActivityLogsList(page, pageSize, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiActivityLogsRead(id: string, options?: any): AxiosPromise<ActivityLog> {
            return localVarFp.accountsApiActivityLogsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefresh} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiApiTokenRefreshCreate(data: TokenRefresh, options?: any): AxiosPromise<TokenRefresh> {
            return localVarFp.accountsApiApiTokenRefreshCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Create New User
         * @summary Create New User
         * @param {TenantRegister} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiCreateUsersCreate(data: TenantRegister, options?: any): AxiosPromise<TenantRegister> {
            return localVarFp.accountsApiCreateUsersCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ForgetPasswordChange} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiForgotPasswordChangeCreate(data: ForgetPasswordChange, options?: any): AxiosPromise<ForgetPasswordChange> {
            return localVarFp.accountsApiForgotPasswordChangeCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object\'s key.
         * @param {Login} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiLoginCreate(data: Login, options?: any): AxiosPromise<Login> {
            return localVarFp.accountsApiLoginCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Accepts/Returns nothing.
         * @summary Calls Django logout method and delete the Token object assigned to the current User object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiLogoutCreate(options?: any): AxiosPromise<void> {
            return localVarFp.accountsApiLogoutCreate(options).then((request) => request(axios, basePath));
        },
        /**
         * Accepts/Returns nothing.
         * @summary Calls Django logout method and delete the Token object assigned to the current User object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiLogoutList(options?: any): AxiosPromise<void> {
            return localVarFp.accountsApiLogoutList(options).then((request) => request(axios, basePath));
        },
        /**
         * Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
         * @summary Calls Django Auth SetPasswordForm save method.
         * @param {PasswordChange} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPasswordChangeCreate(data: PasswordChange, options?: any): AxiosPromise<PasswordChange> {
            return localVarFp.accountsApiPasswordChangeCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends auto-generated Password Reset to User
         * @summary Email User Password Reset
         * @param {CustomPasswordReset} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPasswordResetCreate(data: CustomPasswordReset, options?: any): AxiosPromise<CustomPasswordReset> {
            return localVarFp.accountsApiPasswordResetCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Create Permission
         * @summary Creates new Permission
         * @param {Permission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPermissionsCreate(data: Permission, options?: any): AxiosPromise<Permission> {
            return localVarFp.accountsApiPermissionsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * List Permissions
         * @summary List created Permissions
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPermissionsList(page?: number, pageSize?: number, options?: any): AxiosPromise<AccountsApiPermissionsList200Response> {
            return localVarFp.accountsApiPermissionsList(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * partially update Permission
         * @summary partially updates a Permission property
         * @param {number} id A unique integer value identifying this permission.
         * @param {Permission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPermissionsPartialUpdate(id: number, data: Permission, options?: any): AxiosPromise<Permission> {
            return localVarFp.accountsApiPermissionsPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * retrieves a Permission
         * @summary Retrieves an instance of a Permission
         * @param {number} id A unique integer value identifying this permission.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPermissionsRead(id: number, options?: any): AxiosPromise<Permission> {
            return localVarFp.accountsApiPermissionsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * update Permission
         * @summary updates a Permission
         * @param {number} id A unique integer value identifying this permission.
         * @param {Permission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPermissionsUpdate(id: number, data: Permission, options?: any): AxiosPromise<Permission> {
            return localVarFp.accountsApiPermissionsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RolePermission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolePermissionCreate(data: RolePermission, options?: any): AxiosPromise<RolePermission> {
            return localVarFp.accountsApiRolePermissionCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolePermissionList(page?: number, pageSize?: number, options?: any): AxiosPromise<AccountsApiRolePermissionList200Response> {
            return localVarFp.accountsApiRolePermissionList(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * retrieves a RolePermission (Please pass role id for the id field)
         * @summary Retrieves an instance of a Role and its Permissions
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolePermissionRead(roleId: string, options?: any): AxiosPromise<RolePermission> {
            return localVarFp.accountsApiRolePermissionRead(roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create Role
         * @summary Creates new Role
         * @param {Role} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolesCreate(data: Role, options?: any): AxiosPromise<Role> {
            return localVarFp.accountsApiRolesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * List Roles
         * @summary List created Roles
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolesList(page?: number, pageSize?: number, options?: any): AxiosPromise<AccountsApiRolesList200Response> {
            return localVarFp.accountsApiRolesList(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * partially update Role
         * @summary partially updates a Role property
         * @param {number} id A unique integer value identifying this role.
         * @param {Role} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolesPartialUpdate(id: number, data: Role, options?: any): AxiosPromise<Role> {
            return localVarFp.accountsApiRolesPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * retrieves a Role
         * @summary Retrieves an instance of a Role
         * @param {number} id A unique integer value identifying this role.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolesRead(id: number, options?: any): AxiosPromise<Role> {
            return localVarFp.accountsApiRolesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * update Role
         * @summary updates a Role property
         * @param {number} id A unique integer value identifying this role.
         * @param {Role} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolesUpdate(id: number, data: Role, options?: any): AxiosPromise<Role> {
            return localVarFp.accountsApiRolesUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TenantRegistration} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTenantSelfOnboardRegisterCreate(data: TenantRegistration, options?: any): AxiosPromise<TenantRegistration> {
            return localVarFp.accountsApiTenantSelfOnboardRegisterCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * List Tenants
         * @summary List created Tenants
         * @param {string} [fullName] full_name
         * @param {string} [businessEmail] business_email
         * @param {string} [country] country
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTenantsList(fullName?: string, businessEmail?: string, country?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<AccountsApiTenantsList200Response> {
            return localVarFp.accountsApiTenantsList(fullName, businessEmail, country, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * partially update Tenant
         * @summary partially updates a Tenant property
         * @param {number} id A unique integer value identifying this tenant.
         * @param {Tenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTenantsPartialUpdate(id: number, data: Tenant, options?: any): AxiosPromise<Tenant> {
            return localVarFp.accountsApiTenantsPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * retrieves a Tenant
         * @summary Retrieves an instance of a Tenant
         * @param {number} id A unique integer value identifying this tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTenantsRead(id: number, options?: any): AxiosPromise<Tenant> {
            return localVarFp.accountsApiTenantsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * update Tenant
         * @summary updates a Tenant property
         * @param {number} id A unique integer value identifying this tenant.
         * @param {Tenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTenantsUpdate(id: number, data: Tenant, options?: any): AxiosPromise<Tenant> {
            return localVarFp.accountsApiTenantsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {TokenObtainPair} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTokenCreate(data: TokenObtainPair, options?: any): AxiosPromise<TokenObtainPair> {
            return localVarFp.accountsApiTokenCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates Role Permissions (Admin)
         * @summary Updates Role Permissions. You can pass an Array as payload
         * @param {RolePermission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiUpdateRolePermissionUpdate(data: RolePermission, options?: any): AxiosPromise<RolePermission> {
            return localVarFp.accountsApiUpdateRolePermissionUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * List Users
         * @summary List created Users in Request User Tenant
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [firstName] Filter by First Name
         * @param {string} [lastName] Filter by last_name
         * @param {any} [email] Filter by email
         * @param {number} [role] Filter by role id
         * @param {number} [tenant] Filter by tenant_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiUsersList(page?: number, pageSize?: number, firstName?: string, lastName?: string, email?: any, role?: number, tenant?: number, options?: any): AxiosPromise<AccountsApiUsersList200Response> {
            return localVarFp.accountsApiUsersList(page, pageSize, firstName, lastName, email, role, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * partially updates a User property
         * @summary partially updates a User property
         * @param {string} id 
         * @param {UserUpdate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiUsersPartialUpdate(id: string, data: UserUpdate, options?: any): AxiosPromise<UserUpdate> {
            return localVarFp.accountsApiUsersPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * retrieves a User
         * @summary Retrieves an instance of a User
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiUsersRead(id: string, options?: any): AxiosPromise<TenantUser> {
            return localVarFp.accountsApiUsersRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * UpdateS A User property
         * @summary updates a Tenant User property
         * @param {string} id 
         * @param {UserUpdate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiUsersUpdate(id: string, data: UserUpdate, options?: any): AxiosPromise<UserUpdate> {
            return localVarFp.accountsApiUsersUpdate(id, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for accountsApiActivityLogsList operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiActivityLogsListRequest
 */
export interface AccountsApiAccountsApiActivityLogsListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof AccountsApiAccountsApiActivityLogsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof AccountsApiAccountsApiActivityLogsList
     */
    readonly pageSize?: number

    /**
     * Filter by log status (Success or Failed)
     * @type {string}
     * @memberof AccountsApiAccountsApiActivityLogsList
     */
    readonly status?: string
}

/**
 * Request parameters for accountsApiActivityLogsRead operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiActivityLogsReadRequest
 */
export interface AccountsApiAccountsApiActivityLogsReadRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountsApiAccountsApiActivityLogsRead
     */
    readonly id: string
}

/**
 * Request parameters for accountsApiApiTokenRefreshCreate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiApiTokenRefreshCreateRequest
 */
export interface AccountsApiAccountsApiApiTokenRefreshCreateRequest {
    /**
     * 
     * @type {TokenRefresh}
     * @memberof AccountsApiAccountsApiApiTokenRefreshCreate
     */
    readonly data: TokenRefresh
}

/**
 * Request parameters for accountsApiCreateUsersCreate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiCreateUsersCreateRequest
 */
export interface AccountsApiAccountsApiCreateUsersCreateRequest {
    /**
     * 
     * @type {TenantRegister}
     * @memberof AccountsApiAccountsApiCreateUsersCreate
     */
    readonly data: TenantRegister
}

/**
 * Request parameters for accountsApiForgotPasswordChangeCreate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiForgotPasswordChangeCreateRequest
 */
export interface AccountsApiAccountsApiForgotPasswordChangeCreateRequest {
    /**
     * 
     * @type {ForgetPasswordChange}
     * @memberof AccountsApiAccountsApiForgotPasswordChangeCreate
     */
    readonly data: ForgetPasswordChange
}

/**
 * Request parameters for accountsApiLoginCreate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiLoginCreateRequest
 */
export interface AccountsApiAccountsApiLoginCreateRequest {
    /**
     * 
     * @type {Login}
     * @memberof AccountsApiAccountsApiLoginCreate
     */
    readonly data: Login
}

/**
 * Request parameters for accountsApiPasswordChangeCreate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiPasswordChangeCreateRequest
 */
export interface AccountsApiAccountsApiPasswordChangeCreateRequest {
    /**
     * 
     * @type {PasswordChange}
     * @memberof AccountsApiAccountsApiPasswordChangeCreate
     */
    readonly data: PasswordChange
}

/**
 * Request parameters for accountsApiPasswordResetCreate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiPasswordResetCreateRequest
 */
export interface AccountsApiAccountsApiPasswordResetCreateRequest {
    /**
     * 
     * @type {CustomPasswordReset}
     * @memberof AccountsApiAccountsApiPasswordResetCreate
     */
    readonly data: CustomPasswordReset
}

/**
 * Request parameters for accountsApiPermissionsCreate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiPermissionsCreateRequest
 */
export interface AccountsApiAccountsApiPermissionsCreateRequest {
    /**
     * 
     * @type {Permission}
     * @memberof AccountsApiAccountsApiPermissionsCreate
     */
    readonly data: Permission
}

/**
 * Request parameters for accountsApiPermissionsList operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiPermissionsListRequest
 */
export interface AccountsApiAccountsApiPermissionsListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof AccountsApiAccountsApiPermissionsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof AccountsApiAccountsApiPermissionsList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for accountsApiPermissionsPartialUpdate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiPermissionsPartialUpdateRequest
 */
export interface AccountsApiAccountsApiPermissionsPartialUpdateRequest {
    /**
     * A unique integer value identifying this permission.
     * @type {number}
     * @memberof AccountsApiAccountsApiPermissionsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Permission}
     * @memberof AccountsApiAccountsApiPermissionsPartialUpdate
     */
    readonly data: Permission
}

/**
 * Request parameters for accountsApiPermissionsRead operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiPermissionsReadRequest
 */
export interface AccountsApiAccountsApiPermissionsReadRequest {
    /**
     * A unique integer value identifying this permission.
     * @type {number}
     * @memberof AccountsApiAccountsApiPermissionsRead
     */
    readonly id: number
}

/**
 * Request parameters for accountsApiPermissionsUpdate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiPermissionsUpdateRequest
 */
export interface AccountsApiAccountsApiPermissionsUpdateRequest {
    /**
     * A unique integer value identifying this permission.
     * @type {number}
     * @memberof AccountsApiAccountsApiPermissionsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Permission}
     * @memberof AccountsApiAccountsApiPermissionsUpdate
     */
    readonly data: Permission
}

/**
 * Request parameters for accountsApiRolePermissionCreate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiRolePermissionCreateRequest
 */
export interface AccountsApiAccountsApiRolePermissionCreateRequest {
    /**
     * 
     * @type {RolePermission}
     * @memberof AccountsApiAccountsApiRolePermissionCreate
     */
    readonly data: RolePermission
}

/**
 * Request parameters for accountsApiRolePermissionList operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiRolePermissionListRequest
 */
export interface AccountsApiAccountsApiRolePermissionListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof AccountsApiAccountsApiRolePermissionList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof AccountsApiAccountsApiRolePermissionList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for accountsApiRolePermissionRead operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiRolePermissionReadRequest
 */
export interface AccountsApiAccountsApiRolePermissionReadRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountsApiAccountsApiRolePermissionRead
     */
    readonly roleId: string
}

/**
 * Request parameters for accountsApiRolesCreate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiRolesCreateRequest
 */
export interface AccountsApiAccountsApiRolesCreateRequest {
    /**
     * 
     * @type {Role}
     * @memberof AccountsApiAccountsApiRolesCreate
     */
    readonly data: Role
}

/**
 * Request parameters for accountsApiRolesList operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiRolesListRequest
 */
export interface AccountsApiAccountsApiRolesListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof AccountsApiAccountsApiRolesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof AccountsApiAccountsApiRolesList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for accountsApiRolesPartialUpdate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiRolesPartialUpdateRequest
 */
export interface AccountsApiAccountsApiRolesPartialUpdateRequest {
    /**
     * A unique integer value identifying this role.
     * @type {number}
     * @memberof AccountsApiAccountsApiRolesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Role}
     * @memberof AccountsApiAccountsApiRolesPartialUpdate
     */
    readonly data: Role
}

/**
 * Request parameters for accountsApiRolesRead operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiRolesReadRequest
 */
export interface AccountsApiAccountsApiRolesReadRequest {
    /**
     * A unique integer value identifying this role.
     * @type {number}
     * @memberof AccountsApiAccountsApiRolesRead
     */
    readonly id: number
}

/**
 * Request parameters for accountsApiRolesUpdate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiRolesUpdateRequest
 */
export interface AccountsApiAccountsApiRolesUpdateRequest {
    /**
     * A unique integer value identifying this role.
     * @type {number}
     * @memberof AccountsApiAccountsApiRolesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Role}
     * @memberof AccountsApiAccountsApiRolesUpdate
     */
    readonly data: Role
}

/**
 * Request parameters for accountsApiTenantSelfOnboardRegisterCreate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiTenantSelfOnboardRegisterCreateRequest
 */
export interface AccountsApiAccountsApiTenantSelfOnboardRegisterCreateRequest {
    /**
     * 
     * @type {TenantRegistration}
     * @memberof AccountsApiAccountsApiTenantSelfOnboardRegisterCreate
     */
    readonly data: TenantRegistration
}

/**
 * Request parameters for accountsApiTenantsList operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiTenantsListRequest
 */
export interface AccountsApiAccountsApiTenantsListRequest {
    /**
     * full_name
     * @type {string}
     * @memberof AccountsApiAccountsApiTenantsList
     */
    readonly fullName?: string

    /**
     * business_email
     * @type {string}
     * @memberof AccountsApiAccountsApiTenantsList
     */
    readonly businessEmail?: string

    /**
     * country
     * @type {string}
     * @memberof AccountsApiAccountsApiTenantsList
     */
    readonly country?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof AccountsApiAccountsApiTenantsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof AccountsApiAccountsApiTenantsList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for accountsApiTenantsPartialUpdate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiTenantsPartialUpdateRequest
 */
export interface AccountsApiAccountsApiTenantsPartialUpdateRequest {
    /**
     * A unique integer value identifying this tenant.
     * @type {number}
     * @memberof AccountsApiAccountsApiTenantsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Tenant}
     * @memberof AccountsApiAccountsApiTenantsPartialUpdate
     */
    readonly data: Tenant
}

/**
 * Request parameters for accountsApiTenantsRead operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiTenantsReadRequest
 */
export interface AccountsApiAccountsApiTenantsReadRequest {
    /**
     * A unique integer value identifying this tenant.
     * @type {number}
     * @memberof AccountsApiAccountsApiTenantsRead
     */
    readonly id: number
}

/**
 * Request parameters for accountsApiTenantsUpdate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiTenantsUpdateRequest
 */
export interface AccountsApiAccountsApiTenantsUpdateRequest {
    /**
     * A unique integer value identifying this tenant.
     * @type {number}
     * @memberof AccountsApiAccountsApiTenantsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Tenant}
     * @memberof AccountsApiAccountsApiTenantsUpdate
     */
    readonly data: Tenant
}

/**
 * Request parameters for accountsApiTokenCreate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiTokenCreateRequest
 */
export interface AccountsApiAccountsApiTokenCreateRequest {
    /**
     * 
     * @type {TokenObtainPair}
     * @memberof AccountsApiAccountsApiTokenCreate
     */
    readonly data: TokenObtainPair
}

/**
 * Request parameters for accountsApiUpdateRolePermissionUpdate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiUpdateRolePermissionUpdateRequest
 */
export interface AccountsApiAccountsApiUpdateRolePermissionUpdateRequest {
    /**
     * 
     * @type {RolePermission}
     * @memberof AccountsApiAccountsApiUpdateRolePermissionUpdate
     */
    readonly data: RolePermission
}

/**
 * Request parameters for accountsApiUsersList operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiUsersListRequest
 */
export interface AccountsApiAccountsApiUsersListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof AccountsApiAccountsApiUsersList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof AccountsApiAccountsApiUsersList
     */
    readonly pageSize?: number

    /**
     * Filter by First Name
     * @type {string}
     * @memberof AccountsApiAccountsApiUsersList
     */
    readonly firstName?: string

    /**
     * Filter by last_name
     * @type {string}
     * @memberof AccountsApiAccountsApiUsersList
     */
    readonly lastName?: string

    /**
     * Filter by email
     * @type {any}
     * @memberof AccountsApiAccountsApiUsersList
     */
    readonly email?: any

    /**
     * Filter by role id
     * @type {number}
     * @memberof AccountsApiAccountsApiUsersList
     */
    readonly role?: number

    /**
     * Filter by tenant_id
     * @type {number}
     * @memberof AccountsApiAccountsApiUsersList
     */
    readonly tenant?: number
}

/**
 * Request parameters for accountsApiUsersPartialUpdate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiUsersPartialUpdateRequest
 */
export interface AccountsApiAccountsApiUsersPartialUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountsApiAccountsApiUsersPartialUpdate
     */
    readonly id: string

    /**
     * 
     * @type {UserUpdate}
     * @memberof AccountsApiAccountsApiUsersPartialUpdate
     */
    readonly data: UserUpdate
}

/**
 * Request parameters for accountsApiUsersRead operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiUsersReadRequest
 */
export interface AccountsApiAccountsApiUsersReadRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountsApiAccountsApiUsersRead
     */
    readonly id: string
}

/**
 * Request parameters for accountsApiUsersUpdate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiUsersUpdateRequest
 */
export interface AccountsApiAccountsApiUsersUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountsApiAccountsApiUsersUpdate
     */
    readonly id: string

    /**
     * 
     * @type {UserUpdate}
     * @memberof AccountsApiAccountsApiUsersUpdate
     */
    readonly data: UserUpdate
}

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     * Lists Activity Log
     * @summary Lists Activity Log
     * @param {AccountsApiAccountsApiActivityLogsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiActivityLogsList(requestParameters: AccountsApiAccountsApiActivityLogsListRequest = {}, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiActivityLogsList(requestParameters.page, requestParameters.pageSize, requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountsApiAccountsApiActivityLogsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiActivityLogsRead(requestParameters: AccountsApiAccountsApiActivityLogsReadRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiActivityLogsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     * @param {AccountsApiAccountsApiApiTokenRefreshCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiApiTokenRefreshCreate(requestParameters: AccountsApiAccountsApiApiTokenRefreshCreateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiApiTokenRefreshCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create New User
     * @summary Create New User
     * @param {AccountsApiAccountsApiCreateUsersCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiCreateUsersCreate(requestParameters: AccountsApiAccountsApiCreateUsersCreateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiCreateUsersCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountsApiAccountsApiForgotPasswordChangeCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiForgotPasswordChangeCreate(requestParameters: AccountsApiAccountsApiForgotPasswordChangeCreateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiForgotPasswordChangeCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object\'s key.
     * @param {AccountsApiAccountsApiLoginCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiLoginCreate(requestParameters: AccountsApiAccountsApiLoginCreateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiLoginCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accepts/Returns nothing.
     * @summary Calls Django logout method and delete the Token object assigned to the current User object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiLogoutCreate(options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiLogoutCreate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accepts/Returns nothing.
     * @summary Calls Django logout method and delete the Token object assigned to the current User object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiLogoutList(options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiLogoutList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
     * @summary Calls Django Auth SetPasswordForm save method.
     * @param {AccountsApiAccountsApiPasswordChangeCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiPasswordChangeCreate(requestParameters: AccountsApiAccountsApiPasswordChangeCreateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiPasswordChangeCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends auto-generated Password Reset to User
     * @summary Email User Password Reset
     * @param {AccountsApiAccountsApiPasswordResetCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiPasswordResetCreate(requestParameters: AccountsApiAccountsApiPasswordResetCreateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiPasswordResetCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create Permission
     * @summary Creates new Permission
     * @param {AccountsApiAccountsApiPermissionsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiPermissionsCreate(requestParameters: AccountsApiAccountsApiPermissionsCreateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiPermissionsCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Permissions
     * @summary List created Permissions
     * @param {AccountsApiAccountsApiPermissionsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiPermissionsList(requestParameters: AccountsApiAccountsApiPermissionsListRequest = {}, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiPermissionsList(requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * partially update Permission
     * @summary partially updates a Permission property
     * @param {AccountsApiAccountsApiPermissionsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiPermissionsPartialUpdate(requestParameters: AccountsApiAccountsApiPermissionsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiPermissionsPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * retrieves a Permission
     * @summary Retrieves an instance of a Permission
     * @param {AccountsApiAccountsApiPermissionsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiPermissionsRead(requestParameters: AccountsApiAccountsApiPermissionsReadRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiPermissionsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update Permission
     * @summary updates a Permission
     * @param {AccountsApiAccountsApiPermissionsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiPermissionsUpdate(requestParameters: AccountsApiAccountsApiPermissionsUpdateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiPermissionsUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountsApiAccountsApiRolePermissionCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiRolePermissionCreate(requestParameters: AccountsApiAccountsApiRolePermissionCreateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiRolePermissionCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountsApiAccountsApiRolePermissionListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiRolePermissionList(requestParameters: AccountsApiAccountsApiRolePermissionListRequest = {}, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiRolePermissionList(requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * retrieves a RolePermission (Please pass role id for the id field)
     * @summary Retrieves an instance of a Role and its Permissions
     * @param {AccountsApiAccountsApiRolePermissionReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiRolePermissionRead(requestParameters: AccountsApiAccountsApiRolePermissionReadRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiRolePermissionRead(requestParameters.roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create Role
     * @summary Creates new Role
     * @param {AccountsApiAccountsApiRolesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiRolesCreate(requestParameters: AccountsApiAccountsApiRolesCreateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiRolesCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Roles
     * @summary List created Roles
     * @param {AccountsApiAccountsApiRolesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiRolesList(requestParameters: AccountsApiAccountsApiRolesListRequest = {}, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiRolesList(requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * partially update Role
     * @summary partially updates a Role property
     * @param {AccountsApiAccountsApiRolesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiRolesPartialUpdate(requestParameters: AccountsApiAccountsApiRolesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiRolesPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * retrieves a Role
     * @summary Retrieves an instance of a Role
     * @param {AccountsApiAccountsApiRolesReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiRolesRead(requestParameters: AccountsApiAccountsApiRolesReadRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiRolesRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update Role
     * @summary updates a Role property
     * @param {AccountsApiAccountsApiRolesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiRolesUpdate(requestParameters: AccountsApiAccountsApiRolesUpdateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiRolesUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountsApiAccountsApiTenantSelfOnboardRegisterCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiTenantSelfOnboardRegisterCreate(requestParameters: AccountsApiAccountsApiTenantSelfOnboardRegisterCreateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiTenantSelfOnboardRegisterCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Tenants
     * @summary List created Tenants
     * @param {AccountsApiAccountsApiTenantsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiTenantsList(requestParameters: AccountsApiAccountsApiTenantsListRequest = {}, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiTenantsList(requestParameters.fullName, requestParameters.businessEmail, requestParameters.country, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * partially update Tenant
     * @summary partially updates a Tenant property
     * @param {AccountsApiAccountsApiTenantsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiTenantsPartialUpdate(requestParameters: AccountsApiAccountsApiTenantsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiTenantsPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * retrieves a Tenant
     * @summary Retrieves an instance of a Tenant
     * @param {AccountsApiAccountsApiTenantsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiTenantsRead(requestParameters: AccountsApiAccountsApiTenantsReadRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiTenantsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update Tenant
     * @summary updates a Tenant property
     * @param {AccountsApiAccountsApiTenantsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiTenantsUpdate(requestParameters: AccountsApiAccountsApiTenantsUpdateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiTenantsUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     * @param {AccountsApiAccountsApiTokenCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiTokenCreate(requestParameters: AccountsApiAccountsApiTokenCreateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiTokenCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates Role Permissions (Admin)
     * @summary Updates Role Permissions. You can pass an Array as payload
     * @param {AccountsApiAccountsApiUpdateRolePermissionUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiUpdateRolePermissionUpdate(requestParameters: AccountsApiAccountsApiUpdateRolePermissionUpdateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiUpdateRolePermissionUpdate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Users
     * @summary List created Users in Request User Tenant
     * @param {AccountsApiAccountsApiUsersListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiUsersList(requestParameters: AccountsApiAccountsApiUsersListRequest = {}, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiUsersList(requestParameters.page, requestParameters.pageSize, requestParameters.firstName, requestParameters.lastName, requestParameters.email, requestParameters.role, requestParameters.tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * partially updates a User property
     * @summary partially updates a User property
     * @param {AccountsApiAccountsApiUsersPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiUsersPartialUpdate(requestParameters: AccountsApiAccountsApiUsersPartialUpdateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiUsersPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * retrieves a User
     * @summary Retrieves an instance of a User
     * @param {AccountsApiAccountsApiUsersReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiUsersRead(requestParameters: AccountsApiAccountsApiUsersReadRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiUsersRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * UpdateS A User property
     * @summary updates a Tenant User property
     * @param {AccountsApiAccountsApiUsersUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiUsersUpdate(requestParameters: AccountsApiAccountsApiUsersUpdateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiUsersUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CloudProviderApi - axios parameter creator
 * @export
 */
export const CloudProviderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List Cloud Provider
         * @summary List Cloud Provider
         * @param {number} [tenant] Filter by Tenant
         * @param {string} [cloudProviderName] Filter result by Cloud Provider Name e.g AWS, AZURE and GCP
         * @param {string} [accountName] Filter by Account Name
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderList: async (tenant?: number, cloudProviderName?: string, accountName?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cloud_provider/api/v1/cloud_provider/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (tenant !== undefined) {
                localVarQueryParameter['tenant'] = tenant;
            }

            if (cloudProviderName !== undefined) {
                localVarQueryParameter['cloud_provider_name'] = cloudProviderName;
            }

            if (accountName !== undefined) {
                localVarQueryParameter['account_name'] = accountName;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this provider service.
         * @param {ProviderService} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderPartialUpdate: async (id: number, data: ProviderService, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudProviderCloudProviderPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('cloudProviderCloudProviderPartialUpdate', 'data', data)
            const localVarPath = `/cloud_provider/api/v1/cloud_provider/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this provider service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudProviderCloudProviderRead', 'id', id)
            const localVarPath = `/cloud_provider/api/v1/cloud_provider/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CloudProviderResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderResourceTypesCreate: async (data: CloudProviderResourceTypes, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('cloudProviderCloudProviderResourceTypesCreate', 'data', data)
            const localVarPath = `/cloud_provider/api/v1/cloud_provider_resource_types/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderResourceTypesList: async (page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cloud_provider/api/v1/cloud_provider_resource_types/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all resources under a cloud provider
         * @summary retrieves all resource types under a cloud provider. Please pass cloud provider id
         * @param {number} id A unique integer value identifying this cloud provider resource types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderResourceTypesRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudProviderCloudProviderResourceTypesRead', 'id', id)
            const localVarPath = `/cloud_provider/api/v1/cloud_provider_resource_types/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this provider service.
         * @param {ProviderService} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderUpdate: async (id: number, data: ProviderService, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudProviderCloudProviderUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('cloudProviderCloudProviderUpdate', 'data', data)
            const localVarPath = `/cloud_provider/api/v1/cloud_provider/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [search] A search term.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCountriesList: async (search?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cloud_provider/api/v1/countries/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProviderServiceInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderProviderServiceOnboardingCreate: async (data: ProviderServiceInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('cloudProviderProviderServiceOnboardingCreate', 'data', data)
            const localVarPath = `/cloud_provider/api/v1/provider_service_onboarding/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CloudResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderResourceTypesCreate: async (data: CloudResourceTypes, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('cloudProviderResourceTypesCreate', 'data', data)
            const localVarPath = `/cloud_provider/api/v1/resource_types/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Service Resource Types
         * @summary List Service Resource Types
         * @param {string} [cloudProvider] Filter by Cloud Provider
         * @param {string} [search] A search term.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderResourceTypesList: async (cloudProvider?: string, search?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cloud_provider/api/v1/resource_types/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (cloudProvider !== undefined) {
                localVarQueryParameter['cloud_provider'] = cloudProvider;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud resource types.
         * @param {CloudResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderResourceTypesPartialUpdate: async (id: number, data: CloudResourceTypes, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudProviderResourceTypesPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('cloudProviderResourceTypesPartialUpdate', 'data', data)
            const localVarPath = `/cloud_provider/api/v1/resource_types/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud resource types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderResourceTypesRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudProviderResourceTypesRead', 'id', id)
            const localVarPath = `/cloud_provider/api/v1/resource_types/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud resource types.
         * @param {CloudResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderResourceTypesUpdate: async (id: number, data: CloudResourceTypes, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudProviderResourceTypesUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('cloudProviderResourceTypesUpdate', 'data', data)
            const localVarPath = `/cloud_provider/api/v1/resource_types/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CloudServiceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderServiceResourceTypesCreate: async (data: CloudServiceTypes, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('cloudProviderServiceResourceTypesCreate', 'data', data)
            const localVarPath = `/cloud_provider/api/v1/service_resource_types/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Resource Types
         * @summary List Resource Types
         * @param {string} [cloudProvider] Filter by Cloud Provider
         * @param {string} [search] A search term.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderServiceResourceTypesList: async (cloudProvider?: string, search?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cloud_provider/api/v1/service_resource_types/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (cloudProvider !== undefined) {
                localVarQueryParameter['cloud_provider'] = cloudProvider;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud service resource types.
         * @param {CloudServiceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderServiceResourceTypesPartialUpdate: async (id: number, data: CloudServiceTypes, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudProviderServiceResourceTypesPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('cloudProviderServiceResourceTypesPartialUpdate', 'data', data)
            const localVarPath = `/cloud_provider/api/v1/service_resource_types/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud service resource types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderServiceResourceTypesRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudProviderServiceResourceTypesRead', 'id', id)
            const localVarPath = `/cloud_provider/api/v1/service_resource_types/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud service resource types.
         * @param {CloudServiceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderServiceResourceTypesUpdate: async (id: number, data: CloudServiceTypes, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudProviderServiceResourceTypesUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('cloudProviderServiceResourceTypesUpdate', 'data', data)
            const localVarPath = `/cloud_provider/api/v1/service_resource_types/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates Cloud Resources (Admin)
         * @summary Updates Cloud Resources. You can pass an Array as payload
         * @param {CloudProviderResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderUpdateCloudResourceUpdate: async (data: CloudProviderResourceTypes, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('cloudProviderUpdateCloudResourceUpdate', 'data', data)
            const localVarPath = `/cloud_provider/api/v1/update_cloud_resource/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CloudProviderApi - functional programming interface
 * @export
 */
export const CloudProviderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CloudProviderApiAxiosParamCreator(configuration)
    return {
        /**
         * List Cloud Provider
         * @summary List Cloud Provider
         * @param {number} [tenant] Filter by Tenant
         * @param {string} [cloudProviderName] Filter result by Cloud Provider Name e.g AWS, AZURE and GCP
         * @param {string} [accountName] Filter by Account Name
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderCloudProviderList(tenant?: number, cloudProviderName?: string, accountName?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderCloudProviderList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderCloudProviderList(tenant, cloudProviderName, accountName, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this provider service.
         * @param {ProviderService} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderCloudProviderPartialUpdate(id: number, data: ProviderService, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProviderService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderCloudProviderPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this provider service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderCloudProviderRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProviderService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderCloudProviderRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CloudProviderResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderCloudProviderResourceTypesCreate(data: CloudProviderResourceTypes, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderResourceTypes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderCloudProviderResourceTypesCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderCloudProviderResourceTypesList(page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderCloudProviderResourceTypesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderCloudProviderResourceTypesList(page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all resources under a cloud provider
         * @summary retrieves all resource types under a cloud provider. Please pass cloud provider id
         * @param {number} id A unique integer value identifying this cloud provider resource types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderCloudProviderResourceTypesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderResourceTypes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderCloudProviderResourceTypesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this provider service.
         * @param {ProviderService} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderCloudProviderUpdate(id: number, data: ProviderService, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProviderService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderCloudProviderUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [search] A search term.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderCountriesList(search?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderCountriesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderCountriesList(search, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProviderServiceInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderProviderServiceOnboardingCreate(data: ProviderServiceInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProviderServiceInput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderProviderServiceOnboardingCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CloudResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderResourceTypesCreate(data: CloudResourceTypes, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudResourceTypes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderResourceTypesCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Service Resource Types
         * @summary List Service Resource Types
         * @param {string} [cloudProvider] Filter by Cloud Provider
         * @param {string} [search] A search term.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderResourceTypesList(cloudProvider?: string, search?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderResourceTypesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderResourceTypesList(cloudProvider, search, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud resource types.
         * @param {CloudResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderResourceTypesPartialUpdate(id: number, data: CloudResourceTypes, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudResourceTypes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderResourceTypesPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud resource types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderResourceTypesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudResourceTypes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderResourceTypesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud resource types.
         * @param {CloudResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderResourceTypesUpdate(id: number, data: CloudResourceTypes, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudResourceTypes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderResourceTypesUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CloudServiceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderServiceResourceTypesCreate(data: CloudServiceTypes, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudServiceTypes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderServiceResourceTypesCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Resource Types
         * @summary List Resource Types
         * @param {string} [cloudProvider] Filter by Cloud Provider
         * @param {string} [search] A search term.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderServiceResourceTypesList(cloudProvider?: string, search?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderServiceResourceTypesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderServiceResourceTypesList(cloudProvider, search, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud service resource types.
         * @param {CloudServiceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderServiceResourceTypesPartialUpdate(id: number, data: CloudServiceTypes, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudServiceTypes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderServiceResourceTypesPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud service resource types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderServiceResourceTypesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudServiceTypes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderServiceResourceTypesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud service resource types.
         * @param {CloudServiceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderServiceResourceTypesUpdate(id: number, data: CloudServiceTypes, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudServiceTypes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderServiceResourceTypesUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates Cloud Resources (Admin)
         * @summary Updates Cloud Resources. You can pass an Array as payload
         * @param {CloudProviderResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderUpdateCloudResourceUpdate(data: CloudProviderResourceTypes, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderResourceTypes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderUpdateCloudResourceUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CloudProviderApi - factory interface
 * @export
 */
export const CloudProviderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CloudProviderApiFp(configuration)
    return {
        /**
         * List Cloud Provider
         * @summary List Cloud Provider
         * @param {number} [tenant] Filter by Tenant
         * @param {string} [cloudProviderName] Filter result by Cloud Provider Name e.g AWS, AZURE and GCP
         * @param {string} [accountName] Filter by Account Name
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderList(tenant?: number, cloudProviderName?: string, accountName?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<CloudProviderCloudProviderList200Response> {
            return localVarFp.cloudProviderCloudProviderList(tenant, cloudProviderName, accountName, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this provider service.
         * @param {ProviderService} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderPartialUpdate(id: number, data: ProviderService, options?: any): AxiosPromise<ProviderService> {
            return localVarFp.cloudProviderCloudProviderPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this provider service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderRead(id: number, options?: any): AxiosPromise<ProviderService> {
            return localVarFp.cloudProviderCloudProviderRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CloudProviderResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderResourceTypesCreate(data: CloudProviderResourceTypes, options?: any): AxiosPromise<CloudProviderResourceTypes> {
            return localVarFp.cloudProviderCloudProviderResourceTypesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderResourceTypesList(page?: number, pageSize?: number, options?: any): AxiosPromise<CloudProviderCloudProviderResourceTypesList200Response> {
            return localVarFp.cloudProviderCloudProviderResourceTypesList(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all resources under a cloud provider
         * @summary retrieves all resource types under a cloud provider. Please pass cloud provider id
         * @param {number} id A unique integer value identifying this cloud provider resource types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderResourceTypesRead(id: number, options?: any): AxiosPromise<CloudProviderResourceTypes> {
            return localVarFp.cloudProviderCloudProviderResourceTypesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this provider service.
         * @param {ProviderService} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderUpdate(id: number, data: ProviderService, options?: any): AxiosPromise<ProviderService> {
            return localVarFp.cloudProviderCloudProviderUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [search] A search term.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCountriesList(search?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<CloudProviderCountriesList200Response> {
            return localVarFp.cloudProviderCountriesList(search, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProviderServiceInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderProviderServiceOnboardingCreate(data: ProviderServiceInput, options?: any): AxiosPromise<ProviderServiceInput> {
            return localVarFp.cloudProviderProviderServiceOnboardingCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CloudResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderResourceTypesCreate(data: CloudResourceTypes, options?: any): AxiosPromise<CloudResourceTypes> {
            return localVarFp.cloudProviderResourceTypesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * List Service Resource Types
         * @summary List Service Resource Types
         * @param {string} [cloudProvider] Filter by Cloud Provider
         * @param {string} [search] A search term.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderResourceTypesList(cloudProvider?: string, search?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<CloudProviderResourceTypesList200Response> {
            return localVarFp.cloudProviderResourceTypesList(cloudProvider, search, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud resource types.
         * @param {CloudResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderResourceTypesPartialUpdate(id: number, data: CloudResourceTypes, options?: any): AxiosPromise<CloudResourceTypes> {
            return localVarFp.cloudProviderResourceTypesPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud resource types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderResourceTypesRead(id: number, options?: any): AxiosPromise<CloudResourceTypes> {
            return localVarFp.cloudProviderResourceTypesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud resource types.
         * @param {CloudResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderResourceTypesUpdate(id: number, data: CloudResourceTypes, options?: any): AxiosPromise<CloudResourceTypes> {
            return localVarFp.cloudProviderResourceTypesUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CloudServiceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderServiceResourceTypesCreate(data: CloudServiceTypes, options?: any): AxiosPromise<CloudServiceTypes> {
            return localVarFp.cloudProviderServiceResourceTypesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * List Resource Types
         * @summary List Resource Types
         * @param {string} [cloudProvider] Filter by Cloud Provider
         * @param {string} [search] A search term.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderServiceResourceTypesList(cloudProvider?: string, search?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<CloudProviderServiceResourceTypesList200Response> {
            return localVarFp.cloudProviderServiceResourceTypesList(cloudProvider, search, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud service resource types.
         * @param {CloudServiceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderServiceResourceTypesPartialUpdate(id: number, data: CloudServiceTypes, options?: any): AxiosPromise<CloudServiceTypes> {
            return localVarFp.cloudProviderServiceResourceTypesPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud service resource types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderServiceResourceTypesRead(id: number, options?: any): AxiosPromise<CloudServiceTypes> {
            return localVarFp.cloudProviderServiceResourceTypesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud service resource types.
         * @param {CloudServiceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderServiceResourceTypesUpdate(id: number, data: CloudServiceTypes, options?: any): AxiosPromise<CloudServiceTypes> {
            return localVarFp.cloudProviderServiceResourceTypesUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates Cloud Resources (Admin)
         * @summary Updates Cloud Resources. You can pass an Array as payload
         * @param {CloudProviderResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderUpdateCloudResourceUpdate(data: CloudProviderResourceTypes, options?: any): AxiosPromise<CloudProviderResourceTypes> {
            return localVarFp.cloudProviderUpdateCloudResourceUpdate(data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cloudProviderCloudProviderList operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderCloudProviderListRequest
 */
export interface CloudProviderApiCloudProviderCloudProviderListRequest {
    /**
     * Filter by Tenant
     * @type {number}
     * @memberof CloudProviderApiCloudProviderCloudProviderList
     */
    readonly tenant?: number

    /**
     * Filter result by Cloud Provider Name e.g AWS, AZURE and GCP
     * @type {string}
     * @memberof CloudProviderApiCloudProviderCloudProviderList
     */
    readonly cloudProviderName?: string

    /**
     * Filter by Account Name
     * @type {string}
     * @memberof CloudProviderApiCloudProviderCloudProviderList
     */
    readonly accountName?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderCloudProviderList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderCloudProviderList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for cloudProviderCloudProviderPartialUpdate operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderCloudProviderPartialUpdateRequest
 */
export interface CloudProviderApiCloudProviderCloudProviderPartialUpdateRequest {
    /**
     * A unique integer value identifying this provider service.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderCloudProviderPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {ProviderService}
     * @memberof CloudProviderApiCloudProviderCloudProviderPartialUpdate
     */
    readonly data: ProviderService
}

/**
 * Request parameters for cloudProviderCloudProviderRead operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderCloudProviderReadRequest
 */
export interface CloudProviderApiCloudProviderCloudProviderReadRequest {
    /**
     * A unique integer value identifying this provider service.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderCloudProviderRead
     */
    readonly id: number
}

/**
 * Request parameters for cloudProviderCloudProviderResourceTypesCreate operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderCloudProviderResourceTypesCreateRequest
 */
export interface CloudProviderApiCloudProviderCloudProviderResourceTypesCreateRequest {
    /**
     * 
     * @type {CloudProviderResourceTypes}
     * @memberof CloudProviderApiCloudProviderCloudProviderResourceTypesCreate
     */
    readonly data: CloudProviderResourceTypes
}

/**
 * Request parameters for cloudProviderCloudProviderResourceTypesList operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderCloudProviderResourceTypesListRequest
 */
export interface CloudProviderApiCloudProviderCloudProviderResourceTypesListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderCloudProviderResourceTypesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderCloudProviderResourceTypesList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for cloudProviderCloudProviderResourceTypesRead operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderCloudProviderResourceTypesReadRequest
 */
export interface CloudProviderApiCloudProviderCloudProviderResourceTypesReadRequest {
    /**
     * A unique integer value identifying this cloud provider resource types.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderCloudProviderResourceTypesRead
     */
    readonly id: number
}

/**
 * Request parameters for cloudProviderCloudProviderUpdate operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderCloudProviderUpdateRequest
 */
export interface CloudProviderApiCloudProviderCloudProviderUpdateRequest {
    /**
     * A unique integer value identifying this provider service.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderCloudProviderUpdate
     */
    readonly id: number

    /**
     * 
     * @type {ProviderService}
     * @memberof CloudProviderApiCloudProviderCloudProviderUpdate
     */
    readonly data: ProviderService
}

/**
 * Request parameters for cloudProviderCountriesList operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderCountriesListRequest
 */
export interface CloudProviderApiCloudProviderCountriesListRequest {
    /**
     * A search term.
     * @type {string}
     * @memberof CloudProviderApiCloudProviderCountriesList
     */
    readonly search?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderCountriesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderCountriesList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for cloudProviderProviderServiceOnboardingCreate operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderProviderServiceOnboardingCreateRequest
 */
export interface CloudProviderApiCloudProviderProviderServiceOnboardingCreateRequest {
    /**
     * 
     * @type {ProviderServiceInput}
     * @memberof CloudProviderApiCloudProviderProviderServiceOnboardingCreate
     */
    readonly data: ProviderServiceInput
}

/**
 * Request parameters for cloudProviderResourceTypesCreate operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderResourceTypesCreateRequest
 */
export interface CloudProviderApiCloudProviderResourceTypesCreateRequest {
    /**
     * 
     * @type {CloudResourceTypes}
     * @memberof CloudProviderApiCloudProviderResourceTypesCreate
     */
    readonly data: CloudResourceTypes
}

/**
 * Request parameters for cloudProviderResourceTypesList operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderResourceTypesListRequest
 */
export interface CloudProviderApiCloudProviderResourceTypesListRequest {
    /**
     * Filter by Cloud Provider
     * @type {string}
     * @memberof CloudProviderApiCloudProviderResourceTypesList
     */
    readonly cloudProvider?: string

    /**
     * A search term.
     * @type {string}
     * @memberof CloudProviderApiCloudProviderResourceTypesList
     */
    readonly search?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderResourceTypesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderResourceTypesList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for cloudProviderResourceTypesPartialUpdate operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderResourceTypesPartialUpdateRequest
 */
export interface CloudProviderApiCloudProviderResourceTypesPartialUpdateRequest {
    /**
     * A unique integer value identifying this cloud resource types.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderResourceTypesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {CloudResourceTypes}
     * @memberof CloudProviderApiCloudProviderResourceTypesPartialUpdate
     */
    readonly data: CloudResourceTypes
}

/**
 * Request parameters for cloudProviderResourceTypesRead operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderResourceTypesReadRequest
 */
export interface CloudProviderApiCloudProviderResourceTypesReadRequest {
    /**
     * A unique integer value identifying this cloud resource types.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderResourceTypesRead
     */
    readonly id: number
}

/**
 * Request parameters for cloudProviderResourceTypesUpdate operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderResourceTypesUpdateRequest
 */
export interface CloudProviderApiCloudProviderResourceTypesUpdateRequest {
    /**
     * A unique integer value identifying this cloud resource types.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderResourceTypesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {CloudResourceTypes}
     * @memberof CloudProviderApiCloudProviderResourceTypesUpdate
     */
    readonly data: CloudResourceTypes
}

/**
 * Request parameters for cloudProviderServiceResourceTypesCreate operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderServiceResourceTypesCreateRequest
 */
export interface CloudProviderApiCloudProviderServiceResourceTypesCreateRequest {
    /**
     * 
     * @type {CloudServiceTypes}
     * @memberof CloudProviderApiCloudProviderServiceResourceTypesCreate
     */
    readonly data: CloudServiceTypes
}

/**
 * Request parameters for cloudProviderServiceResourceTypesList operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderServiceResourceTypesListRequest
 */
export interface CloudProviderApiCloudProviderServiceResourceTypesListRequest {
    /**
     * Filter by Cloud Provider
     * @type {string}
     * @memberof CloudProviderApiCloudProviderServiceResourceTypesList
     */
    readonly cloudProvider?: string

    /**
     * A search term.
     * @type {string}
     * @memberof CloudProviderApiCloudProviderServiceResourceTypesList
     */
    readonly search?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderServiceResourceTypesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderServiceResourceTypesList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for cloudProviderServiceResourceTypesPartialUpdate operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderServiceResourceTypesPartialUpdateRequest
 */
export interface CloudProviderApiCloudProviderServiceResourceTypesPartialUpdateRequest {
    /**
     * A unique integer value identifying this cloud service resource types.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderServiceResourceTypesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {CloudServiceTypes}
     * @memberof CloudProviderApiCloudProviderServiceResourceTypesPartialUpdate
     */
    readonly data: CloudServiceTypes
}

/**
 * Request parameters for cloudProviderServiceResourceTypesRead operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderServiceResourceTypesReadRequest
 */
export interface CloudProviderApiCloudProviderServiceResourceTypesReadRequest {
    /**
     * A unique integer value identifying this cloud service resource types.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderServiceResourceTypesRead
     */
    readonly id: number
}

/**
 * Request parameters for cloudProviderServiceResourceTypesUpdate operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderServiceResourceTypesUpdateRequest
 */
export interface CloudProviderApiCloudProviderServiceResourceTypesUpdateRequest {
    /**
     * A unique integer value identifying this cloud service resource types.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderServiceResourceTypesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {CloudServiceTypes}
     * @memberof CloudProviderApiCloudProviderServiceResourceTypesUpdate
     */
    readonly data: CloudServiceTypes
}

/**
 * Request parameters for cloudProviderUpdateCloudResourceUpdate operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderUpdateCloudResourceUpdateRequest
 */
export interface CloudProviderApiCloudProviderUpdateCloudResourceUpdateRequest {
    /**
     * 
     * @type {CloudProviderResourceTypes}
     * @memberof CloudProviderApiCloudProviderUpdateCloudResourceUpdate
     */
    readonly data: CloudProviderResourceTypes
}

/**
 * CloudProviderApi - object-oriented interface
 * @export
 * @class CloudProviderApi
 * @extends {BaseAPI}
 */
export class CloudProviderApi extends BaseAPI {
    /**
     * List Cloud Provider
     * @summary List Cloud Provider
     * @param {CloudProviderApiCloudProviderCloudProviderListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderCloudProviderList(requestParameters: CloudProviderApiCloudProviderCloudProviderListRequest = {}, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderCloudProviderList(requestParameters.tenant, requestParameters.cloudProviderName, requestParameters.accountName, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderCloudProviderPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderCloudProviderPartialUpdate(requestParameters: CloudProviderApiCloudProviderCloudProviderPartialUpdateRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderCloudProviderPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderCloudProviderReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderCloudProviderRead(requestParameters: CloudProviderApiCloudProviderCloudProviderReadRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderCloudProviderRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderCloudProviderResourceTypesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderCloudProviderResourceTypesCreate(requestParameters: CloudProviderApiCloudProviderCloudProviderResourceTypesCreateRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderCloudProviderResourceTypesCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderCloudProviderResourceTypesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderCloudProviderResourceTypesList(requestParameters: CloudProviderApiCloudProviderCloudProviderResourceTypesListRequest = {}, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderCloudProviderResourceTypesList(requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all resources under a cloud provider
     * @summary retrieves all resource types under a cloud provider. Please pass cloud provider id
     * @param {CloudProviderApiCloudProviderCloudProviderResourceTypesReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderCloudProviderResourceTypesRead(requestParameters: CloudProviderApiCloudProviderCloudProviderResourceTypesReadRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderCloudProviderResourceTypesRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderCloudProviderUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderCloudProviderUpdate(requestParameters: CloudProviderApiCloudProviderCloudProviderUpdateRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderCloudProviderUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderCountriesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderCountriesList(requestParameters: CloudProviderApiCloudProviderCountriesListRequest = {}, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderCountriesList(requestParameters.search, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderProviderServiceOnboardingCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderProviderServiceOnboardingCreate(requestParameters: CloudProviderApiCloudProviderProviderServiceOnboardingCreateRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderProviderServiceOnboardingCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderResourceTypesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderResourceTypesCreate(requestParameters: CloudProviderApiCloudProviderResourceTypesCreateRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderResourceTypesCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Service Resource Types
     * @summary List Service Resource Types
     * @param {CloudProviderApiCloudProviderResourceTypesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderResourceTypesList(requestParameters: CloudProviderApiCloudProviderResourceTypesListRequest = {}, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderResourceTypesList(requestParameters.cloudProvider, requestParameters.search, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderResourceTypesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderResourceTypesPartialUpdate(requestParameters: CloudProviderApiCloudProviderResourceTypesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderResourceTypesPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderResourceTypesReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderResourceTypesRead(requestParameters: CloudProviderApiCloudProviderResourceTypesReadRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderResourceTypesRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderResourceTypesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderResourceTypesUpdate(requestParameters: CloudProviderApiCloudProviderResourceTypesUpdateRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderResourceTypesUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderServiceResourceTypesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderServiceResourceTypesCreate(requestParameters: CloudProviderApiCloudProviderServiceResourceTypesCreateRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderServiceResourceTypesCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Resource Types
     * @summary List Resource Types
     * @param {CloudProviderApiCloudProviderServiceResourceTypesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderServiceResourceTypesList(requestParameters: CloudProviderApiCloudProviderServiceResourceTypesListRequest = {}, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderServiceResourceTypesList(requestParameters.cloudProvider, requestParameters.search, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderServiceResourceTypesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderServiceResourceTypesPartialUpdate(requestParameters: CloudProviderApiCloudProviderServiceResourceTypesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderServiceResourceTypesPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderServiceResourceTypesReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderServiceResourceTypesRead(requestParameters: CloudProviderApiCloudProviderServiceResourceTypesReadRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderServiceResourceTypesRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderServiceResourceTypesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderServiceResourceTypesUpdate(requestParameters: CloudProviderApiCloudProviderServiceResourceTypesUpdateRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderServiceResourceTypesUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates Cloud Resources (Admin)
     * @summary Updates Cloud Resources. You can pass an Array as payload
     * @param {CloudProviderApiCloudProviderUpdateCloudResourceUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderUpdateCloudResourceUpdate(requestParameters: CloudProviderApiCloudProviderUpdateCloudResourceUpdateRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderUpdateCloudResourceUpdate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomCspmApiApi - axios parameter creator
 * @export
 */
export const CustomCspmApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customCspmApiApiUtilsAdminDashboardList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/custom_cspm_api/api/v1/utils/admin_dashboard/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customCspmApiApiUtilsHealthcheckList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/custom_cspm_api/api/v1/utils/healthcheck/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {HtmlData} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customCspmApiApiUtilsHtmlToPdfCreate: async (data: HtmlData, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('customCspmApiApiUtilsHtmlToPdfCreate', 'data', data)
            const localVarPath = `/custom_cspm_api/api/v1/utils/html-to-pdf/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {JsonData} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customCspmApiApiUtilsJsonToExcelCreate: async (data: JsonData, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('customCspmApiApiUtilsJsonToExcelCreate', 'data', data)
            const localVarPath = `/custom_cspm_api/api/v1/utils/json-to-excel/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ByteArray} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customCspmApiApiUtilsSaveBytearrayToUrlCreate: async (data: ByteArray, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('customCspmApiApiUtilsSaveBytearrayToUrlCreate', 'data', data)
            const localVarPath = `/custom_cspm_api/api/v1/utils/save-bytearray-to-url/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SQLQuery} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customCspmApiApiUtilsSqlToJsonCreate: async (data: SQLQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('customCspmApiApiUtilsSqlToJsonCreate', 'data', data)
            const localVarPath = `/custom_cspm_api/api/v1/utils/sql-to-json/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomCspmApiApi - functional programming interface
 * @export
 */
export const CustomCspmApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomCspmApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customCspmApiApiUtilsAdminDashboardList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customCspmApiApiUtilsAdminDashboardList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customCspmApiApiUtilsHealthcheckList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customCspmApiApiUtilsHealthcheckList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {HtmlData} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customCspmApiApiUtilsHtmlToPdfCreate(data: HtmlData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HtmlData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customCspmApiApiUtilsHtmlToPdfCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {JsonData} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customCspmApiApiUtilsJsonToExcelCreate(data: JsonData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customCspmApiApiUtilsJsonToExcelCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ByteArray} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customCspmApiApiUtilsSaveBytearrayToUrlCreate(data: ByteArray, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customCspmApiApiUtilsSaveBytearrayToUrlCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SQLQuery} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customCspmApiApiUtilsSqlToJsonCreate(data: SQLQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SQLQuery>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customCspmApiApiUtilsSqlToJsonCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomCspmApiApi - factory interface
 * @export
 */
export const CustomCspmApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomCspmApiApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customCspmApiApiUtilsAdminDashboardList(options?: any): AxiosPromise<void> {
            return localVarFp.customCspmApiApiUtilsAdminDashboardList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customCspmApiApiUtilsHealthcheckList(options?: any): AxiosPromise<void> {
            return localVarFp.customCspmApiApiUtilsHealthcheckList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HtmlData} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customCspmApiApiUtilsHtmlToPdfCreate(data: HtmlData, options?: any): AxiosPromise<HtmlData> {
            return localVarFp.customCspmApiApiUtilsHtmlToPdfCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {JsonData} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customCspmApiApiUtilsJsonToExcelCreate(data: JsonData, options?: any): AxiosPromise<JsonData> {
            return localVarFp.customCspmApiApiUtilsJsonToExcelCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ByteArray} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customCspmApiApiUtilsSaveBytearrayToUrlCreate(data: ByteArray, options?: any): AxiosPromise<string> {
            return localVarFp.customCspmApiApiUtilsSaveBytearrayToUrlCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SQLQuery} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customCspmApiApiUtilsSqlToJsonCreate(data: SQLQuery, options?: any): AxiosPromise<SQLQuery> {
            return localVarFp.customCspmApiApiUtilsSqlToJsonCreate(data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for customCspmApiApiUtilsHtmlToPdfCreate operation in CustomCspmApiApi.
 * @export
 * @interface CustomCspmApiApiCustomCspmApiApiUtilsHtmlToPdfCreateRequest
 */
export interface CustomCspmApiApiCustomCspmApiApiUtilsHtmlToPdfCreateRequest {
    /**
     * 
     * @type {HtmlData}
     * @memberof CustomCspmApiApiCustomCspmApiApiUtilsHtmlToPdfCreate
     */
    readonly data: HtmlData
}

/**
 * Request parameters for customCspmApiApiUtilsJsonToExcelCreate operation in CustomCspmApiApi.
 * @export
 * @interface CustomCspmApiApiCustomCspmApiApiUtilsJsonToExcelCreateRequest
 */
export interface CustomCspmApiApiCustomCspmApiApiUtilsJsonToExcelCreateRequest {
    /**
     * 
     * @type {JsonData}
     * @memberof CustomCspmApiApiCustomCspmApiApiUtilsJsonToExcelCreate
     */
    readonly data: JsonData
}

/**
 * Request parameters for customCspmApiApiUtilsSaveBytearrayToUrlCreate operation in CustomCspmApiApi.
 * @export
 * @interface CustomCspmApiApiCustomCspmApiApiUtilsSaveBytearrayToUrlCreateRequest
 */
export interface CustomCspmApiApiCustomCspmApiApiUtilsSaveBytearrayToUrlCreateRequest {
    /**
     * 
     * @type {ByteArray}
     * @memberof CustomCspmApiApiCustomCspmApiApiUtilsSaveBytearrayToUrlCreate
     */
    readonly data: ByteArray
}

/**
 * Request parameters for customCspmApiApiUtilsSqlToJsonCreate operation in CustomCspmApiApi.
 * @export
 * @interface CustomCspmApiApiCustomCspmApiApiUtilsSqlToJsonCreateRequest
 */
export interface CustomCspmApiApiCustomCspmApiApiUtilsSqlToJsonCreateRequest {
    /**
     * 
     * @type {SQLQuery}
     * @memberof CustomCspmApiApiCustomCspmApiApiUtilsSqlToJsonCreate
     */
    readonly data: SQLQuery
}

/**
 * CustomCspmApiApi - object-oriented interface
 * @export
 * @class CustomCspmApiApi
 * @extends {BaseAPI}
 */
export class CustomCspmApiApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomCspmApiApi
     */
    public customCspmApiApiUtilsAdminDashboardList(options?: AxiosRequestConfig) {
        return CustomCspmApiApiFp(this.configuration).customCspmApiApiUtilsAdminDashboardList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomCspmApiApi
     */
    public customCspmApiApiUtilsHealthcheckList(options?: AxiosRequestConfig) {
        return CustomCspmApiApiFp(this.configuration).customCspmApiApiUtilsHealthcheckList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomCspmApiApiCustomCspmApiApiUtilsHtmlToPdfCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomCspmApiApi
     */
    public customCspmApiApiUtilsHtmlToPdfCreate(requestParameters: CustomCspmApiApiCustomCspmApiApiUtilsHtmlToPdfCreateRequest, options?: AxiosRequestConfig) {
        return CustomCspmApiApiFp(this.configuration).customCspmApiApiUtilsHtmlToPdfCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomCspmApiApiCustomCspmApiApiUtilsJsonToExcelCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomCspmApiApi
     */
    public customCspmApiApiUtilsJsonToExcelCreate(requestParameters: CustomCspmApiApiCustomCspmApiApiUtilsJsonToExcelCreateRequest, options?: AxiosRequestConfig) {
        return CustomCspmApiApiFp(this.configuration).customCspmApiApiUtilsJsonToExcelCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomCspmApiApiCustomCspmApiApiUtilsSaveBytearrayToUrlCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomCspmApiApi
     */
    public customCspmApiApiUtilsSaveBytearrayToUrlCreate(requestParameters: CustomCspmApiApiCustomCspmApiApiUtilsSaveBytearrayToUrlCreateRequest, options?: AxiosRequestConfig) {
        return CustomCspmApiApiFp(this.configuration).customCspmApiApiUtilsSaveBytearrayToUrlCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomCspmApiApiCustomCspmApiApiUtilsSqlToJsonCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomCspmApiApi
     */
    public customCspmApiApiUtilsSqlToJsonCreate(requestParameters: CustomCspmApiApiCustomCspmApiApiUtilsSqlToJsonCreateRequest, options?: AxiosRequestConfig) {
        return CustomCspmApiApiFp(this.configuration).customCspmApiApiUtilsSqlToJsonCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PolicyApi - axios parameter creator
 * @export
 */
export const PolicyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {FetchAsset} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyFetchAssetCreate: async (data: FetchAsset, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyFetchAssetCreate', 'data', data)
            const localVarPath = `/policy/api/v1/fetch_asset/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FullScan} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyFullScanCreate: async (data: FullScan, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyFullScanCreate', 'data', data)
            const localVarPath = `/policy/api/v1/full_scan/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this policy.
         * @param {Policy} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyDetailPartialUpdate: async (id: number, data: Policy, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('policyPolicyDetailPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyPolicyDetailPartialUpdate', 'data', data)
            const localVarPath = `/policy/api/v1/policy_detail/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this policy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyDetailRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('policyPolicyDetailRead', 'id', id)
            const localVarPath = `/policy/api/v1/policy_detail/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this policy.
         * @param {Policy} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyDetailUpdate: async (id: number, data: Policy, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('policyPolicyDetailUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyPolicyDetailUpdate', 'data', data)
            const localVarPath = `/policy/api/v1/policy_detail/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Policy} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyListCreateCreate: async (data: Policy, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyPolicyListCreateCreate', 'data', data)
            const localVarPath = `/policy/api/v1/policy_list_create/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Policies
         * @summary List Created Policies
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [name] Filter result by policy name
         * @param {string} [code] Filter by policy code
         * @param {boolean} [status] Filter by policy status
         * @param {string} [policyType] Filter by policy_type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyListCreateList: async (page?: number, pageSize?: number, name?: string, code?: string, status?: boolean, policyType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/policy/api/v1/policy_list_create/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (policyType !== undefined) {
                localVarQueryParameter['policy_type'] = policyType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OneTimeRepoScan} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyOneTimeRepoScanCreate: async (data: OneTimeRepoScan, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyPolicyOneTimeRepoScanCreate', 'data', data)
            const localVarPath = `/policy/api/v1/api/v1/policy_one_time_repo_scan/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RepoScan} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRepoRunScanCreate: async (data: RepoScan, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyPolicyRepoRunScanCreate', 'data', data)
            const localVarPath = `/policy/api/v1/policy_repo_run_scan/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PolicyRule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRuleCreate: async (data: PolicyRule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyPolicyRuleCreate', 'data', data)
            const localVarPath = `/policy/api/v1/policy_rule/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRuleList: async (page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/policy/api/v1/policy_rule/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * retrieves a PolicyRule (Please pass policy id for the id field)
         * @summary Retrieves an instance of a Policy and its Rules
         * @param {string} policyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRuleRead: async (policyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('policyPolicyRuleRead', 'policyId', policyId)
            const localVarPath = `/policy/api/v1/policy_rule/{policy_id}`
                .replace(`{${"policy_id"}}`, encodeURIComponent(String(policyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Aggregate Policy Result Group By Resource
         * @summary Aggregate Policy Result Group By Resource
         * @param {PolicyRunId} data 
         * @param {string} [resource] Filter by Resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRunResultByResourceCreate: async (data: PolicyRunId, resource?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyPolicyRunResultByResourceCreate', 'data', data)
            const localVarPath = `/policy/api/v1/policy_run_result_by_resource/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (resource !== undefined) {
                localVarQueryParameter['resource'] = resource;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Aggregate Policy Result Group By Rules
         * @summary Aggregate Policy Result Group By Rules
         * @param {PolicyRunId} data 
         * @param {string} [findingDesc] Filter by Compliance Rule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRunResultGroupByRuleCreate: async (data: PolicyRunId, findingDesc?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyPolicyRunResultGroupByRuleCreate', 'data', data)
            const localVarPath = `/policy/api/v1/policy_run_result_group_by_rule/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (findingDesc !== undefined) {
                localVarQueryParameter['finding_desc'] = findingDesc;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Policy Run Results
         * @summary List Policy Run Results
         * @param {number} [tenant] Filter by Tenant
         * @param {number} [id] Retrieve Object by Object id
         * @param {number} [policyRunId] Filter by Policy Run ID
         * @param {string} [severity] Filter by Severity (High, Medium, Low)
         * @param {string} [scanType] Filter by Scan Type
         * @param {string} [scanFrequency] Filter result by scan frequency
         * @param {number} [cloudAccount] Filter by Cloud Provider Account ID
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRunResultsList: async (tenant?: number, id?: number, policyRunId?: number, severity?: string, scanType?: string, scanFrequency?: string, cloudAccount?: number, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/policy/api/v1/policy_run_results/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (tenant !== undefined) {
                localVarQueryParameter['tenant'] = tenant;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (policyRunId !== undefined) {
                localVarQueryParameter['policy_run_id'] = policyRunId;
            }

            if (severity !== undefined) {
                localVarQueryParameter['severity'] = severity;
            }

            if (scanType !== undefined) {
                localVarQueryParameter['scan_type'] = scanType;
            }

            if (scanFrequency !== undefined) {
                localVarQueryParameter['scan_frequency'] = scanFrequency;
            }

            if (cloudAccount !== undefined) {
                localVarQueryParameter['cloud_account'] = cloudAccount;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRunResultsRead: async (tenantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('policyPolicyRunResultsRead', 'tenantId', tenantId)
            const localVarPath = `/policy/api/v1/policy_run_results/{tenant_id}/`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PolicyRunScan} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRunScanCreate: async (data: PolicyRunScan, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyPolicyRunScanCreate', 'data', data)
            const localVarPath = `/policy/api/v1/policy_run_scan/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Policy Run Scan History
         * @summary List Policy Run Scan History
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [tenant] Filter by Tenant
         * @param {string} [scanFrequency] Filter result by scan frequency
         * @param {number} [policy] Filter by Policy
         * @param {string} [cloudProvider] Filter by Cloud Provider
         * @param {any} [endDate] Filter by Date
         * @param {number} [repo] Filter by Repo ID
         * @param {string} [scanType] Filter by Scan Type
         * @param {number} [cloudAccount] Filter by Cloud Account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRunScanHistoryList: async (page?: number, pageSize?: number, tenant?: number, scanFrequency?: string, policy?: number, cloudProvider?: string, endDate?: any, repo?: number, scanType?: string, cloudAccount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/policy/api/v1/policy_run_scan_history/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (tenant !== undefined) {
                localVarQueryParameter['tenant'] = tenant;
            }

            if (scanFrequency !== undefined) {
                localVarQueryParameter['scan_frequency'] = scanFrequency;
            }

            if (policy !== undefined) {
                localVarQueryParameter['policy'] = policy;
            }

            if (cloudProvider !== undefined) {
                localVarQueryParameter['cloud_provider'] = cloudProvider;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (repo !== undefined) {
                localVarQueryParameter['repo'] = repo;
            }

            if (scanType !== undefined) {
                localVarQueryParameter['scan_type'] = scanType;
            }

            if (cloudAccount !== undefined) {
                localVarQueryParameter['cloud_account'] = cloudAccount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {PolicyRun} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRunScanHistoryPartialUpdate: async (id: string, data: PolicyRun, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('policyPolicyRunScanHistoryPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyPolicyRunScanHistoryPartialUpdate', 'data', data)
            const localVarPath = `/policy/api/v1/policy_run_scan_history/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRunScanHistoryRead: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('policyPolicyRunScanHistoryRead', 'id', id)
            const localVarPath = `/policy/api/v1/policy_run_scan_history/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {PolicyRun} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRunScanHistoryUpdate: async (id: string, data: PolicyRun, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('policyPolicyRunScanHistoryUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyPolicyRunScanHistoryUpdate', 'data', data)
            const localVarPath = `/policy/api/v1/policy_run_scan_history/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRunScanStatsList: async (page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/policy/api/v1/policy_run_scan_stats/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RepoScanSetUp} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRepoScanSetupCreate: async (data: RepoScanSetUp, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyRepoScanSetupCreate', 'data', data)
            const localVarPath = `/policy/api/v1/repo_scan_setup/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this repo scan set up.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRepoScanSetupDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('policyRepoScanSetupDelete', 'id', id)
            const localVarPath = `/policy/api/v1/repo_scan_setup/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Repos
         * @summary List Created Repos
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [tenant] Filter by tenant ID
         * @param {string} [repoUrl] Filter by repo url
         * @param {string} [repoType] Filter by repo type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRepoScanSetupList: async (page?: number, pageSize?: number, tenant?: number, repoUrl?: string, repoType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/policy/api/v1/repo_scan_setup/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (tenant !== undefined) {
                localVarQueryParameter['tenant'] = tenant;
            }

            if (repoUrl !== undefined) {
                localVarQueryParameter['repo_url'] = repoUrl;
            }

            if (repoType !== undefined) {
                localVarQueryParameter['repo_type'] = repoType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this repo scan set up.
         * @param {RepoScanSetUp} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRepoScanSetupPartialUpdate: async (id: number, data: RepoScanSetUp, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('policyRepoScanSetupPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyRepoScanSetupPartialUpdate', 'data', data)
            const localVarPath = `/policy/api/v1/repo_scan_setup/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this repo scan set up.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRepoScanSetupRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('policyRepoScanSetupRead', 'id', id)
            const localVarPath = `/policy/api/v1/repo_scan_setup/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this repo scan set up.
         * @param {RepoScanSetUp} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRepoScanSetupUpdate: async (id: number, data: RepoScanSetUp, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('policyRepoScanSetupUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyRepoScanSetupUpdate', 'data', data)
            const localVarPath = `/policy/api/v1/repo_scan_setup/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Rule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRulesCreate: async (data: Rule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyRulesCreate', 'data', data)
            const localVarPath = `/policy/api/v1/rules/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Rules
         * @summary List Rules
         * @param {string} [service] Filter by Service
         * @param {string} [name] Filter result by rule name
         * @param {string} [code] Filter by rule code
         * @param {boolean} [status] Filter by rule status
         * @param {string} [ruleType] Filter by rule type
         * @param {number} [tenant] Filter by tenant id
         * @param {string} [severity] Filter by severity
         * @param {string} [cloudProvider] Filter by cloud_provider
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRulesList: async (service?: string, name?: string, code?: string, status?: boolean, ruleType?: string, tenant?: number, severity?: string, cloudProvider?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/policy/api/v1/rules/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (service !== undefined) {
                localVarQueryParameter['service'] = service;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (ruleType !== undefined) {
                localVarQueryParameter['rule_type'] = ruleType;
            }

            if (tenant !== undefined) {
                localVarQueryParameter['tenant'] = tenant;
            }

            if (severity !== undefined) {
                localVarQueryParameter['severity'] = severity;
            }

            if (cloudProvider !== undefined) {
                localVarQueryParameter['cloud_provider'] = cloudProvider;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule.
         * @param {Rule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRulesPartialUpdate: async (id: number, data: Rule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('policyRulesPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyRulesPartialUpdate', 'data', data)
            const localVarPath = `/policy/api/v1/rules/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRulesRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('policyRulesRead', 'id', id)
            const localVarPath = `/policy/api/v1/rules/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule.
         * @param {Rule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRulesUpdate: async (id: number, data: Rule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('policyRulesUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyRulesUpdate', 'data', data)
            const localVarPath = `/policy/api/v1/rules/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyTemplatesList: async (page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/policy/api/v1/templates/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyTfCfFileScanCreate: async (file: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('policyTfCfFileScanCreate', 'file', file)
            const localVarPath = `/policy/api/v1/tf_cf_file_scan/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates Policy Rule (Admin)
         * @summary Updates Policy Rules. You can pass an Array as payload
         * @param {PolicyRule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyUpdatePolicyRuleUpdate: async (data: PolicyRule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyUpdatePolicyRuleUpdate', 'data', data)
            const localVarPath = `/policy/api/v1/update_policy_rule/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PolicyApi - functional programming interface
 * @export
 */
export const PolicyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PolicyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {FetchAsset} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyFetchAssetCreate(data: FetchAsset, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FetchAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyFetchAssetCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FullScan} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyFullScanCreate(data: FullScan, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FullScan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyFullScanCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this policy.
         * @param {Policy} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPolicyDetailPartialUpdate(id: number, data: Policy, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Policy>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPolicyDetailPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this policy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPolicyDetailRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Policy>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPolicyDetailRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this policy.
         * @param {Policy} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPolicyDetailUpdate(id: number, data: Policy, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Policy>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPolicyDetailUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Policy} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPolicyListCreateCreate(data: Policy, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Policy>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPolicyListCreateCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Policies
         * @summary List Created Policies
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [name] Filter result by policy name
         * @param {string} [code] Filter by policy code
         * @param {boolean} [status] Filter by policy status
         * @param {string} [policyType] Filter by policy_type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPolicyListCreateList(page?: number, pageSize?: number, name?: string, code?: string, status?: boolean, policyType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyPolicyListCreateList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPolicyListCreateList(page, pageSize, name, code, status, policyType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {OneTimeRepoScan} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPolicyOneTimeRepoScanCreate(data: OneTimeRepoScan, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OneTimeRepoScan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPolicyOneTimeRepoScanCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RepoScan} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPolicyRepoRunScanCreate(data: RepoScan, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepoScan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPolicyRepoRunScanCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PolicyRule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPolicyRuleCreate(data: PolicyRule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyRule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPolicyRuleCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPolicyRuleList(page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyPolicyRuleList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPolicyRuleList(page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * retrieves a PolicyRule (Please pass policy id for the id field)
         * @summary Retrieves an instance of a Policy and its Rules
         * @param {string} policyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPolicyRuleRead(policyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyRule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPolicyRuleRead(policyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Aggregate Policy Result Group By Resource
         * @summary Aggregate Policy Result Group By Resource
         * @param {PolicyRunId} data 
         * @param {string} [resource] Filter by Resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPolicyRunResultByResourceCreate(data: PolicyRunId, resource?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyRunId>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPolicyRunResultByResourceCreate(data, resource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Aggregate Policy Result Group By Rules
         * @summary Aggregate Policy Result Group By Rules
         * @param {PolicyRunId} data 
         * @param {string} [findingDesc] Filter by Compliance Rule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPolicyRunResultGroupByRuleCreate(data: PolicyRunId, findingDesc?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyRunId>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPolicyRunResultGroupByRuleCreate(data, findingDesc, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Policy Run Results
         * @summary List Policy Run Results
         * @param {number} [tenant] Filter by Tenant
         * @param {number} [id] Retrieve Object by Object id
         * @param {number} [policyRunId] Filter by Policy Run ID
         * @param {string} [severity] Filter by Severity (High, Medium, Low)
         * @param {string} [scanType] Filter by Scan Type
         * @param {string} [scanFrequency] Filter result by scan frequency
         * @param {number} [cloudAccount] Filter by Cloud Provider Account ID
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPolicyRunResultsList(tenant?: number, id?: number, policyRunId?: number, severity?: string, scanType?: string, scanFrequency?: string, cloudAccount?: number, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyPolicyRunResultsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPolicyRunResultsList(tenant, id, policyRunId, severity, scanType, scanFrequency, cloudAccount, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPolicyRunResultsRead(tenantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyRunResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPolicyRunResultsRead(tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PolicyRunScan} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPolicyRunScanCreate(data: PolicyRunScan, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyRunScan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPolicyRunScanCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Policy Run Scan History
         * @summary List Policy Run Scan History
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [tenant] Filter by Tenant
         * @param {string} [scanFrequency] Filter result by scan frequency
         * @param {number} [policy] Filter by Policy
         * @param {string} [cloudProvider] Filter by Cloud Provider
         * @param {any} [endDate] Filter by Date
         * @param {number} [repo] Filter by Repo ID
         * @param {string} [scanType] Filter by Scan Type
         * @param {number} [cloudAccount] Filter by Cloud Account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPolicyRunScanHistoryList(page?: number, pageSize?: number, tenant?: number, scanFrequency?: string, policy?: number, cloudProvider?: string, endDate?: any, repo?: number, scanType?: string, cloudAccount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyPolicyRunScanHistoryList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPolicyRunScanHistoryList(page, pageSize, tenant, scanFrequency, policy, cloudProvider, endDate, repo, scanType, cloudAccount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {PolicyRun} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPolicyRunScanHistoryPartialUpdate(id: string, data: PolicyRun, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyRun>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPolicyRunScanHistoryPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPolicyRunScanHistoryRead(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyRun>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPolicyRunScanHistoryRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {PolicyRun} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPolicyRunScanHistoryUpdate(id: string, data: PolicyRun, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyRun>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPolicyRunScanHistoryUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPolicyRunScanStatsList(page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyPolicyRunScanStatsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPolicyRunScanStatsList(page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RepoScanSetUp} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyRepoScanSetupCreate(data: RepoScanSetUp, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepoScanSetUp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyRepoScanSetupCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this repo scan set up.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyRepoScanSetupDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyRepoScanSetupDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Repos
         * @summary List Created Repos
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [tenant] Filter by tenant ID
         * @param {string} [repoUrl] Filter by repo url
         * @param {string} [repoType] Filter by repo type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyRepoScanSetupList(page?: number, pageSize?: number, tenant?: number, repoUrl?: string, repoType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyRepoScanSetupList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyRepoScanSetupList(page, pageSize, tenant, repoUrl, repoType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this repo scan set up.
         * @param {RepoScanSetUp} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyRepoScanSetupPartialUpdate(id: number, data: RepoScanSetUp, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepoScanSetUp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyRepoScanSetupPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this repo scan set up.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyRepoScanSetupRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepoScanSetUp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyRepoScanSetupRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this repo scan set up.
         * @param {RepoScanSetUp} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyRepoScanSetupUpdate(id: number, data: RepoScanSetUp, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepoScanSetUp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyRepoScanSetupUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Rule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyRulesCreate(data: Rule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyRulesCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Rules
         * @summary List Rules
         * @param {string} [service] Filter by Service
         * @param {string} [name] Filter result by rule name
         * @param {string} [code] Filter by rule code
         * @param {boolean} [status] Filter by rule status
         * @param {string} [ruleType] Filter by rule type
         * @param {number} [tenant] Filter by tenant id
         * @param {string} [severity] Filter by severity
         * @param {string} [cloudProvider] Filter by cloud_provider
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyRulesList(service?: string, name?: string, code?: string, status?: boolean, ruleType?: string, tenant?: number, severity?: string, cloudProvider?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyRulesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyRulesList(service, name, code, status, ruleType, tenant, severity, cloudProvider, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule.
         * @param {Rule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyRulesPartialUpdate(id: number, data: Rule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyRulesPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyRulesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyRulesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule.
         * @param {Rule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyRulesUpdate(id: number, data: Rule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyRulesUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyTemplatesList(page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyTemplatesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyTemplatesList(page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyTfCfFileScanCreate(file: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CFTFTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyTfCfFileScanCreate(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates Policy Rule (Admin)
         * @summary Updates Policy Rules. You can pass an Array as payload
         * @param {PolicyRule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyUpdatePolicyRuleUpdate(data: PolicyRule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyRule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyUpdatePolicyRuleUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PolicyApi - factory interface
 * @export
 */
export const PolicyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PolicyApiFp(configuration)
    return {
        /**
         * 
         * @param {FetchAsset} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyFetchAssetCreate(data: FetchAsset, options?: any): AxiosPromise<FetchAsset> {
            return localVarFp.policyFetchAssetCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FullScan} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyFullScanCreate(data: FullScan, options?: any): AxiosPromise<FullScan> {
            return localVarFp.policyFullScanCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this policy.
         * @param {Policy} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyDetailPartialUpdate(id: number, data: Policy, options?: any): AxiosPromise<Policy> {
            return localVarFp.policyPolicyDetailPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this policy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyDetailRead(id: number, options?: any): AxiosPromise<Policy> {
            return localVarFp.policyPolicyDetailRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this policy.
         * @param {Policy} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyDetailUpdate(id: number, data: Policy, options?: any): AxiosPromise<Policy> {
            return localVarFp.policyPolicyDetailUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Policy} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyListCreateCreate(data: Policy, options?: any): AxiosPromise<Policy> {
            return localVarFp.policyPolicyListCreateCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * List Policies
         * @summary List Created Policies
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [name] Filter result by policy name
         * @param {string} [code] Filter by policy code
         * @param {boolean} [status] Filter by policy status
         * @param {string} [policyType] Filter by policy_type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyListCreateList(page?: number, pageSize?: number, name?: string, code?: string, status?: boolean, policyType?: string, options?: any): AxiosPromise<PolicyPolicyListCreateList200Response> {
            return localVarFp.policyPolicyListCreateList(page, pageSize, name, code, status, policyType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OneTimeRepoScan} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyOneTimeRepoScanCreate(data: OneTimeRepoScan, options?: any): AxiosPromise<OneTimeRepoScan> {
            return localVarFp.policyPolicyOneTimeRepoScanCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RepoScan} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRepoRunScanCreate(data: RepoScan, options?: any): AxiosPromise<RepoScan> {
            return localVarFp.policyPolicyRepoRunScanCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PolicyRule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRuleCreate(data: PolicyRule, options?: any): AxiosPromise<PolicyRule> {
            return localVarFp.policyPolicyRuleCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRuleList(page?: number, pageSize?: number, options?: any): AxiosPromise<PolicyPolicyRuleList200Response> {
            return localVarFp.policyPolicyRuleList(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * retrieves a PolicyRule (Please pass policy id for the id field)
         * @summary Retrieves an instance of a Policy and its Rules
         * @param {string} policyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRuleRead(policyId: string, options?: any): AxiosPromise<PolicyRule> {
            return localVarFp.policyPolicyRuleRead(policyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Aggregate Policy Result Group By Resource
         * @summary Aggregate Policy Result Group By Resource
         * @param {PolicyRunId} data 
         * @param {string} [resource] Filter by Resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRunResultByResourceCreate(data: PolicyRunId, resource?: string, options?: any): AxiosPromise<PolicyRunId> {
            return localVarFp.policyPolicyRunResultByResourceCreate(data, resource, options).then((request) => request(axios, basePath));
        },
        /**
         * Aggregate Policy Result Group By Rules
         * @summary Aggregate Policy Result Group By Rules
         * @param {PolicyRunId} data 
         * @param {string} [findingDesc] Filter by Compliance Rule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRunResultGroupByRuleCreate(data: PolicyRunId, findingDesc?: string, options?: any): AxiosPromise<PolicyRunId> {
            return localVarFp.policyPolicyRunResultGroupByRuleCreate(data, findingDesc, options).then((request) => request(axios, basePath));
        },
        /**
         * List Policy Run Results
         * @summary List Policy Run Results
         * @param {number} [tenant] Filter by Tenant
         * @param {number} [id] Retrieve Object by Object id
         * @param {number} [policyRunId] Filter by Policy Run ID
         * @param {string} [severity] Filter by Severity (High, Medium, Low)
         * @param {string} [scanType] Filter by Scan Type
         * @param {string} [scanFrequency] Filter result by scan frequency
         * @param {number} [cloudAccount] Filter by Cloud Provider Account ID
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRunResultsList(tenant?: number, id?: number, policyRunId?: number, severity?: string, scanType?: string, scanFrequency?: string, cloudAccount?: number, page?: number, pageSize?: number, options?: any): AxiosPromise<PolicyPolicyRunResultsList200Response> {
            return localVarFp.policyPolicyRunResultsList(tenant, id, policyRunId, severity, scanType, scanFrequency, cloudAccount, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tenantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRunResultsRead(tenantId: string, options?: any): AxiosPromise<PolicyRunResult> {
            return localVarFp.policyPolicyRunResultsRead(tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PolicyRunScan} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRunScanCreate(data: PolicyRunScan, options?: any): AxiosPromise<PolicyRunScan> {
            return localVarFp.policyPolicyRunScanCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * List Policy Run Scan History
         * @summary List Policy Run Scan History
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [tenant] Filter by Tenant
         * @param {string} [scanFrequency] Filter result by scan frequency
         * @param {number} [policy] Filter by Policy
         * @param {string} [cloudProvider] Filter by Cloud Provider
         * @param {any} [endDate] Filter by Date
         * @param {number} [repo] Filter by Repo ID
         * @param {string} [scanType] Filter by Scan Type
         * @param {number} [cloudAccount] Filter by Cloud Account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRunScanHistoryList(page?: number, pageSize?: number, tenant?: number, scanFrequency?: string, policy?: number, cloudProvider?: string, endDate?: any, repo?: number, scanType?: string, cloudAccount?: number, options?: any): AxiosPromise<PolicyPolicyRunScanHistoryList200Response> {
            return localVarFp.policyPolicyRunScanHistoryList(page, pageSize, tenant, scanFrequency, policy, cloudProvider, endDate, repo, scanType, cloudAccount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {PolicyRun} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRunScanHistoryPartialUpdate(id: string, data: PolicyRun, options?: any): AxiosPromise<PolicyRun> {
            return localVarFp.policyPolicyRunScanHistoryPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRunScanHistoryRead(id: string, options?: any): AxiosPromise<PolicyRun> {
            return localVarFp.policyPolicyRunScanHistoryRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {PolicyRun} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRunScanHistoryUpdate(id: string, data: PolicyRun, options?: any): AxiosPromise<PolicyRun> {
            return localVarFp.policyPolicyRunScanHistoryUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRunScanStatsList(page?: number, pageSize?: number, options?: any): AxiosPromise<PolicyPolicyRunScanStatsList200Response> {
            return localVarFp.policyPolicyRunScanStatsList(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RepoScanSetUp} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRepoScanSetupCreate(data: RepoScanSetUp, options?: any): AxiosPromise<RepoScanSetUp> {
            return localVarFp.policyRepoScanSetupCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this repo scan set up.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRepoScanSetupDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.policyRepoScanSetupDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * List Repos
         * @summary List Created Repos
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [tenant] Filter by tenant ID
         * @param {string} [repoUrl] Filter by repo url
         * @param {string} [repoType] Filter by repo type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRepoScanSetupList(page?: number, pageSize?: number, tenant?: number, repoUrl?: string, repoType?: string, options?: any): AxiosPromise<PolicyRepoScanSetupList200Response> {
            return localVarFp.policyRepoScanSetupList(page, pageSize, tenant, repoUrl, repoType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this repo scan set up.
         * @param {RepoScanSetUp} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRepoScanSetupPartialUpdate(id: number, data: RepoScanSetUp, options?: any): AxiosPromise<RepoScanSetUp> {
            return localVarFp.policyRepoScanSetupPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this repo scan set up.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRepoScanSetupRead(id: number, options?: any): AxiosPromise<RepoScanSetUp> {
            return localVarFp.policyRepoScanSetupRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this repo scan set up.
         * @param {RepoScanSetUp} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRepoScanSetupUpdate(id: number, data: RepoScanSetUp, options?: any): AxiosPromise<RepoScanSetUp> {
            return localVarFp.policyRepoScanSetupUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Rule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRulesCreate(data: Rule, options?: any): AxiosPromise<Rule> {
            return localVarFp.policyRulesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * List Rules
         * @summary List Rules
         * @param {string} [service] Filter by Service
         * @param {string} [name] Filter result by rule name
         * @param {string} [code] Filter by rule code
         * @param {boolean} [status] Filter by rule status
         * @param {string} [ruleType] Filter by rule type
         * @param {number} [tenant] Filter by tenant id
         * @param {string} [severity] Filter by severity
         * @param {string} [cloudProvider] Filter by cloud_provider
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRulesList(service?: string, name?: string, code?: string, status?: boolean, ruleType?: string, tenant?: number, severity?: string, cloudProvider?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<PolicyRulesList200Response> {
            return localVarFp.policyRulesList(service, name, code, status, ruleType, tenant, severity, cloudProvider, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule.
         * @param {Rule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRulesPartialUpdate(id: number, data: Rule, options?: any): AxiosPromise<Rule> {
            return localVarFp.policyRulesPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRulesRead(id: number, options?: any): AxiosPromise<Rule> {
            return localVarFp.policyRulesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule.
         * @param {Rule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRulesUpdate(id: number, data: Rule, options?: any): AxiosPromise<Rule> {
            return localVarFp.policyRulesUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyTemplatesList(page?: number, pageSize?: number, options?: any): AxiosPromise<PolicyTemplatesList200Response> {
            return localVarFp.policyTemplatesList(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyTfCfFileScanCreate(file: any, options?: any): AxiosPromise<CFTFTemplate> {
            return localVarFp.policyTfCfFileScanCreate(file, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates Policy Rule (Admin)
         * @summary Updates Policy Rules. You can pass an Array as payload
         * @param {PolicyRule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyUpdatePolicyRuleUpdate(data: PolicyRule, options?: any): AxiosPromise<PolicyRule> {
            return localVarFp.policyUpdatePolicyRuleUpdate(data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for policyFetchAssetCreate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyFetchAssetCreateRequest
 */
export interface PolicyApiPolicyFetchAssetCreateRequest {
    /**
     * 
     * @type {FetchAsset}
     * @memberof PolicyApiPolicyFetchAssetCreate
     */
    readonly data: FetchAsset
}

/**
 * Request parameters for policyFullScanCreate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyFullScanCreateRequest
 */
export interface PolicyApiPolicyFullScanCreateRequest {
    /**
     * 
     * @type {FullScan}
     * @memberof PolicyApiPolicyFullScanCreate
     */
    readonly data: FullScan
}

/**
 * Request parameters for policyPolicyDetailPartialUpdate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPolicyDetailPartialUpdateRequest
 */
export interface PolicyApiPolicyPolicyDetailPartialUpdateRequest {
    /**
     * A unique integer value identifying this policy.
     * @type {number}
     * @memberof PolicyApiPolicyPolicyDetailPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Policy}
     * @memberof PolicyApiPolicyPolicyDetailPartialUpdate
     */
    readonly data: Policy
}

/**
 * Request parameters for policyPolicyDetailRead operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPolicyDetailReadRequest
 */
export interface PolicyApiPolicyPolicyDetailReadRequest {
    /**
     * A unique integer value identifying this policy.
     * @type {number}
     * @memberof PolicyApiPolicyPolicyDetailRead
     */
    readonly id: number
}

/**
 * Request parameters for policyPolicyDetailUpdate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPolicyDetailUpdateRequest
 */
export interface PolicyApiPolicyPolicyDetailUpdateRequest {
    /**
     * A unique integer value identifying this policy.
     * @type {number}
     * @memberof PolicyApiPolicyPolicyDetailUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Policy}
     * @memberof PolicyApiPolicyPolicyDetailUpdate
     */
    readonly data: Policy
}

/**
 * Request parameters for policyPolicyListCreateCreate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPolicyListCreateCreateRequest
 */
export interface PolicyApiPolicyPolicyListCreateCreateRequest {
    /**
     * 
     * @type {Policy}
     * @memberof PolicyApiPolicyPolicyListCreateCreate
     */
    readonly data: Policy
}

/**
 * Request parameters for policyPolicyListCreateList operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPolicyListCreateListRequest
 */
export interface PolicyApiPolicyPolicyListCreateListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof PolicyApiPolicyPolicyListCreateList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof PolicyApiPolicyPolicyListCreateList
     */
    readonly pageSize?: number

    /**
     * Filter result by policy name
     * @type {string}
     * @memberof PolicyApiPolicyPolicyListCreateList
     */
    readonly name?: string

    /**
     * Filter by policy code
     * @type {string}
     * @memberof PolicyApiPolicyPolicyListCreateList
     */
    readonly code?: string

    /**
     * Filter by policy status
     * @type {boolean}
     * @memberof PolicyApiPolicyPolicyListCreateList
     */
    readonly status?: boolean

    /**
     * Filter by policy_type
     * @type {string}
     * @memberof PolicyApiPolicyPolicyListCreateList
     */
    readonly policyType?: string
}

/**
 * Request parameters for policyPolicyOneTimeRepoScanCreate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPolicyOneTimeRepoScanCreateRequest
 */
export interface PolicyApiPolicyPolicyOneTimeRepoScanCreateRequest {
    /**
     * 
     * @type {OneTimeRepoScan}
     * @memberof PolicyApiPolicyPolicyOneTimeRepoScanCreate
     */
    readonly data: OneTimeRepoScan
}

/**
 * Request parameters for policyPolicyRepoRunScanCreate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPolicyRepoRunScanCreateRequest
 */
export interface PolicyApiPolicyPolicyRepoRunScanCreateRequest {
    /**
     * 
     * @type {RepoScan}
     * @memberof PolicyApiPolicyPolicyRepoRunScanCreate
     */
    readonly data: RepoScan
}

/**
 * Request parameters for policyPolicyRuleCreate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPolicyRuleCreateRequest
 */
export interface PolicyApiPolicyPolicyRuleCreateRequest {
    /**
     * 
     * @type {PolicyRule}
     * @memberof PolicyApiPolicyPolicyRuleCreate
     */
    readonly data: PolicyRule
}

/**
 * Request parameters for policyPolicyRuleList operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPolicyRuleListRequest
 */
export interface PolicyApiPolicyPolicyRuleListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof PolicyApiPolicyPolicyRuleList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof PolicyApiPolicyPolicyRuleList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for policyPolicyRuleRead operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPolicyRuleReadRequest
 */
export interface PolicyApiPolicyPolicyRuleReadRequest {
    /**
     * 
     * @type {string}
     * @memberof PolicyApiPolicyPolicyRuleRead
     */
    readonly policyId: string
}

/**
 * Request parameters for policyPolicyRunResultByResourceCreate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPolicyRunResultByResourceCreateRequest
 */
export interface PolicyApiPolicyPolicyRunResultByResourceCreateRequest {
    /**
     * 
     * @type {PolicyRunId}
     * @memberof PolicyApiPolicyPolicyRunResultByResourceCreate
     */
    readonly data: PolicyRunId

    /**
     * Filter by Resource
     * @type {string}
     * @memberof PolicyApiPolicyPolicyRunResultByResourceCreate
     */
    readonly resource?: string
}

/**
 * Request parameters for policyPolicyRunResultGroupByRuleCreate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPolicyRunResultGroupByRuleCreateRequest
 */
export interface PolicyApiPolicyPolicyRunResultGroupByRuleCreateRequest {
    /**
     * 
     * @type {PolicyRunId}
     * @memberof PolicyApiPolicyPolicyRunResultGroupByRuleCreate
     */
    readonly data: PolicyRunId

    /**
     * Filter by Compliance Rule
     * @type {string}
     * @memberof PolicyApiPolicyPolicyRunResultGroupByRuleCreate
     */
    readonly findingDesc?: string
}

/**
 * Request parameters for policyPolicyRunResultsList operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPolicyRunResultsListRequest
 */
export interface PolicyApiPolicyPolicyRunResultsListRequest {
    /**
     * Filter by Tenant
     * @type {number}
     * @memberof PolicyApiPolicyPolicyRunResultsList
     */
    readonly tenant?: number

    /**
     * Retrieve Object by Object id
     * @type {number}
     * @memberof PolicyApiPolicyPolicyRunResultsList
     */
    readonly id?: number

    /**
     * Filter by Policy Run ID
     * @type {number}
     * @memberof PolicyApiPolicyPolicyRunResultsList
     */
    readonly policyRunId?: number

    /**
     * Filter by Severity (High, Medium, Low)
     * @type {string}
     * @memberof PolicyApiPolicyPolicyRunResultsList
     */
    readonly severity?: string

    /**
     * Filter by Scan Type
     * @type {string}
     * @memberof PolicyApiPolicyPolicyRunResultsList
     */
    readonly scanType?: string

    /**
     * Filter result by scan frequency
     * @type {string}
     * @memberof PolicyApiPolicyPolicyRunResultsList
     */
    readonly scanFrequency?: string

    /**
     * Filter by Cloud Provider Account ID
     * @type {number}
     * @memberof PolicyApiPolicyPolicyRunResultsList
     */
    readonly cloudAccount?: number

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof PolicyApiPolicyPolicyRunResultsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof PolicyApiPolicyPolicyRunResultsList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for policyPolicyRunResultsRead operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPolicyRunResultsReadRequest
 */
export interface PolicyApiPolicyPolicyRunResultsReadRequest {
    /**
     * 
     * @type {string}
     * @memberof PolicyApiPolicyPolicyRunResultsRead
     */
    readonly tenantId: string
}

/**
 * Request parameters for policyPolicyRunScanCreate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPolicyRunScanCreateRequest
 */
export interface PolicyApiPolicyPolicyRunScanCreateRequest {
    /**
     * 
     * @type {PolicyRunScan}
     * @memberof PolicyApiPolicyPolicyRunScanCreate
     */
    readonly data: PolicyRunScan
}

/**
 * Request parameters for policyPolicyRunScanHistoryList operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPolicyRunScanHistoryListRequest
 */
export interface PolicyApiPolicyPolicyRunScanHistoryListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof PolicyApiPolicyPolicyRunScanHistoryList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof PolicyApiPolicyPolicyRunScanHistoryList
     */
    readonly pageSize?: number

    /**
     * Filter by Tenant
     * @type {number}
     * @memberof PolicyApiPolicyPolicyRunScanHistoryList
     */
    readonly tenant?: number

    /**
     * Filter result by scan frequency
     * @type {string}
     * @memberof PolicyApiPolicyPolicyRunScanHistoryList
     */
    readonly scanFrequency?: string

    /**
     * Filter by Policy
     * @type {number}
     * @memberof PolicyApiPolicyPolicyRunScanHistoryList
     */
    readonly policy?: number

    /**
     * Filter by Cloud Provider
     * @type {string}
     * @memberof PolicyApiPolicyPolicyRunScanHistoryList
     */
    readonly cloudProvider?: string

    /**
     * Filter by Date
     * @type {any}
     * @memberof PolicyApiPolicyPolicyRunScanHistoryList
     */
    readonly endDate?: any

    /**
     * Filter by Repo ID
     * @type {number}
     * @memberof PolicyApiPolicyPolicyRunScanHistoryList
     */
    readonly repo?: number

    /**
     * Filter by Scan Type
     * @type {string}
     * @memberof PolicyApiPolicyPolicyRunScanHistoryList
     */
    readonly scanType?: string

    /**
     * Filter by Cloud Account
     * @type {number}
     * @memberof PolicyApiPolicyPolicyRunScanHistoryList
     */
    readonly cloudAccount?: number
}

/**
 * Request parameters for policyPolicyRunScanHistoryPartialUpdate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPolicyRunScanHistoryPartialUpdateRequest
 */
export interface PolicyApiPolicyPolicyRunScanHistoryPartialUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof PolicyApiPolicyPolicyRunScanHistoryPartialUpdate
     */
    readonly id: string

    /**
     * 
     * @type {PolicyRun}
     * @memberof PolicyApiPolicyPolicyRunScanHistoryPartialUpdate
     */
    readonly data: PolicyRun
}

/**
 * Request parameters for policyPolicyRunScanHistoryRead operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPolicyRunScanHistoryReadRequest
 */
export interface PolicyApiPolicyPolicyRunScanHistoryReadRequest {
    /**
     * 
     * @type {string}
     * @memberof PolicyApiPolicyPolicyRunScanHistoryRead
     */
    readonly id: string
}

/**
 * Request parameters for policyPolicyRunScanHistoryUpdate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPolicyRunScanHistoryUpdateRequest
 */
export interface PolicyApiPolicyPolicyRunScanHistoryUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof PolicyApiPolicyPolicyRunScanHistoryUpdate
     */
    readonly id: string

    /**
     * 
     * @type {PolicyRun}
     * @memberof PolicyApiPolicyPolicyRunScanHistoryUpdate
     */
    readonly data: PolicyRun
}

/**
 * Request parameters for policyPolicyRunScanStatsList operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPolicyRunScanStatsListRequest
 */
export interface PolicyApiPolicyPolicyRunScanStatsListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof PolicyApiPolicyPolicyRunScanStatsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof PolicyApiPolicyPolicyRunScanStatsList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for policyRepoScanSetupCreate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyRepoScanSetupCreateRequest
 */
export interface PolicyApiPolicyRepoScanSetupCreateRequest {
    /**
     * 
     * @type {RepoScanSetUp}
     * @memberof PolicyApiPolicyRepoScanSetupCreate
     */
    readonly data: RepoScanSetUp
}

/**
 * Request parameters for policyRepoScanSetupDelete operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyRepoScanSetupDeleteRequest
 */
export interface PolicyApiPolicyRepoScanSetupDeleteRequest {
    /**
     * A unique integer value identifying this repo scan set up.
     * @type {number}
     * @memberof PolicyApiPolicyRepoScanSetupDelete
     */
    readonly id: number
}

/**
 * Request parameters for policyRepoScanSetupList operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyRepoScanSetupListRequest
 */
export interface PolicyApiPolicyRepoScanSetupListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof PolicyApiPolicyRepoScanSetupList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof PolicyApiPolicyRepoScanSetupList
     */
    readonly pageSize?: number

    /**
     * Filter by tenant ID
     * @type {number}
     * @memberof PolicyApiPolicyRepoScanSetupList
     */
    readonly tenant?: number

    /**
     * Filter by repo url
     * @type {string}
     * @memberof PolicyApiPolicyRepoScanSetupList
     */
    readonly repoUrl?: string

    /**
     * Filter by repo type
     * @type {string}
     * @memberof PolicyApiPolicyRepoScanSetupList
     */
    readonly repoType?: string
}

/**
 * Request parameters for policyRepoScanSetupPartialUpdate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyRepoScanSetupPartialUpdateRequest
 */
export interface PolicyApiPolicyRepoScanSetupPartialUpdateRequest {
    /**
     * A unique integer value identifying this repo scan set up.
     * @type {number}
     * @memberof PolicyApiPolicyRepoScanSetupPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {RepoScanSetUp}
     * @memberof PolicyApiPolicyRepoScanSetupPartialUpdate
     */
    readonly data: RepoScanSetUp
}

/**
 * Request parameters for policyRepoScanSetupRead operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyRepoScanSetupReadRequest
 */
export interface PolicyApiPolicyRepoScanSetupReadRequest {
    /**
     * A unique integer value identifying this repo scan set up.
     * @type {number}
     * @memberof PolicyApiPolicyRepoScanSetupRead
     */
    readonly id: number
}

/**
 * Request parameters for policyRepoScanSetupUpdate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyRepoScanSetupUpdateRequest
 */
export interface PolicyApiPolicyRepoScanSetupUpdateRequest {
    /**
     * A unique integer value identifying this repo scan set up.
     * @type {number}
     * @memberof PolicyApiPolicyRepoScanSetupUpdate
     */
    readonly id: number

    /**
     * 
     * @type {RepoScanSetUp}
     * @memberof PolicyApiPolicyRepoScanSetupUpdate
     */
    readonly data: RepoScanSetUp
}

/**
 * Request parameters for policyRulesCreate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyRulesCreateRequest
 */
export interface PolicyApiPolicyRulesCreateRequest {
    /**
     * 
     * @type {Rule}
     * @memberof PolicyApiPolicyRulesCreate
     */
    readonly data: Rule
}

/**
 * Request parameters for policyRulesList operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyRulesListRequest
 */
export interface PolicyApiPolicyRulesListRequest {
    /**
     * Filter by Service
     * @type {string}
     * @memberof PolicyApiPolicyRulesList
     */
    readonly service?: string

    /**
     * Filter result by rule name
     * @type {string}
     * @memberof PolicyApiPolicyRulesList
     */
    readonly name?: string

    /**
     * Filter by rule code
     * @type {string}
     * @memberof PolicyApiPolicyRulesList
     */
    readonly code?: string

    /**
     * Filter by rule status
     * @type {boolean}
     * @memberof PolicyApiPolicyRulesList
     */
    readonly status?: boolean

    /**
     * Filter by rule type
     * @type {string}
     * @memberof PolicyApiPolicyRulesList
     */
    readonly ruleType?: string

    /**
     * Filter by tenant id
     * @type {number}
     * @memberof PolicyApiPolicyRulesList
     */
    readonly tenant?: number

    /**
     * Filter by severity
     * @type {string}
     * @memberof PolicyApiPolicyRulesList
     */
    readonly severity?: string

    /**
     * Filter by cloud_provider
     * @type {string}
     * @memberof PolicyApiPolicyRulesList
     */
    readonly cloudProvider?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof PolicyApiPolicyRulesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof PolicyApiPolicyRulesList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for policyRulesPartialUpdate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyRulesPartialUpdateRequest
 */
export interface PolicyApiPolicyRulesPartialUpdateRequest {
    /**
     * A unique integer value identifying this rule.
     * @type {number}
     * @memberof PolicyApiPolicyRulesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Rule}
     * @memberof PolicyApiPolicyRulesPartialUpdate
     */
    readonly data: Rule
}

/**
 * Request parameters for policyRulesRead operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyRulesReadRequest
 */
export interface PolicyApiPolicyRulesReadRequest {
    /**
     * A unique integer value identifying this rule.
     * @type {number}
     * @memberof PolicyApiPolicyRulesRead
     */
    readonly id: number
}

/**
 * Request parameters for policyRulesUpdate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyRulesUpdateRequest
 */
export interface PolicyApiPolicyRulesUpdateRequest {
    /**
     * A unique integer value identifying this rule.
     * @type {number}
     * @memberof PolicyApiPolicyRulesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Rule}
     * @memberof PolicyApiPolicyRulesUpdate
     */
    readonly data: Rule
}

/**
 * Request parameters for policyTemplatesList operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyTemplatesListRequest
 */
export interface PolicyApiPolicyTemplatesListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof PolicyApiPolicyTemplatesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof PolicyApiPolicyTemplatesList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for policyTfCfFileScanCreate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyTfCfFileScanCreateRequest
 */
export interface PolicyApiPolicyTfCfFileScanCreateRequest {
    /**
     * 
     * @type {any}
     * @memberof PolicyApiPolicyTfCfFileScanCreate
     */
    readonly file: any
}

/**
 * Request parameters for policyUpdatePolicyRuleUpdate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyUpdatePolicyRuleUpdateRequest
 */
export interface PolicyApiPolicyUpdatePolicyRuleUpdateRequest {
    /**
     * 
     * @type {PolicyRule}
     * @memberof PolicyApiPolicyUpdatePolicyRuleUpdate
     */
    readonly data: PolicyRule
}

/**
 * PolicyApi - object-oriented interface
 * @export
 * @class PolicyApi
 * @extends {BaseAPI}
 */
export class PolicyApi extends BaseAPI {
    /**
     * 
     * @param {PolicyApiPolicyFetchAssetCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyFetchAssetCreate(requestParameters: PolicyApiPolicyFetchAssetCreateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyFetchAssetCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyFullScanCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyFullScanCreate(requestParameters: PolicyApiPolicyFullScanCreateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyFullScanCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyPolicyDetailPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPolicyDetailPartialUpdate(requestParameters: PolicyApiPolicyPolicyDetailPartialUpdateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPolicyDetailPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyPolicyDetailReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPolicyDetailRead(requestParameters: PolicyApiPolicyPolicyDetailReadRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPolicyDetailRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyPolicyDetailUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPolicyDetailUpdate(requestParameters: PolicyApiPolicyPolicyDetailUpdateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPolicyDetailUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyPolicyListCreateCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPolicyListCreateCreate(requestParameters: PolicyApiPolicyPolicyListCreateCreateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPolicyListCreateCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Policies
     * @summary List Created Policies
     * @param {PolicyApiPolicyPolicyListCreateListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPolicyListCreateList(requestParameters: PolicyApiPolicyPolicyListCreateListRequest = {}, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPolicyListCreateList(requestParameters.page, requestParameters.pageSize, requestParameters.name, requestParameters.code, requestParameters.status, requestParameters.policyType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyPolicyOneTimeRepoScanCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPolicyOneTimeRepoScanCreate(requestParameters: PolicyApiPolicyPolicyOneTimeRepoScanCreateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPolicyOneTimeRepoScanCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyPolicyRepoRunScanCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPolicyRepoRunScanCreate(requestParameters: PolicyApiPolicyPolicyRepoRunScanCreateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPolicyRepoRunScanCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyPolicyRuleCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPolicyRuleCreate(requestParameters: PolicyApiPolicyPolicyRuleCreateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPolicyRuleCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyPolicyRuleListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPolicyRuleList(requestParameters: PolicyApiPolicyPolicyRuleListRequest = {}, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPolicyRuleList(requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * retrieves a PolicyRule (Please pass policy id for the id field)
     * @summary Retrieves an instance of a Policy and its Rules
     * @param {PolicyApiPolicyPolicyRuleReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPolicyRuleRead(requestParameters: PolicyApiPolicyPolicyRuleReadRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPolicyRuleRead(requestParameters.policyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Aggregate Policy Result Group By Resource
     * @summary Aggregate Policy Result Group By Resource
     * @param {PolicyApiPolicyPolicyRunResultByResourceCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPolicyRunResultByResourceCreate(requestParameters: PolicyApiPolicyPolicyRunResultByResourceCreateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPolicyRunResultByResourceCreate(requestParameters.data, requestParameters.resource, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Aggregate Policy Result Group By Rules
     * @summary Aggregate Policy Result Group By Rules
     * @param {PolicyApiPolicyPolicyRunResultGroupByRuleCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPolicyRunResultGroupByRuleCreate(requestParameters: PolicyApiPolicyPolicyRunResultGroupByRuleCreateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPolicyRunResultGroupByRuleCreate(requestParameters.data, requestParameters.findingDesc, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Policy Run Results
     * @summary List Policy Run Results
     * @param {PolicyApiPolicyPolicyRunResultsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPolicyRunResultsList(requestParameters: PolicyApiPolicyPolicyRunResultsListRequest = {}, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPolicyRunResultsList(requestParameters.tenant, requestParameters.id, requestParameters.policyRunId, requestParameters.severity, requestParameters.scanType, requestParameters.scanFrequency, requestParameters.cloudAccount, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyPolicyRunResultsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPolicyRunResultsRead(requestParameters: PolicyApiPolicyPolicyRunResultsReadRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPolicyRunResultsRead(requestParameters.tenantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyPolicyRunScanCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPolicyRunScanCreate(requestParameters: PolicyApiPolicyPolicyRunScanCreateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPolicyRunScanCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Policy Run Scan History
     * @summary List Policy Run Scan History
     * @param {PolicyApiPolicyPolicyRunScanHistoryListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPolicyRunScanHistoryList(requestParameters: PolicyApiPolicyPolicyRunScanHistoryListRequest = {}, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPolicyRunScanHistoryList(requestParameters.page, requestParameters.pageSize, requestParameters.tenant, requestParameters.scanFrequency, requestParameters.policy, requestParameters.cloudProvider, requestParameters.endDate, requestParameters.repo, requestParameters.scanType, requestParameters.cloudAccount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyPolicyRunScanHistoryPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPolicyRunScanHistoryPartialUpdate(requestParameters: PolicyApiPolicyPolicyRunScanHistoryPartialUpdateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPolicyRunScanHistoryPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyPolicyRunScanHistoryReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPolicyRunScanHistoryRead(requestParameters: PolicyApiPolicyPolicyRunScanHistoryReadRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPolicyRunScanHistoryRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyPolicyRunScanHistoryUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPolicyRunScanHistoryUpdate(requestParameters: PolicyApiPolicyPolicyRunScanHistoryUpdateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPolicyRunScanHistoryUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyPolicyRunScanStatsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPolicyRunScanStatsList(requestParameters: PolicyApiPolicyPolicyRunScanStatsListRequest = {}, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPolicyRunScanStatsList(requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyRepoScanSetupCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyRepoScanSetupCreate(requestParameters: PolicyApiPolicyRepoScanSetupCreateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyRepoScanSetupCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyRepoScanSetupDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyRepoScanSetupDelete(requestParameters: PolicyApiPolicyRepoScanSetupDeleteRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyRepoScanSetupDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Repos
     * @summary List Created Repos
     * @param {PolicyApiPolicyRepoScanSetupListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyRepoScanSetupList(requestParameters: PolicyApiPolicyRepoScanSetupListRequest = {}, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyRepoScanSetupList(requestParameters.page, requestParameters.pageSize, requestParameters.tenant, requestParameters.repoUrl, requestParameters.repoType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyRepoScanSetupPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyRepoScanSetupPartialUpdate(requestParameters: PolicyApiPolicyRepoScanSetupPartialUpdateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyRepoScanSetupPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyRepoScanSetupReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyRepoScanSetupRead(requestParameters: PolicyApiPolicyRepoScanSetupReadRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyRepoScanSetupRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyRepoScanSetupUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyRepoScanSetupUpdate(requestParameters: PolicyApiPolicyRepoScanSetupUpdateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyRepoScanSetupUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyRulesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyRulesCreate(requestParameters: PolicyApiPolicyRulesCreateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyRulesCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Rules
     * @summary List Rules
     * @param {PolicyApiPolicyRulesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyRulesList(requestParameters: PolicyApiPolicyRulesListRequest = {}, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyRulesList(requestParameters.service, requestParameters.name, requestParameters.code, requestParameters.status, requestParameters.ruleType, requestParameters.tenant, requestParameters.severity, requestParameters.cloudProvider, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyRulesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyRulesPartialUpdate(requestParameters: PolicyApiPolicyRulesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyRulesPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyRulesReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyRulesRead(requestParameters: PolicyApiPolicyRulesReadRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyRulesRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyRulesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyRulesUpdate(requestParameters: PolicyApiPolicyRulesUpdateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyRulesUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyTemplatesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyTemplatesList(requestParameters: PolicyApiPolicyTemplatesListRequest = {}, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyTemplatesList(requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyTfCfFileScanCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyTfCfFileScanCreate(requestParameters: PolicyApiPolicyTfCfFileScanCreateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyTfCfFileScanCreate(requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates Policy Rule (Admin)
     * @summary Updates Policy Rules. You can pass an Array as payload
     * @param {PolicyApiPolicyUpdatePolicyRuleUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyUpdatePolicyRuleUpdate(requestParameters: PolicyApiPolicyUpdatePolicyRuleUpdateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyUpdatePolicyRuleUpdate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SystemSettingsApi - axios parameter creator
 * @export
 */
export const SystemSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Aggregates and returns Inventory Count By Region
         * @summary Aggregates and returns Inventory Count By Region
         * @param {AssetCountByRegion} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetInventoryCountByRegionCreate: async (data: AssetCountByRegion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsAssetInventoryCountByRegionCreate', 'data', data)
            const localVarPath = `/system_settings/api/v1/asset_inventory_count_by_region/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Aggregates and returns Inventory By Count Service
         * @summary Aggregates and returns Inventory Count By Service
         * @param {AssetCountByRegion} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetInventoryCountByServiceCreate: async (data: AssetCountByRegion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsAssetInventoryCountByServiceCreate', 'data', data)
            const localVarPath = `/system_settings/api/v1/asset_inventory_count_by_service/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TenantAssetManagement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetManagementsCreate: async (data: TenantAssetManagement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsAssetManagementsCreate', 'data', data)
            const localVarPath = `/system_settings/api/v1/asset_managements/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetManagementsDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsAssetManagementsDelete', 'id', id)
            const localVarPath = `/system_settings/api/v1/asset_managements/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Tenant Assets
         * @summary List Tenant Assets
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [cloudProvider] Filter by Cloud Provider
         * @param {string} [services] Filter by Services
         * @param {number} [cloudAccount] Filter by Cloud Account
         * @param {string} [tags] Filter by Asset Tag (comma-separated list of tag IDs, e.g., \&quot;1,2,3\&quot;)
         * @param {number} [tenant] Filter by Tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetManagementsList: async (page?: number, pageSize?: number, cloudProvider?: string, services?: string, cloudAccount?: number, tags?: string, tenant?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/system_settings/api/v1/asset_managements/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (cloudProvider !== undefined) {
                localVarQueryParameter['cloud_provider'] = cloudProvider;
            }

            if (services !== undefined) {
                localVarQueryParameter['services'] = services;
            }

            if (cloudAccount !== undefined) {
                localVarQueryParameter['cloud_account'] = cloudAccount;
            }

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (tenant !== undefined) {
                localVarQueryParameter['tenant'] = tenant;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {TenantAssetManagement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetManagementsPartialUpdate: async (id: string, data: TenantAssetManagement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsAssetManagementsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsAssetManagementsPartialUpdate', 'data', data)
            const localVarPath = `/system_settings/api/v1/asset_managements/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetManagementsRead: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsAssetManagementsRead', 'id', id)
            const localVarPath = `/system_settings/api/v1/asset_managements/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {TenantAssetManagement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetManagementsUpdate: async (id: string, data: TenantAssetManagement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsAssetManagementsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsAssetManagementsUpdate', 'data', data)
            const localVarPath = `/system_settings/api/v1/asset_managements/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AWSCloudTrailAttributeValue} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAwsCloudtrailAttributeValueCreate: async (data: AWSCloudTrailAttributeValue, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsAwsCloudtrailAttributeValueCreate', 'data', data)
            const localVarPath = `/system_settings/api/v1/aws_cloudtrail_attribute_value/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAwsCloudtrailAttributeValueList: async (page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/system_settings/api/v1/aws_cloudtrail_attribute_value/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this aws cloud trail attribute value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAwsCloudtrailAttributeValueRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsAwsCloudtrailAttributeValueRead', 'id', id)
            const localVarPath = `/system_settings/api/v1/aws_cloudtrail_attribute_value/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CloudTrailFilters} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsCloudTrailFiltersCreate: async (data: CloudTrailFilters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsCloudTrailFiltersCreate', 'data', data)
            const localVarPath = `/system_settings/api/v1/cloud_trail_filters/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List CloudTrail Alarms
         * @summary List CloudTrail Alarms
         * @param {number} [tenant] Filter by Tenant
         * @param {string} [filterPatternType] Filter by Filter Pattern Type (Default or Custom)
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsCloudTrailFiltersList: async (tenant?: number, filterPatternType?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/system_settings/api/v1/cloud_trail_filters/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (tenant !== undefined) {
                localVarQueryParameter['tenant'] = tenant;
            }

            if (filterPatternType !== undefined) {
                localVarQueryParameter['filter_pattern_type'] = filterPatternType;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud trail filters.
         * @param {CloudTrailFilters} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsCloudTrailFiltersPartialUpdate: async (id: number, data: CloudTrailFilters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsCloudTrailFiltersPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsCloudTrailFiltersPartialUpdate', 'data', data)
            const localVarPath = `/system_settings/api/v1/cloud_trail_filters/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud trail filters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsCloudTrailFiltersRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsCloudTrailFiltersRead', 'id', id)
            const localVarPath = `/system_settings/api/v1/cloud_trail_filters/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud trail filters.
         * @param {CloudTrailFilters} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsCloudTrailFiltersUpdate: async (id: number, data: CloudTrailFilters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsCloudTrailFiltersUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsCloudTrailFiltersUpdate', 'data', data)
            const localVarPath = `/system_settings/api/v1/cloud_trail_filters/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CloudTrailSetUp} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsCloudTrailSetupsCreate: async (data: CloudTrailSetUp, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsCloudTrailSetupsCreate', 'data', data)
            const localVarPath = `/system_settings/api/v1/cloud_trail_setups/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List CloudTrail SetUps
         * @summary List CloudTrail Setups
         * @param {number} [cloudProviderAccountId] Filter by Cloud Provider Account ID
         * @param {number} [tenant] Filter by Tenant
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsCloudTrailSetupsList: async (cloudProviderAccountId?: number, tenant?: number, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/system_settings/api/v1/cloud_trail_setups/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (cloudProviderAccountId !== undefined) {
                localVarQueryParameter['cloud_provider_account_id'] = cloudProviderAccountId;
            }

            if (tenant !== undefined) {
                localVarQueryParameter['tenant'] = tenant;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud trail set up.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsCloudTrailSetupsRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsCloudTrailSetupsRead', 'id', id)
            const localVarPath = `/system_settings/api/v1/cloud_trail_setups/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List CloudTrail Events with optional filters
         * @summary List CloudTrail Events
         * @param {number} [log] Filter by Log ID
         * @param {any} [eventTime] Filter by Event Time
         * @param {string} [eventName] Filter by Event Name
         * @param {string} [eventSource] Filter by Event Source
         * @param {string} [awsRegion] Filter by AWS Region
         * @param {string} [sourceIpAddress] Filter by Source IP Address
         * @param {string} [userAgent] Filter by User Agent
         * @param {string} [eventType] Filter by Event Type
         * @param {string} [eventCategory] Filter by Event Category
         * @param {string} [status] Filter by Status
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsCloudtrailEventsList: async (log?: number, eventTime?: any, eventName?: string, eventSource?: string, awsRegion?: string, sourceIpAddress?: string, userAgent?: string, eventType?: string, eventCategory?: string, status?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/system_settings/api/v1/cloudtrail_events/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (log !== undefined) {
                localVarQueryParameter['log'] = log;
            }

            if (eventTime !== undefined) {
                localVarQueryParameter['event_time'] = eventTime;
            }

            if (eventName !== undefined) {
                localVarQueryParameter['event_name'] = eventName;
            }

            if (eventSource !== undefined) {
                localVarQueryParameter['event_source'] = eventSource;
            }

            if (awsRegion !== undefined) {
                localVarQueryParameter['aws_region'] = awsRegion;
            }

            if (sourceIpAddress !== undefined) {
                localVarQueryParameter['source_ip_address'] = sourceIpAddress;
            }

            if (userAgent !== undefined) {
                localVarQueryParameter['user_agent'] = userAgent;
            }

            if (eventType !== undefined) {
                localVarQueryParameter['event_type'] = eventType;
            }

            if (eventCategory !== undefined) {
                localVarQueryParameter['event_category'] = eventCategory;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Cloud Trail Alarm Log history
         * @summary List Cloud Trail Log
         * @param {string} [scanFrequency] Filter result by scan frequency
         * @param {number} [tenant] Filter by Tenant
         * @param {number} [cloudProviderAccountId] Filter by Cloud Provider Account ID
         * @param {number} [fetchStatus] Filter by Fectch Status (PROCESSING, FAILED, COMPLETED, NO DATA)
         * @param {string} [scanLog] Filter By Scan Log
         * @param {any} [createdOn] Filter by Created On Time
         * @param {string} [period] Filter by Period
         * @param {number} [triggeredAlarms] Filter by Triggered Alarms
         * @param {number} [activeAlarms] Filter by Active Alarms
         * @param {any} [eventTime] Filter by Event Time
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsCloudtrailLogsList: async (scanFrequency?: string, tenant?: number, cloudProviderAccountId?: number, fetchStatus?: number, scanLog?: string, createdOn?: any, period?: string, triggeredAlarms?: number, activeAlarms?: number, eventTime?: any, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/system_settings/api/v1/cloudtrail_logs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (scanFrequency !== undefined) {
                localVarQueryParameter['scan_frequency'] = scanFrequency;
            }

            if (tenant !== undefined) {
                localVarQueryParameter['tenant'] = tenant;
            }

            if (cloudProviderAccountId !== undefined) {
                localVarQueryParameter['cloud_provider_account_id'] = cloudProviderAccountId;
            }

            if (fetchStatus !== undefined) {
                localVarQueryParameter['fetch_status'] = fetchStatus;
            }

            if (scanLog !== undefined) {
                localVarQueryParameter['scan_log'] = scanLog;
            }

            if (createdOn !== undefined) {
                localVarQueryParameter['created_on'] = createdOn;
            }

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }

            if (triggeredAlarms !== undefined) {
                localVarQueryParameter['triggered_alarms'] = triggeredAlarms;
            }

            if (activeAlarms !== undefined) {
                localVarQueryParameter['active_alarms'] = activeAlarms;
            }

            if (eventTime !== undefined) {
                localVarQueryParameter['event_time'] = eventTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Region} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegionsCreate: async (data: Region, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsRegionsCreate', 'data', data)
            const localVarPath = `/system_settings/api/v1/regions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Regions
         * @summary List Regions
         * @param {string} [cloudProvider] Filter by Cloud Provider
         * @param {string} [regionName] Filter by Region Name
         * @param {string} [search] A search term.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegionsList: async (cloudProvider?: string, regionName?: string, search?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/system_settings/api/v1/regions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (cloudProvider !== undefined) {
                localVarQueryParameter['cloud_provider'] = cloudProvider;
            }

            if (regionName !== undefined) {
                localVarQueryParameter['region_name'] = regionName;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this region.
         * @param {Region} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegionsPartialUpdate: async (id: number, data: Region, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsRegionsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsRegionsPartialUpdate', 'data', data)
            const localVarPath = `/system_settings/api/v1/regions/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this region.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegionsRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsRegionsRead', 'id', id)
            const localVarPath = `/system_settings/api/v1/regions/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this region.
         * @param {Region} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegionsUpdate: async (id: number, data: Region, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsRegionsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsRegionsUpdate', 'data', data)
            const localVarPath = `/system_settings/api/v1/regions/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List RuleSuppression Log
         * @summary List RuleSuppression Log
         * @param {number} [tenant] Filter by Tenant
         * @param {string} [comments] Filter by Comment
         * @param {any} [expiration] Filter by Expiration
         * @param {any} [createdOn] Filter by Created On
         * @param {string} [severity] Filter by Severity (High, Medium, Low)
         * @param {number} [suppressedBy] Filter by Suppressed_by User
         * @param {string} [resourceId] Filter by Resource ID
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleSuppressionLogList: async (tenant?: number, comments?: string, expiration?: any, createdOn?: any, severity?: string, suppressedBy?: number, resourceId?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/system_settings/api/v1/rule_suppression_log/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (tenant !== undefined) {
                localVarQueryParameter['tenant'] = tenant;
            }

            if (comments !== undefined) {
                localVarQueryParameter['comments'] = comments;
            }

            if (expiration !== undefined) {
                localVarQueryParameter['expiration'] = expiration;
            }

            if (createdOn !== undefined) {
                localVarQueryParameter['created_on'] = createdOn;
            }

            if (severity !== undefined) {
                localVarQueryParameter['severity'] = severity;
            }

            if (suppressedBy !== undefined) {
                localVarQueryParameter['suppressed_by'] = suppressedBy;
            }

            if (resourceId !== undefined) {
                localVarQueryParameter['resource_id'] = resourceId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule suppression log.
         * @param {RuleSuppressionLog} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleSuppressionLogPartialUpdate: async (id: number, data: RuleSuppressionLog, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsRuleSuppressionLogPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsRuleSuppressionLogPartialUpdate', 'data', data)
            const localVarPath = `/system_settings/api/v1/rule_suppression_log/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule suppression log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleSuppressionLogRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsRuleSuppressionLogRead', 'id', id)
            const localVarPath = `/system_settings/api/v1/rule_suppression_log/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule suppression log.
         * @param {RuleSuppressionLog} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleSuppressionLogUpdate: async (id: number, data: RuleSuppressionLog, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsRuleSuppressionLogUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsRuleSuppressionLogUpdate', 'data', data)
            const localVarPath = `/system_settings/api/v1/rule_suppression_log/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateRuleSuppressionSetUp} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleSuppressionSetupCreate: async (data: CreateRuleSuppressionSetUp, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsRuleSuppressionSetupCreate', 'data', data)
            const localVarPath = `/system_settings/api/v1/rule_suppression_setup/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleSuppressionSetupDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsRuleSuppressionSetupDelete', 'id', id)
            const localVarPath = `/system_settings/api/v1/rule_suppression_setup/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Suppression SetUps
         * @summary List Suppression Setups
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [tenant] Filter by Tenant
         * @param {boolean} [status] Filter by Status
         * @param {string} [region] Filter by Region
         * @param {number} [cloudProvider] Filter by Cloud Provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleSuppressionSetupList: async (page?: number, pageSize?: number, tenant?: number, status?: boolean, region?: string, cloudProvider?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/system_settings/api/v1/rule_suppression_setup/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (tenant !== undefined) {
                localVarQueryParameter['tenant'] = tenant;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            if (cloudProvider !== undefined) {
                localVarQueryParameter['cloud_provider'] = cloudProvider;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateRuleSuppressionSetUp} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleSuppressionSetupPartialUpdate: async (id: string, data: CreateRuleSuppressionSetUp, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsRuleSuppressionSetupPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsRuleSuppressionSetupPartialUpdate', 'data', data)
            const localVarPath = `/system_settings/api/v1/rule_suppression_setup/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleSuppressionSetupRead: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsRuleSuppressionSetupRead', 'id', id)
            const localVarPath = `/system_settings/api/v1/rule_suppression_setup/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateRuleSuppressionSetUp} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleSuppressionSetupUpdate: async (id: string, data: CreateRuleSuppressionSetUp, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsRuleSuppressionSetupUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsRuleSuppressionSetupUpdate', 'data', data)
            const localVarPath = `/system_settings/api/v1/rule_suppression_setup/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SystemSetting} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsSystemSettingsCreate: async (data: SystemSetting, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsSystemSettingsCreate', 'data', data)
            const localVarPath = `/system_settings/api/v1/system_settings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsSystemSettingsList: async (page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/system_settings/api/v1/system_settings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system setting.
         * @param {SystemSetting} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsSystemSettingsPartialUpdate: async (id: number, data: SystemSetting, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsSystemSettingsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsSystemSettingsPartialUpdate', 'data', data)
            const localVarPath = `/system_settings/api/v1/system_settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsSystemSettingsRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsSystemSettingsRead', 'id', id)
            const localVarPath = `/system_settings/api/v1/system_settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system setting.
         * @param {SystemSetting} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsSystemSettingsUpdate: async (id: number, data: SystemSetting, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsSystemSettingsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsSystemSettingsUpdate', 'data', data)
            const localVarPath = `/system_settings/api/v1/system_settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsTagsCreate: async (data: Tag, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsTagsCreate', 'data', data)
            const localVarPath = `/system_settings/api/v1/tags/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsTagsDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsTagsDelete', 'id', id)
            const localVarPath = `/system_settings/api/v1/tags/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Tenant Tags
         * @summary List Tenant Tags
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [tenant] Filter by Tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsTagsList: async (page?: number, pageSize?: number, tenant?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/system_settings/api/v1/tags/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (tenant !== undefined) {
                localVarQueryParameter['tenant'] = tenant;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsTagsPartialUpdate: async (id: string, data: Tag, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsTagsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsTagsPartialUpdate', 'data', data)
            const localVarPath = `/system_settings/api/v1/tags/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsTagsRead: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsTagsRead', 'id', id)
            const localVarPath = `/system_settings/api/v1/tags/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsTagsUpdate: async (id: string, data: Tag, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsTagsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsTagsUpdate', 'data', data)
            const localVarPath = `/system_settings/api/v1/tags/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateCloudEventStatus} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsUpdateCloudEventStatusCreate: async (data: UpdateCloudEventStatus, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsUpdateCloudEventStatusCreate', 'data', data)
            const localVarPath = `/system_settings/api/v1/update_cloud_event_status/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemSettingsApi - functional programming interface
 * @export
 */
export const SystemSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Aggregates and returns Inventory Count By Region
         * @summary Aggregates and returns Inventory Count By Region
         * @param {AssetCountByRegion} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsAssetInventoryCountByRegionCreate(data: AssetCountByRegion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetCountByRegion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsAssetInventoryCountByRegionCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Aggregates and returns Inventory By Count Service
         * @summary Aggregates and returns Inventory Count By Service
         * @param {AssetCountByRegion} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsAssetInventoryCountByServiceCreate(data: AssetCountByRegion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetCountByRegion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsAssetInventoryCountByServiceCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TenantAssetManagement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsAssetManagementsCreate(data: TenantAssetManagement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantAssetManagement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsAssetManagementsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsAssetManagementsDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsAssetManagementsDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Tenant Assets
         * @summary List Tenant Assets
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [cloudProvider] Filter by Cloud Provider
         * @param {string} [services] Filter by Services
         * @param {number} [cloudAccount] Filter by Cloud Account
         * @param {string} [tags] Filter by Asset Tag (comma-separated list of tag IDs, e.g., \&quot;1,2,3\&quot;)
         * @param {number} [tenant] Filter by Tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsAssetManagementsList(page?: number, pageSize?: number, cloudProvider?: string, services?: string, cloudAccount?: number, tags?: string, tenant?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSettingsAssetManagementsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsAssetManagementsList(page, pageSize, cloudProvider, services, cloudAccount, tags, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {TenantAssetManagement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsAssetManagementsPartialUpdate(id: string, data: TenantAssetManagement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantAssetManagement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsAssetManagementsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsAssetManagementsRead(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantAssetManagement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsAssetManagementsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {TenantAssetManagement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsAssetManagementsUpdate(id: string, data: TenantAssetManagement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantAssetManagement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsAssetManagementsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AWSCloudTrailAttributeValue} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsAwsCloudtrailAttributeValueCreate(data: AWSCloudTrailAttributeValue, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AWSCloudTrailAttributeValue>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsAwsCloudtrailAttributeValueCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsAwsCloudtrailAttributeValueList(page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSettingsAwsCloudtrailAttributeValueList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsAwsCloudtrailAttributeValueList(page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this aws cloud trail attribute value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsAwsCloudtrailAttributeValueRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AWSCloudTrailAttributeValue>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsAwsCloudtrailAttributeValueRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CloudTrailFilters} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsCloudTrailFiltersCreate(data: CloudTrailFilters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudTrailFilters>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsCloudTrailFiltersCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List CloudTrail Alarms
         * @summary List CloudTrail Alarms
         * @param {number} [tenant] Filter by Tenant
         * @param {string} [filterPatternType] Filter by Filter Pattern Type (Default or Custom)
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsCloudTrailFiltersList(tenant?: number, filterPatternType?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSettingsCloudTrailFiltersList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsCloudTrailFiltersList(tenant, filterPatternType, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud trail filters.
         * @param {CloudTrailFilters} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsCloudTrailFiltersPartialUpdate(id: number, data: CloudTrailFilters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudTrailFilters>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsCloudTrailFiltersPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud trail filters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsCloudTrailFiltersRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudTrailFilters>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsCloudTrailFiltersRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud trail filters.
         * @param {CloudTrailFilters} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsCloudTrailFiltersUpdate(id: number, data: CloudTrailFilters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudTrailFilters>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsCloudTrailFiltersUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CloudTrailSetUp} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsCloudTrailSetupsCreate(data: CloudTrailSetUp, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudTrailSetUp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsCloudTrailSetupsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List CloudTrail SetUps
         * @summary List CloudTrail Setups
         * @param {number} [cloudProviderAccountId] Filter by Cloud Provider Account ID
         * @param {number} [tenant] Filter by Tenant
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsCloudTrailSetupsList(cloudProviderAccountId?: number, tenant?: number, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSettingsCloudTrailSetupsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsCloudTrailSetupsList(cloudProviderAccountId, tenant, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud trail set up.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsCloudTrailSetupsRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudTrailSetUpList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsCloudTrailSetupsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List CloudTrail Events with optional filters
         * @summary List CloudTrail Events
         * @param {number} [log] Filter by Log ID
         * @param {any} [eventTime] Filter by Event Time
         * @param {string} [eventName] Filter by Event Name
         * @param {string} [eventSource] Filter by Event Source
         * @param {string} [awsRegion] Filter by AWS Region
         * @param {string} [sourceIpAddress] Filter by Source IP Address
         * @param {string} [userAgent] Filter by User Agent
         * @param {string} [eventType] Filter by Event Type
         * @param {string} [eventCategory] Filter by Event Category
         * @param {string} [status] Filter by Status
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsCloudtrailEventsList(log?: number, eventTime?: any, eventName?: string, eventSource?: string, awsRegion?: string, sourceIpAddress?: string, userAgent?: string, eventType?: string, eventCategory?: string, status?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSettingsCloudtrailEventsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsCloudtrailEventsList(log, eventTime, eventName, eventSource, awsRegion, sourceIpAddress, userAgent, eventType, eventCategory, status, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Cloud Trail Alarm Log history
         * @summary List Cloud Trail Log
         * @param {string} [scanFrequency] Filter result by scan frequency
         * @param {number} [tenant] Filter by Tenant
         * @param {number} [cloudProviderAccountId] Filter by Cloud Provider Account ID
         * @param {number} [fetchStatus] Filter by Fectch Status (PROCESSING, FAILED, COMPLETED, NO DATA)
         * @param {string} [scanLog] Filter By Scan Log
         * @param {any} [createdOn] Filter by Created On Time
         * @param {string} [period] Filter by Period
         * @param {number} [triggeredAlarms] Filter by Triggered Alarms
         * @param {number} [activeAlarms] Filter by Active Alarms
         * @param {any} [eventTime] Filter by Event Time
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsCloudtrailLogsList(scanFrequency?: string, tenant?: number, cloudProviderAccountId?: number, fetchStatus?: number, scanLog?: string, createdOn?: any, period?: string, triggeredAlarms?: number, activeAlarms?: number, eventTime?: any, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSettingsCloudtrailLogsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsCloudtrailLogsList(scanFrequency, tenant, cloudProviderAccountId, fetchStatus, scanLog, createdOn, period, triggeredAlarms, activeAlarms, eventTime, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Region} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRegionsCreate(data: Region, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Region>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRegionsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Regions
         * @summary List Regions
         * @param {string} [cloudProvider] Filter by Cloud Provider
         * @param {string} [regionName] Filter by Region Name
         * @param {string} [search] A search term.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRegionsList(cloudProvider?: string, regionName?: string, search?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSettingsRegionsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRegionsList(cloudProvider, regionName, search, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this region.
         * @param {Region} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRegionsPartialUpdate(id: number, data: Region, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Region>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRegionsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this region.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRegionsRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Region>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRegionsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this region.
         * @param {Region} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRegionsUpdate(id: number, data: Region, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Region>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRegionsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List RuleSuppression Log
         * @summary List RuleSuppression Log
         * @param {number} [tenant] Filter by Tenant
         * @param {string} [comments] Filter by Comment
         * @param {any} [expiration] Filter by Expiration
         * @param {any} [createdOn] Filter by Created On
         * @param {string} [severity] Filter by Severity (High, Medium, Low)
         * @param {number} [suppressedBy] Filter by Suppressed_by User
         * @param {string} [resourceId] Filter by Resource ID
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRuleSuppressionLogList(tenant?: number, comments?: string, expiration?: any, createdOn?: any, severity?: string, suppressedBy?: number, resourceId?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSettingsRuleSuppressionLogList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRuleSuppressionLogList(tenant, comments, expiration, createdOn, severity, suppressedBy, resourceId, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule suppression log.
         * @param {RuleSuppressionLog} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRuleSuppressionLogPartialUpdate(id: number, data: RuleSuppressionLog, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RuleSuppressionLog>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRuleSuppressionLogPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule suppression log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRuleSuppressionLogRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RuleSuppressionLog>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRuleSuppressionLogRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule suppression log.
         * @param {RuleSuppressionLog} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRuleSuppressionLogUpdate(id: number, data: RuleSuppressionLog, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RuleSuppressionLog>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRuleSuppressionLogUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateRuleSuppressionSetUp} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRuleSuppressionSetupCreate(data: CreateRuleSuppressionSetUp, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateRuleSuppressionSetUp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRuleSuppressionSetupCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRuleSuppressionSetupDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRuleSuppressionSetupDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Suppression SetUps
         * @summary List Suppression Setups
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [tenant] Filter by Tenant
         * @param {boolean} [status] Filter by Status
         * @param {string} [region] Filter by Region
         * @param {number} [cloudProvider] Filter by Cloud Provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRuleSuppressionSetupList(page?: number, pageSize?: number, tenant?: number, status?: boolean, region?: string, cloudProvider?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSettingsRuleSuppressionSetupList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRuleSuppressionSetupList(page, pageSize, tenant, status, region, cloudProvider, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateRuleSuppressionSetUp} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRuleSuppressionSetupPartialUpdate(id: string, data: CreateRuleSuppressionSetUp, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateRuleSuppressionSetUp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRuleSuppressionSetupPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRuleSuppressionSetupRead(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReadRuleSuppressionSetUp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRuleSuppressionSetupRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateRuleSuppressionSetUp} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRuleSuppressionSetupUpdate(id: string, data: CreateRuleSuppressionSetUp, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateRuleSuppressionSetUp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRuleSuppressionSetupUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SystemSetting} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsSystemSettingsCreate(data: SystemSetting, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSetting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsSystemSettingsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsSystemSettingsList(page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSettingsSystemSettingsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsSystemSettingsList(page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system setting.
         * @param {SystemSetting} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsSystemSettingsPartialUpdate(id: number, data: SystemSetting, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSetting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsSystemSettingsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsSystemSettingsRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSetting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsSystemSettingsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system setting.
         * @param {SystemSetting} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsSystemSettingsUpdate(id: number, data: SystemSetting, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSetting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsSystemSettingsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsTagsCreate(data: Tag, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsTagsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsTagsDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsTagsDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Tenant Tags
         * @summary List Tenant Tags
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [tenant] Filter by Tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsTagsList(page?: number, pageSize?: number, tenant?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSettingsTagsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsTagsList(page, pageSize, tenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsTagsPartialUpdate(id: string, data: Tag, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsTagsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsTagsRead(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsTagsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsTagsUpdate(id: string, data: Tag, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsTagsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateCloudEventStatus} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsUpdateCloudEventStatusCreate(data: UpdateCloudEventStatus, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateCloudEventStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsUpdateCloudEventStatusCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SystemSettingsApi - factory interface
 * @export
 */
export const SystemSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemSettingsApiFp(configuration)
    return {
        /**
         * Aggregates and returns Inventory Count By Region
         * @summary Aggregates and returns Inventory Count By Region
         * @param {AssetCountByRegion} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetInventoryCountByRegionCreate(data: AssetCountByRegion, options?: any): AxiosPromise<AssetCountByRegion> {
            return localVarFp.systemSettingsAssetInventoryCountByRegionCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Aggregates and returns Inventory By Count Service
         * @summary Aggregates and returns Inventory Count By Service
         * @param {AssetCountByRegion} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetInventoryCountByServiceCreate(data: AssetCountByRegion, options?: any): AxiosPromise<AssetCountByRegion> {
            return localVarFp.systemSettingsAssetInventoryCountByServiceCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TenantAssetManagement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetManagementsCreate(data: TenantAssetManagement, options?: any): AxiosPromise<TenantAssetManagement> {
            return localVarFp.systemSettingsAssetManagementsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetManagementsDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.systemSettingsAssetManagementsDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * List Tenant Assets
         * @summary List Tenant Assets
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [cloudProvider] Filter by Cloud Provider
         * @param {string} [services] Filter by Services
         * @param {number} [cloudAccount] Filter by Cloud Account
         * @param {string} [tags] Filter by Asset Tag (comma-separated list of tag IDs, e.g., \&quot;1,2,3\&quot;)
         * @param {number} [tenant] Filter by Tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetManagementsList(page?: number, pageSize?: number, cloudProvider?: string, services?: string, cloudAccount?: number, tags?: string, tenant?: number, options?: any): AxiosPromise<SystemSettingsAssetManagementsList200Response> {
            return localVarFp.systemSettingsAssetManagementsList(page, pageSize, cloudProvider, services, cloudAccount, tags, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {TenantAssetManagement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetManagementsPartialUpdate(id: string, data: TenantAssetManagement, options?: any): AxiosPromise<TenantAssetManagement> {
            return localVarFp.systemSettingsAssetManagementsPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetManagementsRead(id: string, options?: any): AxiosPromise<TenantAssetManagement> {
            return localVarFp.systemSettingsAssetManagementsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {TenantAssetManagement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetManagementsUpdate(id: string, data: TenantAssetManagement, options?: any): AxiosPromise<TenantAssetManagement> {
            return localVarFp.systemSettingsAssetManagementsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AWSCloudTrailAttributeValue} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAwsCloudtrailAttributeValueCreate(data: AWSCloudTrailAttributeValue, options?: any): AxiosPromise<AWSCloudTrailAttributeValue> {
            return localVarFp.systemSettingsAwsCloudtrailAttributeValueCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAwsCloudtrailAttributeValueList(page?: number, pageSize?: number, options?: any): AxiosPromise<SystemSettingsAwsCloudtrailAttributeValueList200Response> {
            return localVarFp.systemSettingsAwsCloudtrailAttributeValueList(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this aws cloud trail attribute value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAwsCloudtrailAttributeValueRead(id: number, options?: any): AxiosPromise<AWSCloudTrailAttributeValue> {
            return localVarFp.systemSettingsAwsCloudtrailAttributeValueRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CloudTrailFilters} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsCloudTrailFiltersCreate(data: CloudTrailFilters, options?: any): AxiosPromise<CloudTrailFilters> {
            return localVarFp.systemSettingsCloudTrailFiltersCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * List CloudTrail Alarms
         * @summary List CloudTrail Alarms
         * @param {number} [tenant] Filter by Tenant
         * @param {string} [filterPatternType] Filter by Filter Pattern Type (Default or Custom)
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsCloudTrailFiltersList(tenant?: number, filterPatternType?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<SystemSettingsCloudTrailFiltersList200Response> {
            return localVarFp.systemSettingsCloudTrailFiltersList(tenant, filterPatternType, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud trail filters.
         * @param {CloudTrailFilters} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsCloudTrailFiltersPartialUpdate(id: number, data: CloudTrailFilters, options?: any): AxiosPromise<CloudTrailFilters> {
            return localVarFp.systemSettingsCloudTrailFiltersPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud trail filters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsCloudTrailFiltersRead(id: number, options?: any): AxiosPromise<CloudTrailFilters> {
            return localVarFp.systemSettingsCloudTrailFiltersRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud trail filters.
         * @param {CloudTrailFilters} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsCloudTrailFiltersUpdate(id: number, data: CloudTrailFilters, options?: any): AxiosPromise<CloudTrailFilters> {
            return localVarFp.systemSettingsCloudTrailFiltersUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CloudTrailSetUp} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsCloudTrailSetupsCreate(data: CloudTrailSetUp, options?: any): AxiosPromise<CloudTrailSetUp> {
            return localVarFp.systemSettingsCloudTrailSetupsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * List CloudTrail SetUps
         * @summary List CloudTrail Setups
         * @param {number} [cloudProviderAccountId] Filter by Cloud Provider Account ID
         * @param {number} [tenant] Filter by Tenant
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsCloudTrailSetupsList(cloudProviderAccountId?: number, tenant?: number, page?: number, pageSize?: number, options?: any): AxiosPromise<SystemSettingsCloudTrailSetupsList200Response> {
            return localVarFp.systemSettingsCloudTrailSetupsList(cloudProviderAccountId, tenant, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this cloud trail set up.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsCloudTrailSetupsRead(id: number, options?: any): AxiosPromise<CloudTrailSetUpList> {
            return localVarFp.systemSettingsCloudTrailSetupsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * List CloudTrail Events with optional filters
         * @summary List CloudTrail Events
         * @param {number} [log] Filter by Log ID
         * @param {any} [eventTime] Filter by Event Time
         * @param {string} [eventName] Filter by Event Name
         * @param {string} [eventSource] Filter by Event Source
         * @param {string} [awsRegion] Filter by AWS Region
         * @param {string} [sourceIpAddress] Filter by Source IP Address
         * @param {string} [userAgent] Filter by User Agent
         * @param {string} [eventType] Filter by Event Type
         * @param {string} [eventCategory] Filter by Event Category
         * @param {string} [status] Filter by Status
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsCloudtrailEventsList(log?: number, eventTime?: any, eventName?: string, eventSource?: string, awsRegion?: string, sourceIpAddress?: string, userAgent?: string, eventType?: string, eventCategory?: string, status?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<SystemSettingsCloudtrailEventsList200Response> {
            return localVarFp.systemSettingsCloudtrailEventsList(log, eventTime, eventName, eventSource, awsRegion, sourceIpAddress, userAgent, eventType, eventCategory, status, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * List Cloud Trail Alarm Log history
         * @summary List Cloud Trail Log
         * @param {string} [scanFrequency] Filter result by scan frequency
         * @param {number} [tenant] Filter by Tenant
         * @param {number} [cloudProviderAccountId] Filter by Cloud Provider Account ID
         * @param {number} [fetchStatus] Filter by Fectch Status (PROCESSING, FAILED, COMPLETED, NO DATA)
         * @param {string} [scanLog] Filter By Scan Log
         * @param {any} [createdOn] Filter by Created On Time
         * @param {string} [period] Filter by Period
         * @param {number} [triggeredAlarms] Filter by Triggered Alarms
         * @param {number} [activeAlarms] Filter by Active Alarms
         * @param {any} [eventTime] Filter by Event Time
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsCloudtrailLogsList(scanFrequency?: string, tenant?: number, cloudProviderAccountId?: number, fetchStatus?: number, scanLog?: string, createdOn?: any, period?: string, triggeredAlarms?: number, activeAlarms?: number, eventTime?: any, page?: number, pageSize?: number, options?: any): AxiosPromise<SystemSettingsCloudtrailLogsList200Response> {
            return localVarFp.systemSettingsCloudtrailLogsList(scanFrequency, tenant, cloudProviderAccountId, fetchStatus, scanLog, createdOn, period, triggeredAlarms, activeAlarms, eventTime, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Region} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegionsCreate(data: Region, options?: any): AxiosPromise<Region> {
            return localVarFp.systemSettingsRegionsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * List Regions
         * @summary List Regions
         * @param {string} [cloudProvider] Filter by Cloud Provider
         * @param {string} [regionName] Filter by Region Name
         * @param {string} [search] A search term.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegionsList(cloudProvider?: string, regionName?: string, search?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<SystemSettingsRegionsList200Response> {
            return localVarFp.systemSettingsRegionsList(cloudProvider, regionName, search, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this region.
         * @param {Region} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegionsPartialUpdate(id: number, data: Region, options?: any): AxiosPromise<Region> {
            return localVarFp.systemSettingsRegionsPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this region.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegionsRead(id: number, options?: any): AxiosPromise<Region> {
            return localVarFp.systemSettingsRegionsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this region.
         * @param {Region} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegionsUpdate(id: number, data: Region, options?: any): AxiosPromise<Region> {
            return localVarFp.systemSettingsRegionsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * List RuleSuppression Log
         * @summary List RuleSuppression Log
         * @param {number} [tenant] Filter by Tenant
         * @param {string} [comments] Filter by Comment
         * @param {any} [expiration] Filter by Expiration
         * @param {any} [createdOn] Filter by Created On
         * @param {string} [severity] Filter by Severity (High, Medium, Low)
         * @param {number} [suppressedBy] Filter by Suppressed_by User
         * @param {string} [resourceId] Filter by Resource ID
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleSuppressionLogList(tenant?: number, comments?: string, expiration?: any, createdOn?: any, severity?: string, suppressedBy?: number, resourceId?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<SystemSettingsRuleSuppressionLogList200Response> {
            return localVarFp.systemSettingsRuleSuppressionLogList(tenant, comments, expiration, createdOn, severity, suppressedBy, resourceId, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule suppression log.
         * @param {RuleSuppressionLog} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleSuppressionLogPartialUpdate(id: number, data: RuleSuppressionLog, options?: any): AxiosPromise<RuleSuppressionLog> {
            return localVarFp.systemSettingsRuleSuppressionLogPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule suppression log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleSuppressionLogRead(id: number, options?: any): AxiosPromise<RuleSuppressionLog> {
            return localVarFp.systemSettingsRuleSuppressionLogRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule suppression log.
         * @param {RuleSuppressionLog} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleSuppressionLogUpdate(id: number, data: RuleSuppressionLog, options?: any): AxiosPromise<RuleSuppressionLog> {
            return localVarFp.systemSettingsRuleSuppressionLogUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateRuleSuppressionSetUp} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleSuppressionSetupCreate(data: CreateRuleSuppressionSetUp, options?: any): AxiosPromise<CreateRuleSuppressionSetUp> {
            return localVarFp.systemSettingsRuleSuppressionSetupCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleSuppressionSetupDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.systemSettingsRuleSuppressionSetupDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * List Suppression SetUps
         * @summary List Suppression Setups
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [tenant] Filter by Tenant
         * @param {boolean} [status] Filter by Status
         * @param {string} [region] Filter by Region
         * @param {number} [cloudProvider] Filter by Cloud Provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleSuppressionSetupList(page?: number, pageSize?: number, tenant?: number, status?: boolean, region?: string, cloudProvider?: number, options?: any): AxiosPromise<SystemSettingsRuleSuppressionSetupList200Response> {
            return localVarFp.systemSettingsRuleSuppressionSetupList(page, pageSize, tenant, status, region, cloudProvider, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateRuleSuppressionSetUp} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleSuppressionSetupPartialUpdate(id: string, data: CreateRuleSuppressionSetUp, options?: any): AxiosPromise<CreateRuleSuppressionSetUp> {
            return localVarFp.systemSettingsRuleSuppressionSetupPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleSuppressionSetupRead(id: string, options?: any): AxiosPromise<ReadRuleSuppressionSetUp> {
            return localVarFp.systemSettingsRuleSuppressionSetupRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateRuleSuppressionSetUp} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleSuppressionSetupUpdate(id: string, data: CreateRuleSuppressionSetUp, options?: any): AxiosPromise<CreateRuleSuppressionSetUp> {
            return localVarFp.systemSettingsRuleSuppressionSetupUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SystemSetting} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsSystemSettingsCreate(data: SystemSetting, options?: any): AxiosPromise<SystemSetting> {
            return localVarFp.systemSettingsSystemSettingsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsSystemSettingsList(page?: number, pageSize?: number, options?: any): AxiosPromise<SystemSettingsSystemSettingsList200Response> {
            return localVarFp.systemSettingsSystemSettingsList(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system setting.
         * @param {SystemSetting} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsSystemSettingsPartialUpdate(id: number, data: SystemSetting, options?: any): AxiosPromise<SystemSetting> {
            return localVarFp.systemSettingsSystemSettingsPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsSystemSettingsRead(id: number, options?: any): AxiosPromise<SystemSetting> {
            return localVarFp.systemSettingsSystemSettingsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system setting.
         * @param {SystemSetting} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsSystemSettingsUpdate(id: number, data: SystemSetting, options?: any): AxiosPromise<SystemSetting> {
            return localVarFp.systemSettingsSystemSettingsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsTagsCreate(data: Tag, options?: any): AxiosPromise<Tag> {
            return localVarFp.systemSettingsTagsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsTagsDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.systemSettingsTagsDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * List Tenant Tags
         * @summary List Tenant Tags
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [tenant] Filter by Tenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsTagsList(page?: number, pageSize?: number, tenant?: number, options?: any): AxiosPromise<SystemSettingsTagsList200Response> {
            return localVarFp.systemSettingsTagsList(page, pageSize, tenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsTagsPartialUpdate(id: string, data: Tag, options?: any): AxiosPromise<Tag> {
            return localVarFp.systemSettingsTagsPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsTagsRead(id: string, options?: any): AxiosPromise<Tag> {
            return localVarFp.systemSettingsTagsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {Tag} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsTagsUpdate(id: string, data: Tag, options?: any): AxiosPromise<Tag> {
            return localVarFp.systemSettingsTagsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateCloudEventStatus} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsUpdateCloudEventStatusCreate(data: UpdateCloudEventStatus, options?: any): AxiosPromise<UpdateCloudEventStatus> {
            return localVarFp.systemSettingsUpdateCloudEventStatusCreate(data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for systemSettingsAssetInventoryCountByRegionCreate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsAssetInventoryCountByRegionCreateRequest
 */
export interface SystemSettingsApiSystemSettingsAssetInventoryCountByRegionCreateRequest {
    /**
     * 
     * @type {AssetCountByRegion}
     * @memberof SystemSettingsApiSystemSettingsAssetInventoryCountByRegionCreate
     */
    readonly data: AssetCountByRegion
}

/**
 * Request parameters for systemSettingsAssetInventoryCountByServiceCreate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsAssetInventoryCountByServiceCreateRequest
 */
export interface SystemSettingsApiSystemSettingsAssetInventoryCountByServiceCreateRequest {
    /**
     * 
     * @type {AssetCountByRegion}
     * @memberof SystemSettingsApiSystemSettingsAssetInventoryCountByServiceCreate
     */
    readonly data: AssetCountByRegion
}

/**
 * Request parameters for systemSettingsAssetManagementsCreate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsAssetManagementsCreateRequest
 */
export interface SystemSettingsApiSystemSettingsAssetManagementsCreateRequest {
    /**
     * 
     * @type {TenantAssetManagement}
     * @memberof SystemSettingsApiSystemSettingsAssetManagementsCreate
     */
    readonly data: TenantAssetManagement
}

/**
 * Request parameters for systemSettingsAssetManagementsDelete operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsAssetManagementsDeleteRequest
 */
export interface SystemSettingsApiSystemSettingsAssetManagementsDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsAssetManagementsDelete
     */
    readonly id: string
}

/**
 * Request parameters for systemSettingsAssetManagementsList operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsAssetManagementsListRequest
 */
export interface SystemSettingsApiSystemSettingsAssetManagementsListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsAssetManagementsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsAssetManagementsList
     */
    readonly pageSize?: number

    /**
     * Filter by Cloud Provider
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsAssetManagementsList
     */
    readonly cloudProvider?: string

    /**
     * Filter by Services
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsAssetManagementsList
     */
    readonly services?: string

    /**
     * Filter by Cloud Account
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsAssetManagementsList
     */
    readonly cloudAccount?: number

    /**
     * Filter by Asset Tag (comma-separated list of tag IDs, e.g., \&quot;1,2,3\&quot;)
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsAssetManagementsList
     */
    readonly tags?: string

    /**
     * Filter by Tenant
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsAssetManagementsList
     */
    readonly tenant?: number
}

/**
 * Request parameters for systemSettingsAssetManagementsPartialUpdate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsAssetManagementsPartialUpdateRequest
 */
export interface SystemSettingsApiSystemSettingsAssetManagementsPartialUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsAssetManagementsPartialUpdate
     */
    readonly id: string

    /**
     * 
     * @type {TenantAssetManagement}
     * @memberof SystemSettingsApiSystemSettingsAssetManagementsPartialUpdate
     */
    readonly data: TenantAssetManagement
}

/**
 * Request parameters for systemSettingsAssetManagementsRead operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsAssetManagementsReadRequest
 */
export interface SystemSettingsApiSystemSettingsAssetManagementsReadRequest {
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsAssetManagementsRead
     */
    readonly id: string
}

/**
 * Request parameters for systemSettingsAssetManagementsUpdate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsAssetManagementsUpdateRequest
 */
export interface SystemSettingsApiSystemSettingsAssetManagementsUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsAssetManagementsUpdate
     */
    readonly id: string

    /**
     * 
     * @type {TenantAssetManagement}
     * @memberof SystemSettingsApiSystemSettingsAssetManagementsUpdate
     */
    readonly data: TenantAssetManagement
}

/**
 * Request parameters for systemSettingsAwsCloudtrailAttributeValueCreate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsAwsCloudtrailAttributeValueCreateRequest
 */
export interface SystemSettingsApiSystemSettingsAwsCloudtrailAttributeValueCreateRequest {
    /**
     * 
     * @type {AWSCloudTrailAttributeValue}
     * @memberof SystemSettingsApiSystemSettingsAwsCloudtrailAttributeValueCreate
     */
    readonly data: AWSCloudTrailAttributeValue
}

/**
 * Request parameters for systemSettingsAwsCloudtrailAttributeValueList operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsAwsCloudtrailAttributeValueListRequest
 */
export interface SystemSettingsApiSystemSettingsAwsCloudtrailAttributeValueListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsAwsCloudtrailAttributeValueList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsAwsCloudtrailAttributeValueList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for systemSettingsAwsCloudtrailAttributeValueRead operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsAwsCloudtrailAttributeValueReadRequest
 */
export interface SystemSettingsApiSystemSettingsAwsCloudtrailAttributeValueReadRequest {
    /**
     * A unique integer value identifying this aws cloud trail attribute value.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsAwsCloudtrailAttributeValueRead
     */
    readonly id: number
}

/**
 * Request parameters for systemSettingsCloudTrailFiltersCreate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsCloudTrailFiltersCreateRequest
 */
export interface SystemSettingsApiSystemSettingsCloudTrailFiltersCreateRequest {
    /**
     * 
     * @type {CloudTrailFilters}
     * @memberof SystemSettingsApiSystemSettingsCloudTrailFiltersCreate
     */
    readonly data: CloudTrailFilters
}

/**
 * Request parameters for systemSettingsCloudTrailFiltersList operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsCloudTrailFiltersListRequest
 */
export interface SystemSettingsApiSystemSettingsCloudTrailFiltersListRequest {
    /**
     * Filter by Tenant
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsCloudTrailFiltersList
     */
    readonly tenant?: number

    /**
     * Filter by Filter Pattern Type (Default or Custom)
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsCloudTrailFiltersList
     */
    readonly filterPatternType?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsCloudTrailFiltersList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsCloudTrailFiltersList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for systemSettingsCloudTrailFiltersPartialUpdate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsCloudTrailFiltersPartialUpdateRequest
 */
export interface SystemSettingsApiSystemSettingsCloudTrailFiltersPartialUpdateRequest {
    /**
     * A unique integer value identifying this cloud trail filters.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsCloudTrailFiltersPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {CloudTrailFilters}
     * @memberof SystemSettingsApiSystemSettingsCloudTrailFiltersPartialUpdate
     */
    readonly data: CloudTrailFilters
}

/**
 * Request parameters for systemSettingsCloudTrailFiltersRead operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsCloudTrailFiltersReadRequest
 */
export interface SystemSettingsApiSystemSettingsCloudTrailFiltersReadRequest {
    /**
     * A unique integer value identifying this cloud trail filters.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsCloudTrailFiltersRead
     */
    readonly id: number
}

/**
 * Request parameters for systemSettingsCloudTrailFiltersUpdate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsCloudTrailFiltersUpdateRequest
 */
export interface SystemSettingsApiSystemSettingsCloudTrailFiltersUpdateRequest {
    /**
     * A unique integer value identifying this cloud trail filters.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsCloudTrailFiltersUpdate
     */
    readonly id: number

    /**
     * 
     * @type {CloudTrailFilters}
     * @memberof SystemSettingsApiSystemSettingsCloudTrailFiltersUpdate
     */
    readonly data: CloudTrailFilters
}

/**
 * Request parameters for systemSettingsCloudTrailSetupsCreate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsCloudTrailSetupsCreateRequest
 */
export interface SystemSettingsApiSystemSettingsCloudTrailSetupsCreateRequest {
    /**
     * 
     * @type {CloudTrailSetUp}
     * @memberof SystemSettingsApiSystemSettingsCloudTrailSetupsCreate
     */
    readonly data: CloudTrailSetUp
}

/**
 * Request parameters for systemSettingsCloudTrailSetupsList operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsCloudTrailSetupsListRequest
 */
export interface SystemSettingsApiSystemSettingsCloudTrailSetupsListRequest {
    /**
     * Filter by Cloud Provider Account ID
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsCloudTrailSetupsList
     */
    readonly cloudProviderAccountId?: number

    /**
     * Filter by Tenant
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsCloudTrailSetupsList
     */
    readonly tenant?: number

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsCloudTrailSetupsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsCloudTrailSetupsList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for systemSettingsCloudTrailSetupsRead operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsCloudTrailSetupsReadRequest
 */
export interface SystemSettingsApiSystemSettingsCloudTrailSetupsReadRequest {
    /**
     * A unique integer value identifying this cloud trail set up.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsCloudTrailSetupsRead
     */
    readonly id: number
}

/**
 * Request parameters for systemSettingsCloudtrailEventsList operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsCloudtrailEventsListRequest
 */
export interface SystemSettingsApiSystemSettingsCloudtrailEventsListRequest {
    /**
     * Filter by Log ID
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsCloudtrailEventsList
     */
    readonly log?: number

    /**
     * Filter by Event Time
     * @type {any}
     * @memberof SystemSettingsApiSystemSettingsCloudtrailEventsList
     */
    readonly eventTime?: any

    /**
     * Filter by Event Name
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsCloudtrailEventsList
     */
    readonly eventName?: string

    /**
     * Filter by Event Source
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsCloudtrailEventsList
     */
    readonly eventSource?: string

    /**
     * Filter by AWS Region
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsCloudtrailEventsList
     */
    readonly awsRegion?: string

    /**
     * Filter by Source IP Address
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsCloudtrailEventsList
     */
    readonly sourceIpAddress?: string

    /**
     * Filter by User Agent
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsCloudtrailEventsList
     */
    readonly userAgent?: string

    /**
     * Filter by Event Type
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsCloudtrailEventsList
     */
    readonly eventType?: string

    /**
     * Filter by Event Category
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsCloudtrailEventsList
     */
    readonly eventCategory?: string

    /**
     * Filter by Status
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsCloudtrailEventsList
     */
    readonly status?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsCloudtrailEventsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsCloudtrailEventsList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for systemSettingsCloudtrailLogsList operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsCloudtrailLogsListRequest
 */
export interface SystemSettingsApiSystemSettingsCloudtrailLogsListRequest {
    /**
     * Filter result by scan frequency
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsCloudtrailLogsList
     */
    readonly scanFrequency?: string

    /**
     * Filter by Tenant
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsCloudtrailLogsList
     */
    readonly tenant?: number

    /**
     * Filter by Cloud Provider Account ID
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsCloudtrailLogsList
     */
    readonly cloudProviderAccountId?: number

    /**
     * Filter by Fectch Status (PROCESSING, FAILED, COMPLETED, NO DATA)
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsCloudtrailLogsList
     */
    readonly fetchStatus?: number

    /**
     * Filter By Scan Log
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsCloudtrailLogsList
     */
    readonly scanLog?: string

    /**
     * Filter by Created On Time
     * @type {any}
     * @memberof SystemSettingsApiSystemSettingsCloudtrailLogsList
     */
    readonly createdOn?: any

    /**
     * Filter by Period
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsCloudtrailLogsList
     */
    readonly period?: string

    /**
     * Filter by Triggered Alarms
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsCloudtrailLogsList
     */
    readonly triggeredAlarms?: number

    /**
     * Filter by Active Alarms
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsCloudtrailLogsList
     */
    readonly activeAlarms?: number

    /**
     * Filter by Event Time
     * @type {any}
     * @memberof SystemSettingsApiSystemSettingsCloudtrailLogsList
     */
    readonly eventTime?: any

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsCloudtrailLogsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsCloudtrailLogsList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for systemSettingsRegionsCreate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRegionsCreateRequest
 */
export interface SystemSettingsApiSystemSettingsRegionsCreateRequest {
    /**
     * 
     * @type {Region}
     * @memberof SystemSettingsApiSystemSettingsRegionsCreate
     */
    readonly data: Region
}

/**
 * Request parameters for systemSettingsRegionsList operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRegionsListRequest
 */
export interface SystemSettingsApiSystemSettingsRegionsListRequest {
    /**
     * Filter by Cloud Provider
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsRegionsList
     */
    readonly cloudProvider?: string

    /**
     * Filter by Region Name
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsRegionsList
     */
    readonly regionName?: string

    /**
     * A search term.
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsRegionsList
     */
    readonly search?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRegionsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRegionsList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for systemSettingsRegionsPartialUpdate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRegionsPartialUpdateRequest
 */
export interface SystemSettingsApiSystemSettingsRegionsPartialUpdateRequest {
    /**
     * A unique integer value identifying this region.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRegionsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Region}
     * @memberof SystemSettingsApiSystemSettingsRegionsPartialUpdate
     */
    readonly data: Region
}

/**
 * Request parameters for systemSettingsRegionsRead operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRegionsReadRequest
 */
export interface SystemSettingsApiSystemSettingsRegionsReadRequest {
    /**
     * A unique integer value identifying this region.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRegionsRead
     */
    readonly id: number
}

/**
 * Request parameters for systemSettingsRegionsUpdate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRegionsUpdateRequest
 */
export interface SystemSettingsApiSystemSettingsRegionsUpdateRequest {
    /**
     * A unique integer value identifying this region.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRegionsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Region}
     * @memberof SystemSettingsApiSystemSettingsRegionsUpdate
     */
    readonly data: Region
}

/**
 * Request parameters for systemSettingsRuleSuppressionLogList operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRuleSuppressionLogListRequest
 */
export interface SystemSettingsApiSystemSettingsRuleSuppressionLogListRequest {
    /**
     * Filter by Tenant
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionLogList
     */
    readonly tenant?: number

    /**
     * Filter by Comment
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionLogList
     */
    readonly comments?: string

    /**
     * Filter by Expiration
     * @type {any}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionLogList
     */
    readonly expiration?: any

    /**
     * Filter by Created On
     * @type {any}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionLogList
     */
    readonly createdOn?: any

    /**
     * Filter by Severity (High, Medium, Low)
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionLogList
     */
    readonly severity?: string

    /**
     * Filter by Suppressed_by User
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionLogList
     */
    readonly suppressedBy?: number

    /**
     * Filter by Resource ID
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionLogList
     */
    readonly resourceId?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionLogList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionLogList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for systemSettingsRuleSuppressionLogPartialUpdate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRuleSuppressionLogPartialUpdateRequest
 */
export interface SystemSettingsApiSystemSettingsRuleSuppressionLogPartialUpdateRequest {
    /**
     * A unique integer value identifying this rule suppression log.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionLogPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {RuleSuppressionLog}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionLogPartialUpdate
     */
    readonly data: RuleSuppressionLog
}

/**
 * Request parameters for systemSettingsRuleSuppressionLogRead operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRuleSuppressionLogReadRequest
 */
export interface SystemSettingsApiSystemSettingsRuleSuppressionLogReadRequest {
    /**
     * A unique integer value identifying this rule suppression log.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionLogRead
     */
    readonly id: number
}

/**
 * Request parameters for systemSettingsRuleSuppressionLogUpdate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRuleSuppressionLogUpdateRequest
 */
export interface SystemSettingsApiSystemSettingsRuleSuppressionLogUpdateRequest {
    /**
     * A unique integer value identifying this rule suppression log.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionLogUpdate
     */
    readonly id: number

    /**
     * 
     * @type {RuleSuppressionLog}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionLogUpdate
     */
    readonly data: RuleSuppressionLog
}

/**
 * Request parameters for systemSettingsRuleSuppressionSetupCreate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRuleSuppressionSetupCreateRequest
 */
export interface SystemSettingsApiSystemSettingsRuleSuppressionSetupCreateRequest {
    /**
     * 
     * @type {CreateRuleSuppressionSetUp}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionSetupCreate
     */
    readonly data: CreateRuleSuppressionSetUp
}

/**
 * Request parameters for systemSettingsRuleSuppressionSetupDelete operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRuleSuppressionSetupDeleteRequest
 */
export interface SystemSettingsApiSystemSettingsRuleSuppressionSetupDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionSetupDelete
     */
    readonly id: string
}

/**
 * Request parameters for systemSettingsRuleSuppressionSetupList operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRuleSuppressionSetupListRequest
 */
export interface SystemSettingsApiSystemSettingsRuleSuppressionSetupListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionSetupList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionSetupList
     */
    readonly pageSize?: number

    /**
     * Filter by Tenant
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionSetupList
     */
    readonly tenant?: number

    /**
     * Filter by Status
     * @type {boolean}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionSetupList
     */
    readonly status?: boolean

    /**
     * Filter by Region
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionSetupList
     */
    readonly region?: string

    /**
     * Filter by Cloud Provider
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionSetupList
     */
    readonly cloudProvider?: number
}

/**
 * Request parameters for systemSettingsRuleSuppressionSetupPartialUpdate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRuleSuppressionSetupPartialUpdateRequest
 */
export interface SystemSettingsApiSystemSettingsRuleSuppressionSetupPartialUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionSetupPartialUpdate
     */
    readonly id: string

    /**
     * 
     * @type {CreateRuleSuppressionSetUp}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionSetupPartialUpdate
     */
    readonly data: CreateRuleSuppressionSetUp
}

/**
 * Request parameters for systemSettingsRuleSuppressionSetupRead operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRuleSuppressionSetupReadRequest
 */
export interface SystemSettingsApiSystemSettingsRuleSuppressionSetupReadRequest {
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionSetupRead
     */
    readonly id: string
}

/**
 * Request parameters for systemSettingsRuleSuppressionSetupUpdate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRuleSuppressionSetupUpdateRequest
 */
export interface SystemSettingsApiSystemSettingsRuleSuppressionSetupUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionSetupUpdate
     */
    readonly id: string

    /**
     * 
     * @type {CreateRuleSuppressionSetUp}
     * @memberof SystemSettingsApiSystemSettingsRuleSuppressionSetupUpdate
     */
    readonly data: CreateRuleSuppressionSetUp
}

/**
 * Request parameters for systemSettingsSystemSettingsCreate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsSystemSettingsCreateRequest
 */
export interface SystemSettingsApiSystemSettingsSystemSettingsCreateRequest {
    /**
     * 
     * @type {SystemSetting}
     * @memberof SystemSettingsApiSystemSettingsSystemSettingsCreate
     */
    readonly data: SystemSetting
}

/**
 * Request parameters for systemSettingsSystemSettingsList operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsSystemSettingsListRequest
 */
export interface SystemSettingsApiSystemSettingsSystemSettingsListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsSystemSettingsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsSystemSettingsList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for systemSettingsSystemSettingsPartialUpdate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsSystemSettingsPartialUpdateRequest
 */
export interface SystemSettingsApiSystemSettingsSystemSettingsPartialUpdateRequest {
    /**
     * A unique integer value identifying this system setting.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsSystemSettingsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {SystemSetting}
     * @memberof SystemSettingsApiSystemSettingsSystemSettingsPartialUpdate
     */
    readonly data: SystemSetting
}

/**
 * Request parameters for systemSettingsSystemSettingsRead operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsSystemSettingsReadRequest
 */
export interface SystemSettingsApiSystemSettingsSystemSettingsReadRequest {
    /**
     * A unique integer value identifying this system setting.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsSystemSettingsRead
     */
    readonly id: number
}

/**
 * Request parameters for systemSettingsSystemSettingsUpdate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsSystemSettingsUpdateRequest
 */
export interface SystemSettingsApiSystemSettingsSystemSettingsUpdateRequest {
    /**
     * A unique integer value identifying this system setting.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsSystemSettingsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {SystemSetting}
     * @memberof SystemSettingsApiSystemSettingsSystemSettingsUpdate
     */
    readonly data: SystemSetting
}

/**
 * Request parameters for systemSettingsTagsCreate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsTagsCreateRequest
 */
export interface SystemSettingsApiSystemSettingsTagsCreateRequest {
    /**
     * 
     * @type {Tag}
     * @memberof SystemSettingsApiSystemSettingsTagsCreate
     */
    readonly data: Tag
}

/**
 * Request parameters for systemSettingsTagsDelete operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsTagsDeleteRequest
 */
export interface SystemSettingsApiSystemSettingsTagsDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsTagsDelete
     */
    readonly id: string
}

/**
 * Request parameters for systemSettingsTagsList operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsTagsListRequest
 */
export interface SystemSettingsApiSystemSettingsTagsListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsTagsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsTagsList
     */
    readonly pageSize?: number

    /**
     * Filter by Tenant
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsTagsList
     */
    readonly tenant?: number
}

/**
 * Request parameters for systemSettingsTagsPartialUpdate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsTagsPartialUpdateRequest
 */
export interface SystemSettingsApiSystemSettingsTagsPartialUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsTagsPartialUpdate
     */
    readonly id: string

    /**
     * 
     * @type {Tag}
     * @memberof SystemSettingsApiSystemSettingsTagsPartialUpdate
     */
    readonly data: Tag
}

/**
 * Request parameters for systemSettingsTagsRead operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsTagsReadRequest
 */
export interface SystemSettingsApiSystemSettingsTagsReadRequest {
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsTagsRead
     */
    readonly id: string
}

/**
 * Request parameters for systemSettingsTagsUpdate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsTagsUpdateRequest
 */
export interface SystemSettingsApiSystemSettingsTagsUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsTagsUpdate
     */
    readonly id: string

    /**
     * 
     * @type {Tag}
     * @memberof SystemSettingsApiSystemSettingsTagsUpdate
     */
    readonly data: Tag
}

/**
 * Request parameters for systemSettingsUpdateCloudEventStatusCreate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsUpdateCloudEventStatusCreateRequest
 */
export interface SystemSettingsApiSystemSettingsUpdateCloudEventStatusCreateRequest {
    /**
     * 
     * @type {UpdateCloudEventStatus}
     * @memberof SystemSettingsApiSystemSettingsUpdateCloudEventStatusCreate
     */
    readonly data: UpdateCloudEventStatus
}

/**
 * SystemSettingsApi - object-oriented interface
 * @export
 * @class SystemSettingsApi
 * @extends {BaseAPI}
 */
export class SystemSettingsApi extends BaseAPI {
    /**
     * Aggregates and returns Inventory Count By Region
     * @summary Aggregates and returns Inventory Count By Region
     * @param {SystemSettingsApiSystemSettingsAssetInventoryCountByRegionCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsAssetInventoryCountByRegionCreate(requestParameters: SystemSettingsApiSystemSettingsAssetInventoryCountByRegionCreateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsAssetInventoryCountByRegionCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Aggregates and returns Inventory By Count Service
     * @summary Aggregates and returns Inventory Count By Service
     * @param {SystemSettingsApiSystemSettingsAssetInventoryCountByServiceCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsAssetInventoryCountByServiceCreate(requestParameters: SystemSettingsApiSystemSettingsAssetInventoryCountByServiceCreateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsAssetInventoryCountByServiceCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsAssetManagementsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsAssetManagementsCreate(requestParameters: SystemSettingsApiSystemSettingsAssetManagementsCreateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsAssetManagementsCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsAssetManagementsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsAssetManagementsDelete(requestParameters: SystemSettingsApiSystemSettingsAssetManagementsDeleteRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsAssetManagementsDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Tenant Assets
     * @summary List Tenant Assets
     * @param {SystemSettingsApiSystemSettingsAssetManagementsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsAssetManagementsList(requestParameters: SystemSettingsApiSystemSettingsAssetManagementsListRequest = {}, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsAssetManagementsList(requestParameters.page, requestParameters.pageSize, requestParameters.cloudProvider, requestParameters.services, requestParameters.cloudAccount, requestParameters.tags, requestParameters.tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsAssetManagementsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsAssetManagementsPartialUpdate(requestParameters: SystemSettingsApiSystemSettingsAssetManagementsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsAssetManagementsPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsAssetManagementsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsAssetManagementsRead(requestParameters: SystemSettingsApiSystemSettingsAssetManagementsReadRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsAssetManagementsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsAssetManagementsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsAssetManagementsUpdate(requestParameters: SystemSettingsApiSystemSettingsAssetManagementsUpdateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsAssetManagementsUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsAwsCloudtrailAttributeValueCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsAwsCloudtrailAttributeValueCreate(requestParameters: SystemSettingsApiSystemSettingsAwsCloudtrailAttributeValueCreateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsAwsCloudtrailAttributeValueCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsAwsCloudtrailAttributeValueListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsAwsCloudtrailAttributeValueList(requestParameters: SystemSettingsApiSystemSettingsAwsCloudtrailAttributeValueListRequest = {}, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsAwsCloudtrailAttributeValueList(requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsAwsCloudtrailAttributeValueReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsAwsCloudtrailAttributeValueRead(requestParameters: SystemSettingsApiSystemSettingsAwsCloudtrailAttributeValueReadRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsAwsCloudtrailAttributeValueRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsCloudTrailFiltersCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsCloudTrailFiltersCreate(requestParameters: SystemSettingsApiSystemSettingsCloudTrailFiltersCreateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsCloudTrailFiltersCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List CloudTrail Alarms
     * @summary List CloudTrail Alarms
     * @param {SystemSettingsApiSystemSettingsCloudTrailFiltersListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsCloudTrailFiltersList(requestParameters: SystemSettingsApiSystemSettingsCloudTrailFiltersListRequest = {}, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsCloudTrailFiltersList(requestParameters.tenant, requestParameters.filterPatternType, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsCloudTrailFiltersPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsCloudTrailFiltersPartialUpdate(requestParameters: SystemSettingsApiSystemSettingsCloudTrailFiltersPartialUpdateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsCloudTrailFiltersPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsCloudTrailFiltersReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsCloudTrailFiltersRead(requestParameters: SystemSettingsApiSystemSettingsCloudTrailFiltersReadRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsCloudTrailFiltersRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsCloudTrailFiltersUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsCloudTrailFiltersUpdate(requestParameters: SystemSettingsApiSystemSettingsCloudTrailFiltersUpdateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsCloudTrailFiltersUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsCloudTrailSetupsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsCloudTrailSetupsCreate(requestParameters: SystemSettingsApiSystemSettingsCloudTrailSetupsCreateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsCloudTrailSetupsCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List CloudTrail SetUps
     * @summary List CloudTrail Setups
     * @param {SystemSettingsApiSystemSettingsCloudTrailSetupsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsCloudTrailSetupsList(requestParameters: SystemSettingsApiSystemSettingsCloudTrailSetupsListRequest = {}, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsCloudTrailSetupsList(requestParameters.cloudProviderAccountId, requestParameters.tenant, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsCloudTrailSetupsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsCloudTrailSetupsRead(requestParameters: SystemSettingsApiSystemSettingsCloudTrailSetupsReadRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsCloudTrailSetupsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List CloudTrail Events with optional filters
     * @summary List CloudTrail Events
     * @param {SystemSettingsApiSystemSettingsCloudtrailEventsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsCloudtrailEventsList(requestParameters: SystemSettingsApiSystemSettingsCloudtrailEventsListRequest = {}, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsCloudtrailEventsList(requestParameters.log, requestParameters.eventTime, requestParameters.eventName, requestParameters.eventSource, requestParameters.awsRegion, requestParameters.sourceIpAddress, requestParameters.userAgent, requestParameters.eventType, requestParameters.eventCategory, requestParameters.status, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Cloud Trail Alarm Log history
     * @summary List Cloud Trail Log
     * @param {SystemSettingsApiSystemSettingsCloudtrailLogsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsCloudtrailLogsList(requestParameters: SystemSettingsApiSystemSettingsCloudtrailLogsListRequest = {}, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsCloudtrailLogsList(requestParameters.scanFrequency, requestParameters.tenant, requestParameters.cloudProviderAccountId, requestParameters.fetchStatus, requestParameters.scanLog, requestParameters.createdOn, requestParameters.period, requestParameters.triggeredAlarms, requestParameters.activeAlarms, requestParameters.eventTime, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRegionsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRegionsCreate(requestParameters: SystemSettingsApiSystemSettingsRegionsCreateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRegionsCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Regions
     * @summary List Regions
     * @param {SystemSettingsApiSystemSettingsRegionsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRegionsList(requestParameters: SystemSettingsApiSystemSettingsRegionsListRequest = {}, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRegionsList(requestParameters.cloudProvider, requestParameters.regionName, requestParameters.search, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRegionsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRegionsPartialUpdate(requestParameters: SystemSettingsApiSystemSettingsRegionsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRegionsPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRegionsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRegionsRead(requestParameters: SystemSettingsApiSystemSettingsRegionsReadRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRegionsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRegionsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRegionsUpdate(requestParameters: SystemSettingsApiSystemSettingsRegionsUpdateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRegionsUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List RuleSuppression Log
     * @summary List RuleSuppression Log
     * @param {SystemSettingsApiSystemSettingsRuleSuppressionLogListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRuleSuppressionLogList(requestParameters: SystemSettingsApiSystemSettingsRuleSuppressionLogListRequest = {}, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRuleSuppressionLogList(requestParameters.tenant, requestParameters.comments, requestParameters.expiration, requestParameters.createdOn, requestParameters.severity, requestParameters.suppressedBy, requestParameters.resourceId, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRuleSuppressionLogPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRuleSuppressionLogPartialUpdate(requestParameters: SystemSettingsApiSystemSettingsRuleSuppressionLogPartialUpdateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRuleSuppressionLogPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRuleSuppressionLogReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRuleSuppressionLogRead(requestParameters: SystemSettingsApiSystemSettingsRuleSuppressionLogReadRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRuleSuppressionLogRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRuleSuppressionLogUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRuleSuppressionLogUpdate(requestParameters: SystemSettingsApiSystemSettingsRuleSuppressionLogUpdateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRuleSuppressionLogUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRuleSuppressionSetupCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRuleSuppressionSetupCreate(requestParameters: SystemSettingsApiSystemSettingsRuleSuppressionSetupCreateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRuleSuppressionSetupCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRuleSuppressionSetupDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRuleSuppressionSetupDelete(requestParameters: SystemSettingsApiSystemSettingsRuleSuppressionSetupDeleteRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRuleSuppressionSetupDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Suppression SetUps
     * @summary List Suppression Setups
     * @param {SystemSettingsApiSystemSettingsRuleSuppressionSetupListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRuleSuppressionSetupList(requestParameters: SystemSettingsApiSystemSettingsRuleSuppressionSetupListRequest = {}, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRuleSuppressionSetupList(requestParameters.page, requestParameters.pageSize, requestParameters.tenant, requestParameters.status, requestParameters.region, requestParameters.cloudProvider, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRuleSuppressionSetupPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRuleSuppressionSetupPartialUpdate(requestParameters: SystemSettingsApiSystemSettingsRuleSuppressionSetupPartialUpdateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRuleSuppressionSetupPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRuleSuppressionSetupReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRuleSuppressionSetupRead(requestParameters: SystemSettingsApiSystemSettingsRuleSuppressionSetupReadRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRuleSuppressionSetupRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRuleSuppressionSetupUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRuleSuppressionSetupUpdate(requestParameters: SystemSettingsApiSystemSettingsRuleSuppressionSetupUpdateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRuleSuppressionSetupUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsSystemSettingsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsSystemSettingsCreate(requestParameters: SystemSettingsApiSystemSettingsSystemSettingsCreateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsSystemSettingsCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsSystemSettingsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsSystemSettingsList(requestParameters: SystemSettingsApiSystemSettingsSystemSettingsListRequest = {}, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsSystemSettingsList(requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsSystemSettingsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsSystemSettingsPartialUpdate(requestParameters: SystemSettingsApiSystemSettingsSystemSettingsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsSystemSettingsPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsSystemSettingsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsSystemSettingsRead(requestParameters: SystemSettingsApiSystemSettingsSystemSettingsReadRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsSystemSettingsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsSystemSettingsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsSystemSettingsUpdate(requestParameters: SystemSettingsApiSystemSettingsSystemSettingsUpdateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsSystemSettingsUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsTagsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsTagsCreate(requestParameters: SystemSettingsApiSystemSettingsTagsCreateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsTagsCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsTagsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsTagsDelete(requestParameters: SystemSettingsApiSystemSettingsTagsDeleteRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsTagsDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Tenant Tags
     * @summary List Tenant Tags
     * @param {SystemSettingsApiSystemSettingsTagsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsTagsList(requestParameters: SystemSettingsApiSystemSettingsTagsListRequest = {}, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsTagsList(requestParameters.page, requestParameters.pageSize, requestParameters.tenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsTagsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsTagsPartialUpdate(requestParameters: SystemSettingsApiSystemSettingsTagsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsTagsPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsTagsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsTagsRead(requestParameters: SystemSettingsApiSystemSettingsTagsReadRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsTagsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsTagsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsTagsUpdate(requestParameters: SystemSettingsApiSystemSettingsTagsUpdateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsTagsUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsUpdateCloudEventStatusCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsUpdateCloudEventStatusCreate(requestParameters: SystemSettingsApiSystemSettingsUpdateCloudEventStatusCreateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsUpdateCloudEventStatusCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TicketsApi - axios parameter creator
 * @export
 */
export const TicketsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TicketActvity} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketActivitiesCreate: async (data: TicketActvity, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('ticketsTicketActivitiesCreate', 'data', data)
            const localVarPath = `/tickets/api/v1/ticket_activities/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Ticket Activities
         * @summary List Ticket Activities
         * @param {number} [user] Filter by user id
         * @param {string} [comments] Filter by comments
         * @param {string} [timestamp] Filter by time stamp
         * @param {number} [ticket] Filter by ticket id
         * @param {number} [activityType] Filter by activity_type id
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketActivitiesList: async (user?: number, comments?: string, timestamp?: string, ticket?: number, activityType?: number, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tickets/api/v1/ticket_activities/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            if (comments !== undefined) {
                localVarQueryParameter['comments'] = comments;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (ticket !== undefined) {
                localVarQueryParameter['ticket'] = ticket;
            }

            if (activityType !== undefined) {
                localVarQueryParameter['activity_type'] = activityType;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket actvity.
         * @param {TicketActvity} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketActivitiesPartialUpdate: async (id: number, data: TicketActvity, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketsTicketActivitiesPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('ticketsTicketActivitiesPartialUpdate', 'data', data)
            const localVarPath = `/tickets/api/v1/ticket_activities/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket actvity.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketActivitiesRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketsTicketActivitiesRead', 'id', id)
            const localVarPath = `/tickets/api/v1/ticket_activities/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket actvity.
         * @param {TicketActvity} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketActivitiesUpdate: async (id: number, data: TicketActvity, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketsTicketActivitiesUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('ticketsTicketActivitiesUpdate', 'data', data)
            const localVarPath = `/tickets/api/v1/ticket_activities/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TicketType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketTypesCreate: async (data: TicketType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('ticketsTicketTypesCreate', 'data', data)
            const localVarPath = `/tickets/api/v1/ticket_types/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Ticket Types
         * @summary List Ticket Types
         * @param {string} [name] Filter by ticket type name
         * @param {string} [code] Filter ticket_type code
         * @param {boolean} [status] Filter by ticket_type status
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketTypesList: async (name?: string, code?: string, status?: boolean, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tickets/api/v1/ticket_types/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket type.
         * @param {TicketType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketTypesPartialUpdate: async (id: number, data: TicketType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketsTicketTypesPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('ticketsTicketTypesPartialUpdate', 'data', data)
            const localVarPath = `/tickets/api/v1/ticket_types/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketTypesRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketsTicketTypesRead', 'id', id)
            const localVarPath = `/tickets/api/v1/ticket_types/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket type.
         * @param {TicketType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketTypesUpdate: async (id: number, data: TicketType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketsTicketTypesUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('ticketsTicketTypesUpdate', 'data', data)
            const localVarPath = `/tickets/api/v1/ticket_types/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Ticket} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketsCreate: async (data: Ticket, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('ticketsTicketsCreate', 'data', data)
            const localVarPath = `/tickets/api/v1/tickets/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Tickets
         * @summary List Tickets based on Tenant and Role
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [status] Filter by ticket status
         * @param {number} [asset] Filter by asset id
         * @param {number} [assignedTo] Filter by assigned_to id
         * @param {number} [ticketType] Filter by ticket_type id
         * @param {number} [createdBy] Filter by created_by id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketsList: async (page?: number, pageSize?: number, status?: string, asset?: number, assignedTo?: number, ticketType?: number, createdBy?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tickets/api/v1/tickets/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (assignedTo !== undefined) {
                localVarQueryParameter['assigned_to'] = assignedTo;
            }

            if (ticketType !== undefined) {
                localVarQueryParameter['ticket_type'] = ticketType;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['created_by'] = createdBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Ticket} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketsPartialUpdate: async (id: string, data: Ticket, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketsTicketsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('ticketsTicketsPartialUpdate', 'data', data)
            const localVarPath = `/tickets/api/v1/tickets/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketsRead: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketsTicketsRead', 'id', id)
            const localVarPath = `/tickets/api/v1/tickets/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Ticket} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketsUpdate: async (id: string, data: Ticket, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketsTicketsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('ticketsTicketsUpdate', 'data', data)
            const localVarPath = `/tickets/api/v1/tickets/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TicketsApi - functional programming interface
 * @export
 */
export const TicketsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TicketsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {TicketActvity} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketActivitiesCreate(data: TicketActvity, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketActvity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketActivitiesCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Ticket Activities
         * @summary List Ticket Activities
         * @param {number} [user] Filter by user id
         * @param {string} [comments] Filter by comments
         * @param {string} [timestamp] Filter by time stamp
         * @param {number} [ticket] Filter by ticket id
         * @param {number} [activityType] Filter by activity_type id
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketActivitiesList(user?: number, comments?: string, timestamp?: string, ticket?: number, activityType?: number, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketsTicketActivitiesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketActivitiesList(user, comments, timestamp, ticket, activityType, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket actvity.
         * @param {TicketActvity} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketActivitiesPartialUpdate(id: number, data: TicketActvity, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketActvity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketActivitiesPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket actvity.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketActivitiesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketActvity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketActivitiesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket actvity.
         * @param {TicketActvity} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketActivitiesUpdate(id: number, data: TicketActvity, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketActvity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketActivitiesUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TicketType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketTypesCreate(data: TicketType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketTypesCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Ticket Types
         * @summary List Ticket Types
         * @param {string} [name] Filter by ticket type name
         * @param {string} [code] Filter ticket_type code
         * @param {boolean} [status] Filter by ticket_type status
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketTypesList(name?: string, code?: string, status?: boolean, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketsTicketTypesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketTypesList(name, code, status, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket type.
         * @param {TicketType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketTypesPartialUpdate(id: number, data: TicketType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketTypesPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketTypesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketTypesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket type.
         * @param {TicketType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketTypesUpdate(id: number, data: TicketType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketTypesUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Ticket} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketsCreate(data: Ticket, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ticket>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Tickets
         * @summary List Tickets based on Tenant and Role
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [status] Filter by ticket status
         * @param {number} [asset] Filter by asset id
         * @param {number} [assignedTo] Filter by assigned_to id
         * @param {number} [ticketType] Filter by ticket_type id
         * @param {number} [createdBy] Filter by created_by id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketsList(page?: number, pageSize?: number, status?: string, asset?: number, assignedTo?: number, ticketType?: number, createdBy?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketsTicketsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketsList(page, pageSize, status, asset, assignedTo, ticketType, createdBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {Ticket} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketsPartialUpdate(id: string, data: Ticket, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ticket>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketsRead(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReadTicket>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {Ticket} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketsUpdate(id: string, data: Ticket, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ticket>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TicketsApi - factory interface
 * @export
 */
export const TicketsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TicketsApiFp(configuration)
    return {
        /**
         * 
         * @param {TicketActvity} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketActivitiesCreate(data: TicketActvity, options?: any): AxiosPromise<TicketActvity> {
            return localVarFp.ticketsTicketActivitiesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * List Ticket Activities
         * @summary List Ticket Activities
         * @param {number} [user] Filter by user id
         * @param {string} [comments] Filter by comments
         * @param {string} [timestamp] Filter by time stamp
         * @param {number} [ticket] Filter by ticket id
         * @param {number} [activityType] Filter by activity_type id
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketActivitiesList(user?: number, comments?: string, timestamp?: string, ticket?: number, activityType?: number, page?: number, pageSize?: number, options?: any): AxiosPromise<TicketsTicketActivitiesList200Response> {
            return localVarFp.ticketsTicketActivitiesList(user, comments, timestamp, ticket, activityType, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket actvity.
         * @param {TicketActvity} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketActivitiesPartialUpdate(id: number, data: TicketActvity, options?: any): AxiosPromise<TicketActvity> {
            return localVarFp.ticketsTicketActivitiesPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket actvity.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketActivitiesRead(id: number, options?: any): AxiosPromise<TicketActvity> {
            return localVarFp.ticketsTicketActivitiesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket actvity.
         * @param {TicketActvity} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketActivitiesUpdate(id: number, data: TicketActvity, options?: any): AxiosPromise<TicketActvity> {
            return localVarFp.ticketsTicketActivitiesUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TicketType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketTypesCreate(data: TicketType, options?: any): AxiosPromise<TicketType> {
            return localVarFp.ticketsTicketTypesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * List Ticket Types
         * @summary List Ticket Types
         * @param {string} [name] Filter by ticket type name
         * @param {string} [code] Filter ticket_type code
         * @param {boolean} [status] Filter by ticket_type status
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketTypesList(name?: string, code?: string, status?: boolean, page?: number, pageSize?: number, options?: any): AxiosPromise<TicketsTicketTypesList200Response> {
            return localVarFp.ticketsTicketTypesList(name, code, status, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket type.
         * @param {TicketType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketTypesPartialUpdate(id: number, data: TicketType, options?: any): AxiosPromise<TicketType> {
            return localVarFp.ticketsTicketTypesPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketTypesRead(id: number, options?: any): AxiosPromise<TicketType> {
            return localVarFp.ticketsTicketTypesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket type.
         * @param {TicketType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketTypesUpdate(id: number, data: TicketType, options?: any): AxiosPromise<TicketType> {
            return localVarFp.ticketsTicketTypesUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Ticket} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketsCreate(data: Ticket, options?: any): AxiosPromise<Ticket> {
            return localVarFp.ticketsTicketsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * List Tickets
         * @summary List Tickets based on Tenant and Role
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [status] Filter by ticket status
         * @param {number} [asset] Filter by asset id
         * @param {number} [assignedTo] Filter by assigned_to id
         * @param {number} [ticketType] Filter by ticket_type id
         * @param {number} [createdBy] Filter by created_by id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketsList(page?: number, pageSize?: number, status?: string, asset?: number, assignedTo?: number, ticketType?: number, createdBy?: number, options?: any): AxiosPromise<TicketsTicketsList200Response> {
            return localVarFp.ticketsTicketsList(page, pageSize, status, asset, assignedTo, ticketType, createdBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {Ticket} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketsPartialUpdate(id: string, data: Ticket, options?: any): AxiosPromise<Ticket> {
            return localVarFp.ticketsTicketsPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketsRead(id: string, options?: any): AxiosPromise<ReadTicket> {
            return localVarFp.ticketsTicketsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {Ticket} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketsUpdate(id: string, data: Ticket, options?: any): AxiosPromise<Ticket> {
            return localVarFp.ticketsTicketsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for ticketsTicketActivitiesCreate operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketActivitiesCreateRequest
 */
export interface TicketsApiTicketsTicketActivitiesCreateRequest {
    /**
     * 
     * @type {TicketActvity}
     * @memberof TicketsApiTicketsTicketActivitiesCreate
     */
    readonly data: TicketActvity
}

/**
 * Request parameters for ticketsTicketActivitiesList operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketActivitiesListRequest
 */
export interface TicketsApiTicketsTicketActivitiesListRequest {
    /**
     * Filter by user id
     * @type {number}
     * @memberof TicketsApiTicketsTicketActivitiesList
     */
    readonly user?: number

    /**
     * Filter by comments
     * @type {string}
     * @memberof TicketsApiTicketsTicketActivitiesList
     */
    readonly comments?: string

    /**
     * Filter by time stamp
     * @type {string}
     * @memberof TicketsApiTicketsTicketActivitiesList
     */
    readonly timestamp?: string

    /**
     * Filter by ticket id
     * @type {number}
     * @memberof TicketsApiTicketsTicketActivitiesList
     */
    readonly ticket?: number

    /**
     * Filter by activity_type id
     * @type {number}
     * @memberof TicketsApiTicketsTicketActivitiesList
     */
    readonly activityType?: number

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof TicketsApiTicketsTicketActivitiesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof TicketsApiTicketsTicketActivitiesList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for ticketsTicketActivitiesPartialUpdate operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketActivitiesPartialUpdateRequest
 */
export interface TicketsApiTicketsTicketActivitiesPartialUpdateRequest {
    /**
     * A unique integer value identifying this ticket actvity.
     * @type {number}
     * @memberof TicketsApiTicketsTicketActivitiesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {TicketActvity}
     * @memberof TicketsApiTicketsTicketActivitiesPartialUpdate
     */
    readonly data: TicketActvity
}

/**
 * Request parameters for ticketsTicketActivitiesRead operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketActivitiesReadRequest
 */
export interface TicketsApiTicketsTicketActivitiesReadRequest {
    /**
     * A unique integer value identifying this ticket actvity.
     * @type {number}
     * @memberof TicketsApiTicketsTicketActivitiesRead
     */
    readonly id: number
}

/**
 * Request parameters for ticketsTicketActivitiesUpdate operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketActivitiesUpdateRequest
 */
export interface TicketsApiTicketsTicketActivitiesUpdateRequest {
    /**
     * A unique integer value identifying this ticket actvity.
     * @type {number}
     * @memberof TicketsApiTicketsTicketActivitiesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {TicketActvity}
     * @memberof TicketsApiTicketsTicketActivitiesUpdate
     */
    readonly data: TicketActvity
}

/**
 * Request parameters for ticketsTicketTypesCreate operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketTypesCreateRequest
 */
export interface TicketsApiTicketsTicketTypesCreateRequest {
    /**
     * 
     * @type {TicketType}
     * @memberof TicketsApiTicketsTicketTypesCreate
     */
    readonly data: TicketType
}

/**
 * Request parameters for ticketsTicketTypesList operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketTypesListRequest
 */
export interface TicketsApiTicketsTicketTypesListRequest {
    /**
     * Filter by ticket type name
     * @type {string}
     * @memberof TicketsApiTicketsTicketTypesList
     */
    readonly name?: string

    /**
     * Filter ticket_type code
     * @type {string}
     * @memberof TicketsApiTicketsTicketTypesList
     */
    readonly code?: string

    /**
     * Filter by ticket_type status
     * @type {boolean}
     * @memberof TicketsApiTicketsTicketTypesList
     */
    readonly status?: boolean

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof TicketsApiTicketsTicketTypesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof TicketsApiTicketsTicketTypesList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for ticketsTicketTypesPartialUpdate operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketTypesPartialUpdateRequest
 */
export interface TicketsApiTicketsTicketTypesPartialUpdateRequest {
    /**
     * A unique integer value identifying this ticket type.
     * @type {number}
     * @memberof TicketsApiTicketsTicketTypesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {TicketType}
     * @memberof TicketsApiTicketsTicketTypesPartialUpdate
     */
    readonly data: TicketType
}

/**
 * Request parameters for ticketsTicketTypesRead operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketTypesReadRequest
 */
export interface TicketsApiTicketsTicketTypesReadRequest {
    /**
     * A unique integer value identifying this ticket type.
     * @type {number}
     * @memberof TicketsApiTicketsTicketTypesRead
     */
    readonly id: number
}

/**
 * Request parameters for ticketsTicketTypesUpdate operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketTypesUpdateRequest
 */
export interface TicketsApiTicketsTicketTypesUpdateRequest {
    /**
     * A unique integer value identifying this ticket type.
     * @type {number}
     * @memberof TicketsApiTicketsTicketTypesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {TicketType}
     * @memberof TicketsApiTicketsTicketTypesUpdate
     */
    readonly data: TicketType
}

/**
 * Request parameters for ticketsTicketsCreate operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketsCreateRequest
 */
export interface TicketsApiTicketsTicketsCreateRequest {
    /**
     * 
     * @type {Ticket}
     * @memberof TicketsApiTicketsTicketsCreate
     */
    readonly data: Ticket
}

/**
 * Request parameters for ticketsTicketsList operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketsListRequest
 */
export interface TicketsApiTicketsTicketsListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof TicketsApiTicketsTicketsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof TicketsApiTicketsTicketsList
     */
    readonly pageSize?: number

    /**
     * Filter by ticket status
     * @type {string}
     * @memberof TicketsApiTicketsTicketsList
     */
    readonly status?: string

    /**
     * Filter by asset id
     * @type {number}
     * @memberof TicketsApiTicketsTicketsList
     */
    readonly asset?: number

    /**
     * Filter by assigned_to id
     * @type {number}
     * @memberof TicketsApiTicketsTicketsList
     */
    readonly assignedTo?: number

    /**
     * Filter by ticket_type id
     * @type {number}
     * @memberof TicketsApiTicketsTicketsList
     */
    readonly ticketType?: number

    /**
     * Filter by created_by id
     * @type {number}
     * @memberof TicketsApiTicketsTicketsList
     */
    readonly createdBy?: number
}

/**
 * Request parameters for ticketsTicketsPartialUpdate operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketsPartialUpdateRequest
 */
export interface TicketsApiTicketsTicketsPartialUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof TicketsApiTicketsTicketsPartialUpdate
     */
    readonly id: string

    /**
     * 
     * @type {Ticket}
     * @memberof TicketsApiTicketsTicketsPartialUpdate
     */
    readonly data: Ticket
}

/**
 * Request parameters for ticketsTicketsRead operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketsReadRequest
 */
export interface TicketsApiTicketsTicketsReadRequest {
    /**
     * 
     * @type {string}
     * @memberof TicketsApiTicketsTicketsRead
     */
    readonly id: string
}

/**
 * Request parameters for ticketsTicketsUpdate operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketsUpdateRequest
 */
export interface TicketsApiTicketsTicketsUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof TicketsApiTicketsTicketsUpdate
     */
    readonly id: string

    /**
     * 
     * @type {Ticket}
     * @memberof TicketsApiTicketsTicketsUpdate
     */
    readonly data: Ticket
}

/**
 * TicketsApi - object-oriented interface
 * @export
 * @class TicketsApi
 * @extends {BaseAPI}
 */
export class TicketsApi extends BaseAPI {
    /**
     * 
     * @param {TicketsApiTicketsTicketActivitiesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketActivitiesCreate(requestParameters: TicketsApiTicketsTicketActivitiesCreateRequest, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketActivitiesCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Ticket Activities
     * @summary List Ticket Activities
     * @param {TicketsApiTicketsTicketActivitiesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketActivitiesList(requestParameters: TicketsApiTicketsTicketActivitiesListRequest = {}, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketActivitiesList(requestParameters.user, requestParameters.comments, requestParameters.timestamp, requestParameters.ticket, requestParameters.activityType, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketsApiTicketsTicketActivitiesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketActivitiesPartialUpdate(requestParameters: TicketsApiTicketsTicketActivitiesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketActivitiesPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketsApiTicketsTicketActivitiesReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketActivitiesRead(requestParameters: TicketsApiTicketsTicketActivitiesReadRequest, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketActivitiesRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketsApiTicketsTicketActivitiesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketActivitiesUpdate(requestParameters: TicketsApiTicketsTicketActivitiesUpdateRequest, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketActivitiesUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketsApiTicketsTicketTypesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketTypesCreate(requestParameters: TicketsApiTicketsTicketTypesCreateRequest, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketTypesCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Ticket Types
     * @summary List Ticket Types
     * @param {TicketsApiTicketsTicketTypesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketTypesList(requestParameters: TicketsApiTicketsTicketTypesListRequest = {}, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketTypesList(requestParameters.name, requestParameters.code, requestParameters.status, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketsApiTicketsTicketTypesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketTypesPartialUpdate(requestParameters: TicketsApiTicketsTicketTypesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketTypesPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketsApiTicketsTicketTypesReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketTypesRead(requestParameters: TicketsApiTicketsTicketTypesReadRequest, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketTypesRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketsApiTicketsTicketTypesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketTypesUpdate(requestParameters: TicketsApiTicketsTicketTypesUpdateRequest, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketTypesUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketsApiTicketsTicketsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketsCreate(requestParameters: TicketsApiTicketsTicketsCreateRequest, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketsCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Tickets
     * @summary List Tickets based on Tenant and Role
     * @param {TicketsApiTicketsTicketsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketsList(requestParameters: TicketsApiTicketsTicketsListRequest = {}, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketsList(requestParameters.page, requestParameters.pageSize, requestParameters.status, requestParameters.asset, requestParameters.assignedTo, requestParameters.ticketType, requestParameters.createdBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketsApiTicketsTicketsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketsPartialUpdate(requestParameters: TicketsApiTicketsTicketsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketsPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketsApiTicketsTicketsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketsRead(requestParameters: TicketsApiTicketsTicketsReadRequest, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketsApiTicketsTicketsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketsUpdate(requestParameters: TicketsApiTicketsTicketsUpdateRequest, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketsUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}


