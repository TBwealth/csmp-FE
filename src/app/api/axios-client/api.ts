/* tslint:disable */
/* eslint-disable */
/**
 * CSPM API
 * Test description
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccountsApiActivityLogsList200Response
 */
export interface AccountsApiActivityLogsList200Response {
    /**
     * 
     * @type {number}
     * @memberof AccountsApiActivityLogsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiActivityLogsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiActivityLogsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ActivityLog>}
     * @memberof AccountsApiActivityLogsList200Response
     */
    'results': Array<ActivityLog>;
}
/**
 * 
 * @export
 * @interface AccountsApiPermissionsList200Response
 */
export interface AccountsApiPermissionsList200Response {
    /**
     * 
     * @type {number}
     * @memberof AccountsApiPermissionsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiPermissionsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiPermissionsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Permission>}
     * @memberof AccountsApiPermissionsList200Response
     */
    'results': Array<Permission>;
}
/**
 * 
 * @export
 * @interface AccountsApiRolePermissionList200Response
 */
export interface AccountsApiRolePermissionList200Response {
    /**
     * 
     * @type {number}
     * @memberof AccountsApiRolePermissionList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiRolePermissionList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiRolePermissionList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<RolePermission>}
     * @memberof AccountsApiRolePermissionList200Response
     */
    'results': Array<RolePermission>;
}
/**
 * 
 * @export
 * @interface AccountsApiRolesList200Response
 */
export interface AccountsApiRolesList200Response {
    /**
     * 
     * @type {number}
     * @memberof AccountsApiRolesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiRolesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiRolesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Role>}
     * @memberof AccountsApiRolesList200Response
     */
    'results': Array<Role>;
}
/**
 * 
 * @export
 * @interface AccountsApiTenantsList200Response
 */
export interface AccountsApiTenantsList200Response {
    /**
     * 
     * @type {number}
     * @memberof AccountsApiTenantsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiTenantsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiTenantsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Tenant>}
     * @memberof AccountsApiTenantsList200Response
     */
    'results': Array<Tenant>;
}
/**
 * 
 * @export
 * @interface AccountsApiUsersList200Response
 */
export interface AccountsApiUsersList200Response {
    /**
     * 
     * @type {number}
     * @memberof AccountsApiUsersList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiUsersList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiUsersList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<TenantUser>}
     * @memberof AccountsApiUsersList200Response
     */
    'results': Array<TenantUser>;
}
/**
 * 
 * @export
 * @interface ActivityLog
 */
export interface ActivityLog {
    /**
     * 
     * @type {number}
     * @memberof ActivityLog
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ActivityLog
     */
    'actor'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ActivityLog
     */
    'action_type': ActivityLogActionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ActivityLog
     */
    'action_time'?: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityLog
     */
    'remarks'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ActivityLog
     */
    'status'?: ActivityLogStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof ActivityLog
     */
    'data'?: object;
    /**
     * 
     * @type {number}
     * @memberof ActivityLog
     */
    'tenant'?: number | null;
}

export const ActivityLogActionTypeEnum = {
    Create: 'Create',
    Read: 'Read',
    Update: 'Update',
    Delete: 'Delete',
    Login: 'Login',
    Logout: 'Logout',
    LoginFailed: 'Login Failed'
} as const;

export type ActivityLogActionTypeEnum = typeof ActivityLogActionTypeEnum[keyof typeof ActivityLogActionTypeEnum];
export const ActivityLogStatusEnum = {
    Success: 'Success',
    Failed: 'Failed'
} as const;

export type ActivityLogStatusEnum = typeof ActivityLogStatusEnum[keyof typeof ActivityLogStatusEnum];

/**
 * 
 * @export
 * @interface AssetManagement
 */
export interface AssetManagement {
    /**
     * 
     * @type {number}
     * @memberof AssetManagement
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof AssetManagement
     */
    'tenant': number;
    /**
     * 
     * @type {number}
     * @memberof AssetManagement
     */
    'resource_types': number;
    /**
     * 
     * @type {string}
     * @memberof AssetManagement
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AssetManagement
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof AssetManagement
     */
    'public_ip'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AssetManagement
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof AssetManagement
     */
    'cloud_identifier': string;
    /**
     * 
     * @type {number}
     * @memberof AssetManagement
     */
    'cloud_provider': number;
    /**
     * 
     * @type {number}
     * @memberof AssetManagement
     */
    'region': number;
}
/**
 * 
 * @export
 * @interface ByteArray
 */
export interface ByteArray {
    /**
     * 
     * @type {string}
     * @memberof ByteArray
     */
    'byte_array': string;
    /**
     * 
     * @type {string}
     * @memberof ByteArray
     */
    'file_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ByteArray
     */
    'file_extension'?: string;
}
/**
 * 
 * @export
 * @interface CloudProviderCloudProviderList200Response
 */
export interface CloudProviderCloudProviderList200Response {
    /**
     * 
     * @type {number}
     * @memberof CloudProviderCloudProviderList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof CloudProviderCloudProviderList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CloudProviderCloudProviderList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ProviderService>}
     * @memberof CloudProviderCloudProviderList200Response
     */
    'results': Array<ProviderService>;
}
/**
 * 
 * @export
 * @interface CloudProviderCloudProviderResourceTypesList200Response
 */
export interface CloudProviderCloudProviderResourceTypesList200Response {
    /**
     * 
     * @type {number}
     * @memberof CloudProviderCloudProviderResourceTypesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof CloudProviderCloudProviderResourceTypesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CloudProviderCloudProviderResourceTypesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<CloudProviderResourceTypes>}
     * @memberof CloudProviderCloudProviderResourceTypesList200Response
     */
    'results': Array<CloudProviderResourceTypes>;
}
/**
 * 
 * @export
 * @interface CloudProviderResourceTypes
 */
export interface CloudProviderResourceTypes {
    /**
     * 
     * @type {number}
     * @memberof CloudProviderResourceTypes
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CloudProviderResourceTypes
     */
    'cloud_provider'?: string;
    /**
     * 
     * @type {string}
     * @memberof CloudProviderResourceTypes
     */
    'resource_types'?: string;
    /**
     * 
     * @type {number}
     * @memberof CloudProviderResourceTypes
     */
    'cloud_provider_id': number;
    /**
     * 
     * @type {number}
     * @memberof CloudProviderResourceTypes
     */
    'resource_types_id'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof CloudProviderResourceTypes
     */
    'resource_types__id': Array<number>;
}
/**
 * 
 * @export
 * @interface CloudProviderResourceTypesList200Response
 */
export interface CloudProviderResourceTypesList200Response {
    /**
     * 
     * @type {number}
     * @memberof CloudProviderResourceTypesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof CloudProviderResourceTypesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CloudProviderResourceTypesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ResourceTypes>}
     * @memberof CloudProviderResourceTypesList200Response
     */
    'results': Array<ResourceTypes>;
}
/**
 * 
 * @export
 * @interface CustomPasswordReset
 */
export interface CustomPasswordReset {
    /**
     * 
     * @type {string}
     * @memberof CustomPasswordReset
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface CustomTicket
 */
export interface CustomTicket {
    /**
     * 
     * @type {number}
     * @memberof CustomTicket
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomTicket
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomTicket
     */
    'subject'?: string;
}
/**
 * 
 * @export
 * @interface CustomTicketType
 */
export interface CustomTicketType {
    /**
     * 
     * @type {number}
     * @memberof CustomTicketType
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomTicketType
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomTicketType
     */
    'code'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CustomTicketType
     */
    'status'?: boolean;
}
/**
 * 
 * @export
 * @interface HtmlData
 */
export interface HtmlData {
    /**
     * 
     * @type {string}
     * @memberof HtmlData
     */
    'html_data': string;
}
/**
 * 
 * @export
 * @interface JsonData
 */
export interface JsonData {
    /**
     * 
     * @type {object}
     * @memberof JsonData
     */
    'json_data': object;
}
/**
 * 
 * @export
 * @interface Login
 */
export interface Login {
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface PasswordChange
 */
export interface PasswordChange {
    /**
     * 
     * @type {string}
     * @memberof PasswordChange
     */
    'new_password1': string;
    /**
     * 
     * @type {string}
     * @memberof PasswordChange
     */
    'new_password2': string;
}
/**
 * 
 * @export
 * @interface Permission
 */
export interface Permission {
    /**
     * 
     * @type {number}
     * @memberof Permission
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Permission
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface Policy
 */
export interface Policy {
    /**
     * 
     * @type {number}
     * @memberof Policy
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Policy
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Policy
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof Policy
     */
    'status'?: boolean;
}
/**
 * 
 * @export
 * @interface PolicyPoliciesList200Response
 */
export interface PolicyPoliciesList200Response {
    /**
     * 
     * @type {number}
     * @memberof PolicyPoliciesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PolicyPoliciesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PolicyPoliciesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Policy>}
     * @memberof PolicyPoliciesList200Response
     */
    'results': Array<Policy>;
}
/**
 * 
 * @export
 * @interface PolicyPolicyRuleList200Response
 */
export interface PolicyPolicyRuleList200Response {
    /**
     * 
     * @type {number}
     * @memberof PolicyPolicyRuleList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PolicyPolicyRuleList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PolicyPolicyRuleList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<PolicyRule>}
     * @memberof PolicyPolicyRuleList200Response
     */
    'results': Array<PolicyRule>;
}
/**
 * 
 * @export
 * @interface PolicyRule
 */
export interface PolicyRule {
    /**
     * 
     * @type {number}
     * @memberof PolicyRule
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PolicyRule
     */
    'policy_id': number;
    /**
     * 
     * @type {string}
     * @memberof PolicyRule
     */
    'policy'?: string;
    /**
     * 
     * @type {number}
     * @memberof PolicyRule
     */
    'rule_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PolicyRule
     */
    'rule'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof PolicyRule
     */
    'rule__id': Array<number>;
}
/**
 * 
 * @export
 * @interface PolicyRulesList200Response
 */
export interface PolicyRulesList200Response {
    /**
     * 
     * @type {number}
     * @memberof PolicyRulesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PolicyRulesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PolicyRulesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Rule>}
     * @memberof PolicyRulesList200Response
     */
    'results': Array<Rule>;
}
/**
 * 
 * @export
 * @interface ProviderService
 */
export interface ProviderService {
    /**
     * 
     * @type {number}
     * @memberof ProviderService
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProviderService
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProviderService
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof ProviderService
     */
    'status'?: boolean;
}
/**
 * 
 * @export
 * @interface Region
 */
export interface Region {
    /**
     * 
     * @type {number}
     * @memberof Region
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Region
     */
    'cloud_provider': number;
    /**
     * 
     * @type {string}
     * @memberof Region
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Region
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof Region
     */
    'longitude': string;
    /**
     * 
     * @type {string}
     * @memberof Region
     */
    'latitude': string;
}
/**
 * 
 * @export
 * @interface Register
 */
export interface Register {
    /**
     * 
     * @type {string}
     * @memberof Register
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof Register
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof Register
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof Register
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof Register
     */
    'password2': string;
    /**
     * 
     * @type {number}
     * @memberof Register
     */
    'role'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Register
     */
    'tenant'?: number | null;
}
/**
 * 
 * @export
 * @interface RegisterAsset
 */
export interface RegisterAsset {
    /**
     * 
     * @type {number}
     * @memberof RegisterAsset
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RegisterAsset
     */
    'resource_types': number;
    /**
     * 
     * @type {string}
     * @memberof RegisterAsset
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterAsset
     */
    'region': string;
    /**
     * 
     * @type {number}
     * @memberof RegisterAsset
     */
    'tenant': number;
}
/**
 * 
 * @export
 * @interface ResourceTypes
 */
export interface ResourceTypes {
    /**
     * 
     * @type {number}
     * @memberof ResourceTypes
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResourceTypes
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ResourceTypes
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof ResourceTypes
     */
    'status'?: boolean;
}
/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {number}
     * @memberof Role
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface RolePermission
 */
export interface RolePermission {
    /**
     * 
     * @type {number}
     * @memberof RolePermission
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RolePermission
     */
    'role_id': number;
    /**
     * 
     * @type {number}
     * @memberof RolePermission
     */
    'permission_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof RolePermission
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof RolePermission
     */
    'permission'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof RolePermission
     */
    'permission__id': Array<number>;
}
/**
 * 
 * @export
 * @interface Rule
 */
export interface Rule {
    /**
     * 
     * @type {number}
     * @memberof Rule
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Rule
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Rule
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof Rule
     */
    'status'?: boolean;
}
/**
 * 
 * @export
 * @interface RuleText
 */
export interface RuleText {
    /**
     * 
     * @type {number}
     * @memberof RuleText
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof RuleText
     */
    'pass_text': string;
    /**
     * 
     * @type {string}
     * @memberof RuleText
     */
    'normal_text': string;
    /**
     * 
     * @type {string}
     * @memberof RuleText
     */
    'fail_text': string;
    /**
     * 
     * @type {number}
     * @memberof RuleText
     */
    'rule': number;
}
/**
 * 
 * @export
 * @interface SQLQuery
 */
export interface SQLQuery {
    /**
     * 
     * @type {string}
     * @memberof SQLQuery
     */
    'sql_query': string;
}
/**
 * 
 * @export
 * @interface SystemSetting
 */
export interface SystemSetting {
    /**
     * 
     * @type {number}
     * @memberof SystemSetting
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SystemSetting
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SystemSetting
     */
    'value': string;
    /**
     * 
     * @type {number}
     * @memberof SystemSetting
     */
    'tenant': number;
}
/**
 * 
 * @export
 * @interface SystemSettingsAssetManagementsList200Response
 */
export interface SystemSettingsAssetManagementsList200Response {
    /**
     * 
     * @type {number}
     * @memberof SystemSettingsAssetManagementsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsAssetManagementsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsAssetManagementsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<AssetManagement>}
     * @memberof SystemSettingsAssetManagementsList200Response
     */
    'results': Array<AssetManagement>;
}
/**
 * 
 * @export
 * @interface SystemSettingsRegionsList200Response
 */
export interface SystemSettingsRegionsList200Response {
    /**
     * 
     * @type {number}
     * @memberof SystemSettingsRegionsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsRegionsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsRegionsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Region>}
     * @memberof SystemSettingsRegionsList200Response
     */
    'results': Array<Region>;
}
/**
 * 
 * @export
 * @interface SystemSettingsRegisterTenantAssetsList200Response
 */
export interface SystemSettingsRegisterTenantAssetsList200Response {
    /**
     * 
     * @type {number}
     * @memberof SystemSettingsRegisterTenantAssetsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsRegisterTenantAssetsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsRegisterTenantAssetsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<RegisterAsset>}
     * @memberof SystemSettingsRegisterTenantAssetsList200Response
     */
    'results': Array<RegisterAsset>;
}
/**
 * 
 * @export
 * @interface SystemSettingsRuleTextsList200Response
 */
export interface SystemSettingsRuleTextsList200Response {
    /**
     * 
     * @type {number}
     * @memberof SystemSettingsRuleTextsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsRuleTextsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsRuleTextsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<RuleText>}
     * @memberof SystemSettingsRuleTextsList200Response
     */
    'results': Array<RuleText>;
}
/**
 * 
 * @export
 * @interface SystemSettingsSystemSettingsList200Response
 */
export interface SystemSettingsSystemSettingsList200Response {
    /**
     * 
     * @type {number}
     * @memberof SystemSettingsSystemSettingsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsSystemSettingsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsSystemSettingsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<SystemSetting>}
     * @memberof SystemSettingsSystemSettingsList200Response
     */
    'results': Array<SystemSetting>;
}
/**
 * 
 * @export
 * @interface Tenant
 */
export interface Tenant {
    /**
     * 
     * @type {number}
     * @memberof Tenant
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'tenant_name': string;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'admin_email'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Tenant
     */
    'status'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'logo'?: string | null;
}
/**
 * 
 * @export
 * @interface TenantRegister
 */
export interface TenantRegister {
    /**
     * 
     * @type {string}
     * @memberof TenantRegister
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof TenantRegister
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof TenantRegister
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof TenantRegister
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof TenantRegister
     */
    'password2': string;
}
/**
 * 
 * @export
 * @interface TenantSelfOnboard
 */
export interface TenantSelfOnboard {
    /**
     * 
     * @type {string}
     * @memberof TenantSelfOnboard
     */
    'tenant_name': string;
    /**
     * 
     * @type {string}
     * @memberof TenantSelfOnboard
     */
    'code'?: string;
    /**
     * 
     * @type {User}
     * @memberof TenantSelfOnboard
     */
    'user': User;
}
/**
 * 
 * @export
 * @interface TenantUser
 */
export interface TenantUser {
    /**
     * 
     * @type {number}
     * @memberof TenantUser
     */
    'id'?: number;
    /**
     * 
     * @type {Role}
     * @memberof TenantUser
     */
    'role': Role;
    /**
     * 
     * @type {string}
     * @memberof TenantUser
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof TenantUser
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof TenantUser
     */
    'tenant'?: string;
    /**
     * 
     * @type {string}
     * @memberof TenantUser
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof TenantUser
     */
    'user_image'?: string | null;
}
/**
 * 
 * @export
 * @interface Ticket
 */
export interface Ticket {
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    'id'?: number;
    /**
     * 
     * @type {CustomTicketType}
     * @memberof Ticket
     */
    'ticket_type': CustomTicketType;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'subject': string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'code': string;
    /**
     * 
     * @type {TicketAsset}
     * @memberof Ticket
     */
    'asset': TicketAsset;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'created_by'?: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'status'?: string;
    /**
     * 
     * @type {TicketUser}
     * @memberof Ticket
     */
    'assigned_to': TicketUser;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    'tenant'?: string;
}
/**
 * 
 * @export
 * @interface TicketActvity
 */
export interface TicketActvity {
    /**
     * 
     * @type {number}
     * @memberof TicketActvity
     */
    'id'?: number;
    /**
     * 
     * @type {CustomTicket}
     * @memberof TicketActvity
     */
    'ticket': CustomTicket;
    /**
     * 
     * @type {string}
     * @memberof TicketActvity
     */
    'comments': string;
    /**
     * 
     * @type {TicketUser}
     * @memberof TicketActvity
     */
    'user'?: TicketUser;
    /**
     * 
     * @type {string}
     * @memberof TicketActvity
     */
    'timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof TicketActvity
     */
    'activity_type': string;
}
/**
 * 
 * @export
 * @interface TicketAsset
 */
export interface TicketAsset {
    /**
     * 
     * @type {number}
     * @memberof TicketAsset
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TicketAsset
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TicketAsset
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof TicketAsset
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface TicketType
 */
export interface TicketType {
    /**
     * 
     * @type {number}
     * @memberof TicketType
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TicketType
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TicketType
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof TicketType
     */
    'status'?: boolean;
}
/**
 * 
 * @export
 * @interface TicketUser
 */
export interface TicketUser {
    /**
     * 
     * @type {number}
     * @memberof TicketUser
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TicketUser
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TicketUser
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TicketUser
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface TicketsTicketActivitiesList200Response
 */
export interface TicketsTicketActivitiesList200Response {
    /**
     * 
     * @type {number}
     * @memberof TicketsTicketActivitiesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof TicketsTicketActivitiesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TicketsTicketActivitiesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<TicketActvity>}
     * @memberof TicketsTicketActivitiesList200Response
     */
    'results': Array<TicketActvity>;
}
/**
 * 
 * @export
 * @interface TicketsTicketTypesList200Response
 */
export interface TicketsTicketTypesList200Response {
    /**
     * 
     * @type {number}
     * @memberof TicketsTicketTypesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof TicketsTicketTypesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TicketsTicketTypesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<TicketType>}
     * @memberof TicketsTicketTypesList200Response
     */
    'results': Array<TicketType>;
}
/**
 * 
 * @export
 * @interface TicketsTicketsList200Response
 */
export interface TicketsTicketsList200Response {
    /**
     * 
     * @type {number}
     * @memberof TicketsTicketsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof TicketsTicketsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TicketsTicketsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Ticket>}
     * @memberof TicketsTicketsList200Response
     */
    'results': Array<Ticket>;
}
/**
 * 
 * @export
 * @interface TokenObtainPair
 */
export interface TokenObtainPair {
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPair
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPair
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface TokenRefresh
 */
export interface TokenRefresh {
    /**
     * 
     * @type {string}
     * @memberof TokenRefresh
     */
    'refresh': string;
    /**
     * 
     * @type {string}
     * @memberof TokenRefresh
     */
    'access'?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'password2': string;
}

/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List ActivityLogs
         * @summary List created ActivityLogs
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiActivityLogsList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/api/activity_logs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * retrieves an ActivityLog
         * @summary Retrieves an instance of a ActivityLog
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiActivityLogsRead: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiActivityLogsRead', 'id', id)
            const localVarPath = `/accounts/api/activity_logs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Admin Registers a New Tenant
         * @summary Admin Registers/Onboards a New Tenant
         * @param {Register} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiAdminTenantUserRegisterCreate: async (data: Register, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiAdminTenantUserRegisterCreate', 'data', data)
            const localVarPath = `/accounts/api/admin_tenant_user_register/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefresh} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiApiTokenRefreshCreate: async (data: TokenRefresh, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiApiTokenRefreshCreate', 'data', data)
            const localVarPath = `/accounts/api/api/token/refresh/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object\'s key.
         * @param {Login} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiLoginCreate: async (data: Login, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiLoginCreate', 'data', data)
            const localVarPath = `/accounts/api/login/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accepts/Returns nothing.
         * @summary Calls Django logout method and delete the Token object assigned to the current User object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiLogoutCreate: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/api/logout/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accepts/Returns nothing.
         * @summary Calls Django logout method and delete the Token object assigned to the current User object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiLogoutList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/api/logout/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
         * @summary Calls Django Auth SetPasswordForm save method.
         * @param {PasswordChange} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPasswordChangeCreate: async (data: PasswordChange, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiPasswordChangeCreate', 'data', data)
            const localVarPath = `/accounts/api/password/change/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends auto-generated Password Reset to User
         * @summary Email User Password Reset
         * @param {CustomPasswordReset} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPasswordResetCreate: async (data: CustomPasswordReset, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiPasswordResetCreate', 'data', data)
            const localVarPath = `/accounts/api/password_reset/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create Permission
         * @summary Creates new Permission
         * @param {Permission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPermissionsCreate: async (data: Permission, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiPermissionsCreate', 'data', data)
            const localVarPath = `/accounts/api/permissions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Permissions
         * @summary List created Permissions
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPermissionsList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/api/permissions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * partially update Permission
         * @summary partially updates a Permission property
         * @param {number} id A unique integer value identifying this permission.
         * @param {Permission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPermissionsPartialUpdate: async (id: number, data: Permission, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiPermissionsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiPermissionsPartialUpdate', 'data', data)
            const localVarPath = `/accounts/api/permissions/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * retrieves a Permission
         * @summary Retrieves an instance of a Permission
         * @param {number} id A unique integer value identifying this permission.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPermissionsRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiPermissionsRead', 'id', id)
            const localVarPath = `/accounts/api/permissions/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update Permission
         * @summary updates a Permission
         * @param {number} id A unique integer value identifying this permission.
         * @param {Permission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPermissionsUpdate: async (id: number, data: Permission, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiPermissionsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiPermissionsUpdate', 'data', data)
            const localVarPath = `/accounts/api/permissions/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RolePermission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolePermissionCreate: async (data: RolePermission, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiRolePermissionCreate', 'data', data)
            const localVarPath = `/accounts/api/role_permission/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolePermissionList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/api/role_permission/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * retrieves a RolePermission (Please pass role id for the id field)
         * @summary Retrieves an instance of a Role and its Permissions
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolePermissionsRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiRolePermissionsRead', 'id', id)
            const localVarPath = `/accounts/api/role_permissions/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create Role
         * @summary Creates new Role
         * @param {Role} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolesCreate: async (data: Role, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiRolesCreate', 'data', data)
            const localVarPath = `/accounts/api/roles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Roles
         * @summary List created Roles
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolesList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/api/roles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * partially update Role
         * @summary partially updates a Role property
         * @param {number} id A unique integer value identifying this role.
         * @param {Role} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolesPartialUpdate: async (id: number, data: Role, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiRolesPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiRolesPartialUpdate', 'data', data)
            const localVarPath = `/accounts/api/roles/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * retrieves a Role
         * @summary Retrieves an instance of a Role
         * @param {number} id A unique integer value identifying this role.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolesRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiRolesRead', 'id', id)
            const localVarPath = `/accounts/api/roles/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update Role
         * @summary updates a Role property
         * @param {number} id A unique integer value identifying this role.
         * @param {Role} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolesUpdate: async (id: number, data: Role, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiRolesUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiRolesUpdate', 'data', data)
            const localVarPath = `/accounts/api/roles/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tenant Registers/Self Onboards
         * @summary Tenant Registers/Self onboards
         * @param {TenantSelfOnboard} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTenantSelfOnboardRegisterCreate: async (data: TenantSelfOnboard, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiTenantSelfOnboardRegisterCreate', 'data', data)
            const localVarPath = `/accounts/api/tenant_self_onboard_register/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tenant Registers/Onboards a New TenantUser
         * @summary Tenant Registers/Onboards a New TenantUser
         * @param {TenantRegister} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTenantUserRegisterCreate: async (data: TenantRegister, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiTenantUserRegisterCreate', 'data', data)
            const localVarPath = `/accounts/api/tenant_user_register/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create Tenant
         * @summary Creates new Tenant
         * @param {Tenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTenantsCreate: async (data: Tenant, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiTenantsCreate', 'data', data)
            const localVarPath = `/accounts/api/tenants/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Tenants
         * @summary List created Tenants
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTenantsList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/api/tenants/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * partially update Tenant
         * @summary partially updates a Tenant property
         * @param {number} id A unique integer value identifying this tenant.
         * @param {Tenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTenantsPartialUpdate: async (id: number, data: Tenant, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiTenantsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiTenantsPartialUpdate', 'data', data)
            const localVarPath = `/accounts/api/tenants/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * retrieves a Tenant
         * @summary Retrieves an instance of a Tenant
         * @param {number} id A unique integer value identifying this tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTenantsRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiTenantsRead', 'id', id)
            const localVarPath = `/accounts/api/tenants/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update Tenant
         * @summary updates a Tenant property
         * @param {number} id A unique integer value identifying this tenant.
         * @param {Tenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTenantsUpdate: async (id: number, data: Tenant, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiTenantsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiTenantsUpdate', 'data', data)
            const localVarPath = `/accounts/api/tenants/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {TokenObtainPair} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTokenCreate: async (data: TokenObtainPair, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiTokenCreate', 'data', data)
            const localVarPath = `/accounts/api/token/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates Role Permissions (Admin)
         * @summary Updates Role Permissions. You can pass an Array as payload
         * @param {RolePermission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiUpdateRolePermissionUpdate: async (data: RolePermission, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiUpdateRolePermissionUpdate', 'data', data)
            const localVarPath = `/accounts/api/update_role_permission/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Users
         * @summary List created Users in Request User Tenant
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiUsersList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/api/users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * partially update Tenant User propert
         * @summary partially updates a User property
         * @param {string} id 
         * @param {TenantUser} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiUsersPartialUpdate: async (id: string, data: TenantUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiUsersPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiUsersPartialUpdate', 'data', data)
            const localVarPath = `/accounts/api/users/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * retrieves a Tenant User
         * @summary Retrieves an instance of a Tenant User
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiUsersRead: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiUsersRead', 'id', id)
            const localVarPath = `/accounts/api/users/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update Tenant User property
         * @summary updates a Tenant User property
         * @param {string} id 
         * @param {TenantUser} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiUsersUpdate: async (id: string, data: TenantUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsApiUsersUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsApiUsersUpdate', 'data', data)
            const localVarPath = `/accounts/api/users/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * List ActivityLogs
         * @summary List created ActivityLogs
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiActivityLogsList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsApiActivityLogsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiActivityLogsList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * retrieves an ActivityLog
         * @summary Retrieves an instance of a ActivityLog
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiActivityLogsRead(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActivityLog>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiActivityLogsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Admin Registers a New Tenant
         * @summary Admin Registers/Onboards a New Tenant
         * @param {Register} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiAdminTenantUserRegisterCreate(data: Register, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Register>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiAdminTenantUserRegisterCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefresh} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiApiTokenRefreshCreate(data: TokenRefresh, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenRefresh>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiApiTokenRefreshCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object\'s key.
         * @param {Login} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiLoginCreate(data: Login, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Login>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiLoginCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Accepts/Returns nothing.
         * @summary Calls Django logout method and delete the Token object assigned to the current User object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiLogoutCreate(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiLogoutCreate(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Accepts/Returns nothing.
         * @summary Calls Django logout method and delete the Token object assigned to the current User object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiLogoutList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiLogoutList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
         * @summary Calls Django Auth SetPasswordForm save method.
         * @param {PasswordChange} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiPasswordChangeCreate(data: PasswordChange, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordChange>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiPasswordChangeCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends auto-generated Password Reset to User
         * @summary Email User Password Reset
         * @param {CustomPasswordReset} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiPasswordResetCreate(data: CustomPasswordReset, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomPasswordReset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiPasswordResetCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create Permission
         * @summary Creates new Permission
         * @param {Permission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiPermissionsCreate(data: Permission, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Permission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiPermissionsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Permissions
         * @summary List created Permissions
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiPermissionsList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsApiPermissionsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiPermissionsList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * partially update Permission
         * @summary partially updates a Permission property
         * @param {number} id A unique integer value identifying this permission.
         * @param {Permission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiPermissionsPartialUpdate(id: number, data: Permission, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Permission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiPermissionsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * retrieves a Permission
         * @summary Retrieves an instance of a Permission
         * @param {number} id A unique integer value identifying this permission.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiPermissionsRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Permission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiPermissionsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update Permission
         * @summary updates a Permission
         * @param {number} id A unique integer value identifying this permission.
         * @param {Permission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiPermissionsUpdate(id: number, data: Permission, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Permission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiPermissionsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RolePermission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiRolePermissionCreate(data: RolePermission, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolePermission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiRolePermissionCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiRolePermissionList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsApiRolePermissionList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiRolePermissionList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * retrieves a RolePermission (Please pass role id for the id field)
         * @summary Retrieves an instance of a Role and its Permissions
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiRolePermissionRead(roleId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolePermission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiRolePermissionsRead(roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create Role
         * @summary Creates new Role
         * @param {Role} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiRolesCreate(data: Role, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiRolesCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Roles
         * @summary List created Roles
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiRolesList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsApiRolesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiRolesList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * partially update Role
         * @summary partially updates a Role property
         * @param {number} id A unique integer value identifying this role.
         * @param {Role} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiRolesPartialUpdate(id: number, data: Role, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiRolesPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * retrieves a Role
         * @summary Retrieves an instance of a Role
         * @param {number} id A unique integer value identifying this role.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiRolesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiRolesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update Role
         * @summary updates a Role property
         * @param {number} id A unique integer value identifying this role.
         * @param {Role} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiRolesUpdate(id: number, data: Role, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiRolesUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Tenant Registers/Self Onboards
         * @summary Tenant Registers/Self onboards
         * @param {TenantSelfOnboard} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiTenantSelfOnboardRegisterCreate(data: TenantSelfOnboard, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantSelfOnboard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiTenantSelfOnboardRegisterCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Tenant Registers/Onboards a New TenantUser
         * @summary Tenant Registers/Onboards a New TenantUser
         * @param {TenantRegister} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiTenantUserRegisterCreate(data: TenantRegister, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantRegister>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiTenantUserRegisterCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create Tenant
         * @summary Creates new Tenant
         * @param {Tenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiTenantsCreate(data: Tenant, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tenant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiTenantsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Tenants
         * @summary List created Tenants
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiTenantsList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsApiTenantsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiTenantsList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * partially update Tenant
         * @summary partially updates a Tenant property
         * @param {number} id A unique integer value identifying this tenant.
         * @param {Tenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiTenantsPartialUpdate(id: number, data: Tenant, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tenant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiTenantsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * retrieves a Tenant
         * @summary Retrieves an instance of a Tenant
         * @param {number} id A unique integer value identifying this tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiTenantsRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tenant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiTenantsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update Tenant
         * @summary updates a Tenant property
         * @param {number} id A unique integer value identifying this tenant.
         * @param {Tenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiTenantsUpdate(id: number, data: Tenant, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tenant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiTenantsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {TokenObtainPair} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiTokenCreate(data: TokenObtainPair, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenObtainPair>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiTokenCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates Role Permissions (Admin)
         * @summary Updates Role Permissions. You can pass an Array as payload
         * @param {RolePermission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiUpdateRolePermissionUpdate(data: RolePermission, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolePermission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiUpdateRolePermissionUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Users
         * @summary List created Users in Request User Tenant
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiUsersList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsApiUsersList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiUsersList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * partially update Tenant User propert
         * @summary partially updates a User property
         * @param {string} id 
         * @param {TenantUser} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiUsersPartialUpdate(id: string, data: TenantUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiUsersPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * retrieves a Tenant User
         * @summary Retrieves an instance of a Tenant User
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiUsersRead(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiUsersRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update Tenant User property
         * @summary updates a Tenant User property
         * @param {string} id 
         * @param {TenantUser} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiUsersUpdate(id: string, data: TenantUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiUsersUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * List ActivityLogs
         * @summary List created ActivityLogs
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiActivityLogsList(page?: number, options?: any): AxiosPromise<AccountsApiActivityLogsList200Response> {
            return localVarFp.accountsApiActivityLogsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * retrieves an ActivityLog
         * @summary Retrieves an instance of a ActivityLog
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiActivityLogsRead(id: string, options?: any): AxiosPromise<ActivityLog> {
            return localVarFp.accountsApiActivityLogsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Admin Registers a New Tenant
         * @summary Admin Registers/Onboards a New Tenant
         * @param {Register} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiAdminTenantUserRegisterCreate(data: Register, options?: any): AxiosPromise<Register> {
            return localVarFp.accountsApiAdminTenantUserRegisterCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefresh} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiApiTokenRefreshCreate(data: TokenRefresh, options?: any): AxiosPromise<TokenRefresh> {
            return localVarFp.accountsApiApiTokenRefreshCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object\'s key.
         * @param {Login} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiLoginCreate(data: Login, options?: any): AxiosPromise<Login> {
            return localVarFp.accountsApiLoginCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Accepts/Returns nothing.
         * @summary Calls Django logout method and delete the Token object assigned to the current User object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiLogoutCreate(options?: any): AxiosPromise<void> {
            return localVarFp.accountsApiLogoutCreate(options).then((request) => request(axios, basePath));
        },
        /**
         * Accepts/Returns nothing.
         * @summary Calls Django logout method and delete the Token object assigned to the current User object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiLogoutList(options?: any): AxiosPromise<void> {
            return localVarFp.accountsApiLogoutList(options).then((request) => request(axios, basePath));
        },
        /**
         * Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
         * @summary Calls Django Auth SetPasswordForm save method.
         * @param {PasswordChange} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPasswordChangeCreate(data: PasswordChange, options?: any): AxiosPromise<PasswordChange> {
            return localVarFp.accountsApiPasswordChangeCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends auto-generated Password Reset to User
         * @summary Email User Password Reset
         * @param {CustomPasswordReset} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPasswordResetCreate(data: CustomPasswordReset, options?: any): AxiosPromise<CustomPasswordReset> {
            return localVarFp.accountsApiPasswordResetCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Create Permission
         * @summary Creates new Permission
         * @param {Permission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPermissionsCreate(data: Permission, options?: any): AxiosPromise<Permission> {
            return localVarFp.accountsApiPermissionsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * List Permissions
         * @summary List created Permissions
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPermissionsList(page?: number, options?: any): AxiosPromise<AccountsApiPermissionsList200Response> {
            return localVarFp.accountsApiPermissionsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * partially update Permission
         * @summary partially updates a Permission property
         * @param {number} id A unique integer value identifying this permission.
         * @param {Permission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPermissionsPartialUpdate(id: number, data: Permission, options?: any): AxiosPromise<Permission> {
            return localVarFp.accountsApiPermissionsPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * retrieves a Permission
         * @summary Retrieves an instance of a Permission
         * @param {number} id A unique integer value identifying this permission.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPermissionsRead(id: number, options?: any): AxiosPromise<Permission> {
            return localVarFp.accountsApiPermissionsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * update Permission
         * @summary updates a Permission
         * @param {number} id A unique integer value identifying this permission.
         * @param {Permission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiPermissionsUpdate(id: number, data: Permission, options?: any): AxiosPromise<Permission> {
            return localVarFp.accountsApiPermissionsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RolePermission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolePermissionCreate(data: RolePermission, options?: any): AxiosPromise<RolePermission> {
            return localVarFp.accountsApiRolePermissionCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolePermissionList(page?: number, options?: any): AxiosPromise<AccountsApiRolePermissionList200Response> {
            return localVarFp.accountsApiRolePermissionList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * retrieves a RolePermission (Please pass role id for the id field)
         * @summary Retrieves an instance of a Role and its Permissions
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolePermissionRead(roleId: string, options?: any): AxiosPromise<RolePermission> {
            return localVarFp.accountsApiRolePermissionRead(roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create Role
         * @summary Creates new Role
         * @param {Role} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolesCreate(data: Role, options?: any): AxiosPromise<Role> {
            return localVarFp.accountsApiRolesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * List Roles
         * @summary List created Roles
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolesList(page?: number, options?: any): AxiosPromise<AccountsApiRolesList200Response> {
            return localVarFp.accountsApiRolesList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * partially update Role
         * @summary partially updates a Role property
         * @param {number} id A unique integer value identifying this role.
         * @param {Role} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolesPartialUpdate(id: number, data: Role, options?: any): AxiosPromise<Role> {
            return localVarFp.accountsApiRolesPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * retrieves a Role
         * @summary Retrieves an instance of a Role
         * @param {number} id A unique integer value identifying this role.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolesRead(id: number, options?: any): AxiosPromise<Role> {
            return localVarFp.accountsApiRolesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * update Role
         * @summary updates a Role property
         * @param {number} id A unique integer value identifying this role.
         * @param {Role} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiRolesUpdate(id: number, data: Role, options?: any): AxiosPromise<Role> {
            return localVarFp.accountsApiRolesUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Tenant Registers/Self Onboards
         * @summary Tenant Registers/Self onboards
         * @param {TenantSelfOnboard} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTenantSelfOnboardRegisterCreate(data: TenantSelfOnboard, options?: any): AxiosPromise<TenantSelfOnboard> {
            return localVarFp.accountsApiTenantSelfOnboardRegisterCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Tenant Registers/Onboards a New TenantUser
         * @summary Tenant Registers/Onboards a New TenantUser
         * @param {TenantRegister} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTenantUserRegisterCreate(data: TenantRegister, options?: any): AxiosPromise<TenantRegister> {
            return localVarFp.accountsApiTenantUserRegisterCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Create Tenant
         * @summary Creates new Tenant
         * @param {Tenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTenantsCreate(data: Tenant, options?: any): AxiosPromise<Tenant> {
            return localVarFp.accountsApiTenantsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * List Tenants
         * @summary List created Tenants
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTenantsList(page?: number, options?: any): AxiosPromise<AccountsApiTenantsList200Response> {
            return localVarFp.accountsApiTenantsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * partially update Tenant
         * @summary partially updates a Tenant property
         * @param {number} id A unique integer value identifying this tenant.
         * @param {Tenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTenantsPartialUpdate(id: number, data: Tenant, options?: any): AxiosPromise<Tenant> {
            return localVarFp.accountsApiTenantsPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * retrieves a Tenant
         * @summary Retrieves an instance of a Tenant
         * @param {number} id A unique integer value identifying this tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTenantsRead(id: number, options?: any): AxiosPromise<Tenant> {
            return localVarFp.accountsApiTenantsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * update Tenant
         * @summary updates a Tenant property
         * @param {number} id A unique integer value identifying this tenant.
         * @param {Tenant} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTenantsUpdate(id: number, data: Tenant, options?: any): AxiosPromise<Tenant> {
            return localVarFp.accountsApiTenantsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {TokenObtainPair} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTokenCreate(data: TokenObtainPair, options?: any): AxiosPromise<TokenObtainPair> {
            return localVarFp.accountsApiTokenCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates Role Permissions (Admin)
         * @summary Updates Role Permissions. You can pass an Array as payload
         * @param {RolePermission} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiUpdateRolePermissionUpdate(data: RolePermission, options?: any): AxiosPromise<RolePermission> {
            return localVarFp.accountsApiUpdateRolePermissionUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * List Users
         * @summary List created Users in Request User Tenant
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiUsersList(page?: number, options?: any): AxiosPromise<AccountsApiUsersList200Response> {
            return localVarFp.accountsApiUsersList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * partially update Tenant User propert
         * @summary partially updates a User property
         * @param {string} id 
         * @param {TenantUser} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiUsersPartialUpdate(id: string, data: TenantUser, options?: any): AxiosPromise<TenantUser> {
            return localVarFp.accountsApiUsersPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * retrieves a Tenant User
         * @summary Retrieves an instance of a Tenant User
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiUsersRead(id: string, options?: any): AxiosPromise<TenantUser> {
            return localVarFp.accountsApiUsersRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * update Tenant User property
         * @summary updates a Tenant User property
         * @param {string} id 
         * @param {TenantUser} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiUsersUpdate(id: string, data: TenantUser, options?: any): AxiosPromise<TenantUser> {
            return localVarFp.accountsApiUsersUpdate(id, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for accountsApiActivityLogsList operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiActivityLogsListRequest
 */
export interface AccountsApiAccountsApiActivityLogsListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof AccountsApiAccountsApiActivityLogsList
     */
    readonly page?: number
}

/**
 * Request parameters for accountsApiActivityLogsRead operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiActivityLogsReadRequest
 */
export interface AccountsApiAccountsApiActivityLogsReadRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountsApiAccountsApiActivityLogsRead
     */
    readonly id: string
}

/**
 * Request parameters for accountsApiAdminTenantUserRegisterCreate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiAdminTenantUserRegisterCreateRequest
 */
export interface AccountsApiAccountsApiAdminTenantUserRegisterCreateRequest {
    /**
     * 
     * @type {Register}
     * @memberof AccountsApiAccountsApiAdminTenantUserRegisterCreate
     */
    readonly data: Register
}

/**
 * Request parameters for accountsApiApiTokenRefreshCreate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiApiTokenRefreshCreateRequest
 */
export interface AccountsApiAccountsApiApiTokenRefreshCreateRequest {
    /**
     * 
     * @type {TokenRefresh}
     * @memberof AccountsApiAccountsApiApiTokenRefreshCreate
     */
    readonly data: TokenRefresh
}

/**
 * Request parameters for accountsApiLoginCreate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiLoginCreateRequest
 */
export interface AccountsApiAccountsApiLoginCreateRequest {
    /**
     * 
     * @type {Login}
     * @memberof AccountsApiAccountsApiLoginCreate
     */
    readonly data: Login
}

/**
 * Request parameters for accountsApiPasswordChangeCreate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiPasswordChangeCreateRequest
 */
export interface AccountsApiAccountsApiPasswordChangeCreateRequest {
    /**
     * 
     * @type {PasswordChange}
     * @memberof AccountsApiAccountsApiPasswordChangeCreate
     */
    readonly data: PasswordChange
}

/**
 * Request parameters for accountsApiPasswordResetCreate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiPasswordResetCreateRequest
 */
export interface AccountsApiAccountsApiPasswordResetCreateRequest {
    /**
     * 
     * @type {CustomPasswordReset}
     * @memberof AccountsApiAccountsApiPasswordResetCreate
     */
    readonly data: CustomPasswordReset
}

/**
 * Request parameters for accountsApiPermissionsCreate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiPermissionsCreateRequest
 */
export interface AccountsApiAccountsApiPermissionsCreateRequest {
    /**
     * 
     * @type {Permission}
     * @memberof AccountsApiAccountsApiPermissionsCreate
     */
    readonly data: Permission
}

/**
 * Request parameters for accountsApiPermissionsList operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiPermissionsListRequest
 */
export interface AccountsApiAccountsApiPermissionsListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof AccountsApiAccountsApiPermissionsList
     */
    readonly page?: number
}

/**
 * Request parameters for accountsApiPermissionsPartialUpdate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiPermissionsPartialUpdateRequest
 */
export interface AccountsApiAccountsApiPermissionsPartialUpdateRequest {
    /**
     * A unique integer value identifying this permission.
     * @type {number}
     * @memberof AccountsApiAccountsApiPermissionsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Permission}
     * @memberof AccountsApiAccountsApiPermissionsPartialUpdate
     */
    readonly data: Permission
}

/**
 * Request parameters for accountsApiPermissionsRead operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiPermissionsReadRequest
 */
export interface AccountsApiAccountsApiPermissionsReadRequest {
    /**
     * A unique integer value identifying this permission.
     * @type {number}
     * @memberof AccountsApiAccountsApiPermissionsRead
     */
    readonly id: number
}

/**
 * Request parameters for accountsApiPermissionsUpdate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiPermissionsUpdateRequest
 */
export interface AccountsApiAccountsApiPermissionsUpdateRequest {
    /**
     * A unique integer value identifying this permission.
     * @type {number}
     * @memberof AccountsApiAccountsApiPermissionsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Permission}
     * @memberof AccountsApiAccountsApiPermissionsUpdate
     */
    readonly data: Permission
}

/**
 * Request parameters for accountsApiRolePermissionCreate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiRolePermissionCreateRequest
 */
export interface AccountsApiAccountsApiRolePermissionCreateRequest {
    /**
     * 
     * @type {RolePermission}
     * @memberof AccountsApiAccountsApiRolePermissionCreate
     */
    readonly data: RolePermission
}

/**
 * Request parameters for accountsApiRolePermissionList operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiRolePermissionListRequest
 */
export interface AccountsApiAccountsApiRolePermissionListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof AccountsApiAccountsApiRolePermissionList
     */
    readonly page?: number
}

/**
 * Request parameters for accountsApiRolePermissionRead operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiRolePermissionReadRequest
 */
export interface AccountsApiAccountsApiRolePermissionReadRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountsApiAccountsApiRolePermissionRead
     */
    readonly roleId: string
}

/**
 * Request parameters for accountsApiRolesCreate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiRolesCreateRequest
 */
export interface AccountsApiAccountsApiRolesCreateRequest {
    /**
     * 
     * @type {Role}
     * @memberof AccountsApiAccountsApiRolesCreate
     */
    readonly data: Role
}

/**
 * Request parameters for accountsApiRolesList operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiRolesListRequest
 */
export interface AccountsApiAccountsApiRolesListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof AccountsApiAccountsApiRolesList
     */
    readonly page?: number
}

/**
 * Request parameters for accountsApiRolesPartialUpdate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiRolesPartialUpdateRequest
 */
export interface AccountsApiAccountsApiRolesPartialUpdateRequest {
    /**
     * A unique integer value identifying this role.
     * @type {number}
     * @memberof AccountsApiAccountsApiRolesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Role}
     * @memberof AccountsApiAccountsApiRolesPartialUpdate
     */
    readonly data: Role
}

/**
 * Request parameters for accountsApiRolesRead operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiRolesReadRequest
 */
export interface AccountsApiAccountsApiRolesReadRequest {
    /**
     * A unique integer value identifying this role.
     * @type {number}
     * @memberof AccountsApiAccountsApiRolesRead
     */
    readonly id: number
}

/**
 * Request parameters for accountsApiRolesUpdate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiRolesUpdateRequest
 */
export interface AccountsApiAccountsApiRolesUpdateRequest {
    /**
     * A unique integer value identifying this role.
     * @type {number}
     * @memberof AccountsApiAccountsApiRolesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Role}
     * @memberof AccountsApiAccountsApiRolesUpdate
     */
    readonly data: Role
}

/**
 * Request parameters for accountsApiTenantSelfOnboardRegisterCreate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiTenantSelfOnboardRegisterCreateRequest
 */
export interface AccountsApiAccountsApiTenantSelfOnboardRegisterCreateRequest {
    /**
     * 
     * @type {TenantSelfOnboard}
     * @memberof AccountsApiAccountsApiTenantSelfOnboardRegisterCreate
     */
    readonly data: TenantSelfOnboard
}

/**
 * Request parameters for accountsApiTenantUserRegisterCreate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiTenantUserRegisterCreateRequest
 */
export interface AccountsApiAccountsApiTenantUserRegisterCreateRequest {
    /**
     * 
     * @type {TenantRegister}
     * @memberof AccountsApiAccountsApiTenantUserRegisterCreate
     */
    readonly data: TenantRegister
}

/**
 * Request parameters for accountsApiTenantsCreate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiTenantsCreateRequest
 */
export interface AccountsApiAccountsApiTenantsCreateRequest {
    /**
     * 
     * @type {Tenant}
     * @memberof AccountsApiAccountsApiTenantsCreate
     */
    readonly data: Tenant
}

/**
 * Request parameters for accountsApiTenantsList operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiTenantsListRequest
 */
export interface AccountsApiAccountsApiTenantsListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof AccountsApiAccountsApiTenantsList
     */
    readonly page?: number
}

/**
 * Request parameters for accountsApiTenantsPartialUpdate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiTenantsPartialUpdateRequest
 */
export interface AccountsApiAccountsApiTenantsPartialUpdateRequest {
    /**
     * A unique integer value identifying this tenant.
     * @type {number}
     * @memberof AccountsApiAccountsApiTenantsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Tenant}
     * @memberof AccountsApiAccountsApiTenantsPartialUpdate
     */
    readonly data: Tenant
}

/**
 * Request parameters for accountsApiTenantsRead operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiTenantsReadRequest
 */
export interface AccountsApiAccountsApiTenantsReadRequest {
    /**
     * A unique integer value identifying this tenant.
     * @type {number}
     * @memberof AccountsApiAccountsApiTenantsRead
     */
    readonly id: number
}

/**
 * Request parameters for accountsApiTenantsUpdate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiTenantsUpdateRequest
 */
export interface AccountsApiAccountsApiTenantsUpdateRequest {
    /**
     * A unique integer value identifying this tenant.
     * @type {number}
     * @memberof AccountsApiAccountsApiTenantsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Tenant}
     * @memberof AccountsApiAccountsApiTenantsUpdate
     */
    readonly data: Tenant
}

/**
 * Request parameters for accountsApiTokenCreate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiTokenCreateRequest
 */
export interface AccountsApiAccountsApiTokenCreateRequest {
    /**
     * 
     * @type {TokenObtainPair}
     * @memberof AccountsApiAccountsApiTokenCreate
     */
    readonly data: TokenObtainPair
}

/**
 * Request parameters for accountsApiUpdateRolePermissionUpdate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiUpdateRolePermissionUpdateRequest
 */
export interface AccountsApiAccountsApiUpdateRolePermissionUpdateRequest {
    /**
     * 
     * @type {RolePermission}
     * @memberof AccountsApiAccountsApiUpdateRolePermissionUpdate
     */
    readonly data: RolePermission
}

/**
 * Request parameters for accountsApiUsersList operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiUsersListRequest
 */
export interface AccountsApiAccountsApiUsersListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof AccountsApiAccountsApiUsersList
     */
    readonly page?: number
}

/**
 * Request parameters for accountsApiUsersPartialUpdate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiUsersPartialUpdateRequest
 */
export interface AccountsApiAccountsApiUsersPartialUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountsApiAccountsApiUsersPartialUpdate
     */
    readonly id: string

    /**
     * 
     * @type {TenantUser}
     * @memberof AccountsApiAccountsApiUsersPartialUpdate
     */
    readonly data: TenantUser
}

/**
 * Request parameters for accountsApiUsersRead operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiUsersReadRequest
 */
export interface AccountsApiAccountsApiUsersReadRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountsApiAccountsApiUsersRead
     */
    readonly id: string
}

/**
 * Request parameters for accountsApiUsersUpdate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountsApiUsersUpdateRequest
 */
export interface AccountsApiAccountsApiUsersUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountsApiAccountsApiUsersUpdate
     */
    readonly id: string

    /**
     * 
     * @type {TenantUser}
     * @memberof AccountsApiAccountsApiUsersUpdate
     */
    readonly data: TenantUser
}

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     * List ActivityLogs
     * @summary List created ActivityLogs
     * @param {AccountsApiAccountsApiActivityLogsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiActivityLogsList(requestParameters: AccountsApiAccountsApiActivityLogsListRequest = {}, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiActivityLogsList(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * retrieves an ActivityLog
     * @summary Retrieves an instance of a ActivityLog
     * @param {AccountsApiAccountsApiActivityLogsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiActivityLogsRead(requestParameters: AccountsApiAccountsApiActivityLogsReadRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiActivityLogsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Admin Registers a New Tenant
     * @summary Admin Registers/Onboards a New Tenant
     * @param {AccountsApiAccountsApiAdminTenantUserRegisterCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiAdminTenantUserRegisterCreate(requestParameters: AccountsApiAccountsApiAdminTenantUserRegisterCreateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiAdminTenantUserRegisterCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     * @param {AccountsApiAccountsApiApiTokenRefreshCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiApiTokenRefreshCreate(requestParameters: AccountsApiAccountsApiApiTokenRefreshCreateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiApiTokenRefreshCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object\'s key.
     * @param {AccountsApiAccountsApiLoginCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiLoginCreate(requestParameters: AccountsApiAccountsApiLoginCreateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiLoginCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accepts/Returns nothing.
     * @summary Calls Django logout method and delete the Token object assigned to the current User object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiLogoutCreate(options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiLogoutCreate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accepts/Returns nothing.
     * @summary Calls Django logout method and delete the Token object assigned to the current User object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiLogoutList(options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiLogoutList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
     * @summary Calls Django Auth SetPasswordForm save method.
     * @param {AccountsApiAccountsApiPasswordChangeCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiPasswordChangeCreate(requestParameters: AccountsApiAccountsApiPasswordChangeCreateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiPasswordChangeCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends auto-generated Password Reset to User
     * @summary Email User Password Reset
     * @param {AccountsApiAccountsApiPasswordResetCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiPasswordResetCreate(requestParameters: AccountsApiAccountsApiPasswordResetCreateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiPasswordResetCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create Permission
     * @summary Creates new Permission
     * @param {AccountsApiAccountsApiPermissionsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiPermissionsCreate(requestParameters: AccountsApiAccountsApiPermissionsCreateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiPermissionsCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Permissions
     * @summary List created Permissions
     * @param {AccountsApiAccountsApiPermissionsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiPermissionsList(requestParameters: AccountsApiAccountsApiPermissionsListRequest = {}, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiPermissionsList(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * partially update Permission
     * @summary partially updates a Permission property
     * @param {AccountsApiAccountsApiPermissionsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiPermissionsPartialUpdate(requestParameters: AccountsApiAccountsApiPermissionsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiPermissionsPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * retrieves a Permission
     * @summary Retrieves an instance of a Permission
     * @param {AccountsApiAccountsApiPermissionsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiPermissionsRead(requestParameters: AccountsApiAccountsApiPermissionsReadRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiPermissionsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update Permission
     * @summary updates a Permission
     * @param {AccountsApiAccountsApiPermissionsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiPermissionsUpdate(requestParameters: AccountsApiAccountsApiPermissionsUpdateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiPermissionsUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountsApiAccountsApiRolePermissionCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiRolePermissionCreate(requestParameters: AccountsApiAccountsApiRolePermissionCreateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiRolePermissionCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountsApiAccountsApiRolePermissionListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiRolePermissionList(requestParameters: AccountsApiAccountsApiRolePermissionListRequest = {}, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiRolePermissionList(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * retrieves a RolePermission (Please pass role id for the id field)
     * @summary Retrieves an instance of a Role and its Permissions
     * @param {AccountsApiAccountsApiRolePermissionReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiRolePermissionRead(requestParameters: AccountsApiAccountsApiRolePermissionReadRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiRolePermissionRead(requestParameters.roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create Role
     * @summary Creates new Role
     * @param {AccountsApiAccountsApiRolesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiRolesCreate(requestParameters: AccountsApiAccountsApiRolesCreateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiRolesCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Roles
     * @summary List created Roles
     * @param {AccountsApiAccountsApiRolesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiRolesList(requestParameters: AccountsApiAccountsApiRolesListRequest = {}, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiRolesList(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * partially update Role
     * @summary partially updates a Role property
     * @param {AccountsApiAccountsApiRolesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiRolesPartialUpdate(requestParameters: AccountsApiAccountsApiRolesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiRolesPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * retrieves a Role
     * @summary Retrieves an instance of a Role
     * @param {AccountsApiAccountsApiRolesReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiRolesRead(requestParameters: AccountsApiAccountsApiRolesReadRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiRolesRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update Role
     * @summary updates a Role property
     * @param {AccountsApiAccountsApiRolesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiRolesUpdate(requestParameters: AccountsApiAccountsApiRolesUpdateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiRolesUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tenant Registers/Self Onboards
     * @summary Tenant Registers/Self onboards
     * @param {AccountsApiAccountsApiTenantSelfOnboardRegisterCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiTenantSelfOnboardRegisterCreate(requestParameters: AccountsApiAccountsApiTenantSelfOnboardRegisterCreateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiTenantSelfOnboardRegisterCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tenant Registers/Onboards a New TenantUser
     * @summary Tenant Registers/Onboards a New TenantUser
     * @param {AccountsApiAccountsApiTenantUserRegisterCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiTenantUserRegisterCreate(requestParameters: AccountsApiAccountsApiTenantUserRegisterCreateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiTenantUserRegisterCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create Tenant
     * @summary Creates new Tenant
     * @param {AccountsApiAccountsApiTenantsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiTenantsCreate(requestParameters: AccountsApiAccountsApiTenantsCreateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiTenantsCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Tenants
     * @summary List created Tenants
     * @param {AccountsApiAccountsApiTenantsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiTenantsList(requestParameters: AccountsApiAccountsApiTenantsListRequest = {}, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiTenantsList(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * partially update Tenant
     * @summary partially updates a Tenant property
     * @param {AccountsApiAccountsApiTenantsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiTenantsPartialUpdate(requestParameters: AccountsApiAccountsApiTenantsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiTenantsPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * retrieves a Tenant
     * @summary Retrieves an instance of a Tenant
     * @param {AccountsApiAccountsApiTenantsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiTenantsRead(requestParameters: AccountsApiAccountsApiTenantsReadRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiTenantsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update Tenant
     * @summary updates a Tenant property
     * @param {AccountsApiAccountsApiTenantsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiTenantsUpdate(requestParameters: AccountsApiAccountsApiTenantsUpdateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiTenantsUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     * @param {AccountsApiAccountsApiTokenCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiTokenCreate(requestParameters: AccountsApiAccountsApiTokenCreateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiTokenCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates Role Permissions (Admin)
     * @summary Updates Role Permissions. You can pass an Array as payload
     * @param {AccountsApiAccountsApiUpdateRolePermissionUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiUpdateRolePermissionUpdate(requestParameters: AccountsApiAccountsApiUpdateRolePermissionUpdateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiUpdateRolePermissionUpdate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Users
     * @summary List created Users in Request User Tenant
     * @param {AccountsApiAccountsApiUsersListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiUsersList(requestParameters: AccountsApiAccountsApiUsersListRequest = {}, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiUsersList(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * partially update Tenant User propert
     * @summary partially updates a User property
     * @param {AccountsApiAccountsApiUsersPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiUsersPartialUpdate(requestParameters: AccountsApiAccountsApiUsersPartialUpdateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiUsersPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * retrieves a Tenant User
     * @summary Retrieves an instance of a Tenant User
     * @param {AccountsApiAccountsApiUsersReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiUsersRead(requestParameters: AccountsApiAccountsApiUsersReadRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiUsersRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update Tenant User property
     * @summary updates a Tenant User property
     * @param {AccountsApiAccountsApiUsersUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsApiUsersUpdate(requestParameters: AccountsApiAccountsApiUsersUpdateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsApiUsersUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CloudProviderApi - axios parameter creator
 * @export
 */
export const CloudProviderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ProviderService} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderCreate: async (data: ProviderService, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('cloudProviderCloudProviderCreate', 'data', data)
            const localVarPath = `/cloud_provider/cloud_provider/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cloud_provider/cloud_provider/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this provider service.
         * @param {ProviderService} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderPartialUpdate: async (id: number, data: ProviderService, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudProviderCloudProviderPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('cloudProviderCloudProviderPartialUpdate', 'data', data)
            const localVarPath = `/cloud_provider/cloud_provider/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this provider service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudProviderCloudProviderRead', 'id', id)
            const localVarPath = `/cloud_provider/cloud_provider/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CloudProviderResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderResourceTypesCreate: async (data: CloudProviderResourceTypes, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('cloudProviderCloudProviderResourceTypesCreate', 'data', data)
            const localVarPath = `/cloud_provider/cloud_provider_resource_types/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderResourceTypesList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cloud_provider/cloud_provider_resource_types/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all resources under a cloud provider
         * @summary retrieves all resource types under a cloud provider. Please pass cloud provider id
         * @param {number} id A unique integer value identifying this cloud provider resource types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderResourceTypesRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudProviderCloudProviderResourceTypesRead', 'id', id)
            const localVarPath = `/cloud_provider/cloud_provider_resource_types/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this provider service.
         * @param {ProviderService} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderUpdate: async (id: number, data: ProviderService, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudProviderCloudProviderUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('cloudProviderCloudProviderUpdate', 'data', data)
            const localVarPath = `/cloud_provider/cloud_provider/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderResourceTypesCreate: async (data: ResourceTypes, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('cloudProviderResourceTypesCreate', 'data', data)
            const localVarPath = `/cloud_provider/resource_types/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderResourceTypesList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cloud_provider/resource_types/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this resource types.
         * @param {ResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderResourceTypesPartialUpdate: async (id: number, data: ResourceTypes, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudProviderResourceTypesPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('cloudProviderResourceTypesPartialUpdate', 'data', data)
            const localVarPath = `/cloud_provider/resource_types/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this resource types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderResourceTypesRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudProviderResourceTypesRead', 'id', id)
            const localVarPath = `/cloud_provider/resource_types/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this resource types.
         * @param {ResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderResourceTypesUpdate: async (id: number, data: ResourceTypes, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cloudProviderResourceTypesUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('cloudProviderResourceTypesUpdate', 'data', data)
            const localVarPath = `/cloud_provider/resource_types/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates Cloud Resources (Admin)
         * @summary Updates Cloud Resources. You can pass an Array as payload
         * @param {CloudProviderResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderUpdateCloudResourceUpdate: async (data: CloudProviderResourceTypes, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('cloudProviderUpdateCloudResourceUpdate', 'data', data)
            const localVarPath = `/cloud_provider/update_cloud_resource/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CloudProviderApi - functional programming interface
 * @export
 */
export const CloudProviderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CloudProviderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ProviderService} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderCloudProviderCreate(data: ProviderService, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProviderService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderCloudProviderCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderCloudProviderList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderCloudProviderList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderCloudProviderList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this provider service.
         * @param {ProviderService} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderCloudProviderPartialUpdate(id: number, data: ProviderService, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProviderService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderCloudProviderPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this provider service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderCloudProviderRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProviderService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderCloudProviderRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CloudProviderResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderCloudProviderResourceTypesCreate(data: CloudProviderResourceTypes, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderResourceTypes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderCloudProviderResourceTypesCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderCloudProviderResourceTypesList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderCloudProviderResourceTypesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderCloudProviderResourceTypesList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all resources under a cloud provider
         * @summary retrieves all resource types under a cloud provider. Please pass cloud provider id
         * @param {number} id A unique integer value identifying this cloud provider resource types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderCloudProviderResourceTypesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderResourceTypes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderCloudProviderResourceTypesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this provider service.
         * @param {ProviderService} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderCloudProviderUpdate(id: number, data: ProviderService, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProviderService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderCloudProviderUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderResourceTypesCreate(data: ResourceTypes, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceTypes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderResourceTypesCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderResourceTypesList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderResourceTypesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderResourceTypesList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this resource types.
         * @param {ResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderResourceTypesPartialUpdate(id: number, data: ResourceTypes, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceTypes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderResourceTypesPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this resource types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderResourceTypesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceTypes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderResourceTypesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this resource types.
         * @param {ResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderResourceTypesUpdate(id: number, data: ResourceTypes, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceTypes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderResourceTypesUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates Cloud Resources (Admin)
         * @summary Updates Cloud Resources. You can pass an Array as payload
         * @param {CloudProviderResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudProviderUpdateCloudResourceUpdate(data: CloudProviderResourceTypes, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderResourceTypes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloudProviderUpdateCloudResourceUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CloudProviderApi - factory interface
 * @export
 */
export const CloudProviderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CloudProviderApiFp(configuration)
    return {
        /**
         * 
         * @param {ProviderService} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderCreate(data: ProviderService, options?: any): AxiosPromise<ProviderService> {
            return localVarFp.cloudProviderCloudProviderCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderList(page?: number, options?: any): AxiosPromise<CloudProviderCloudProviderList200Response> {
            return localVarFp.cloudProviderCloudProviderList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this provider service.
         * @param {ProviderService} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderPartialUpdate(id: number, data: ProviderService, options?: any): AxiosPromise<ProviderService> {
            return localVarFp.cloudProviderCloudProviderPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this provider service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderRead(id: number, options?: any): AxiosPromise<ProviderService> {
            return localVarFp.cloudProviderCloudProviderRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CloudProviderResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderResourceTypesCreate(data: CloudProviderResourceTypes, options?: any): AxiosPromise<CloudProviderResourceTypes> {
            return localVarFp.cloudProviderCloudProviderResourceTypesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderResourceTypesList(page?: number, options?: any): AxiosPromise<CloudProviderCloudProviderResourceTypesList200Response> {
            return localVarFp.cloudProviderCloudProviderResourceTypesList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all resources under a cloud provider
         * @summary retrieves all resource types under a cloud provider. Please pass cloud provider id
         * @param {number} id A unique integer value identifying this cloud provider resource types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderResourceTypesRead(id: number, options?: any): AxiosPromise<CloudProviderResourceTypes> {
            return localVarFp.cloudProviderCloudProviderResourceTypesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this provider service.
         * @param {ProviderService} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderCloudProviderUpdate(id: number, data: ProviderService, options?: any): AxiosPromise<ProviderService> {
            return localVarFp.cloudProviderCloudProviderUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderResourceTypesCreate(data: ResourceTypes, options?: any): AxiosPromise<ResourceTypes> {
            return localVarFp.cloudProviderResourceTypesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderResourceTypesList(page?: number, options?: any): AxiosPromise<CloudProviderResourceTypesList200Response> {
            return localVarFp.cloudProviderResourceTypesList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this resource types.
         * @param {ResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderResourceTypesPartialUpdate(id: number, data: ResourceTypes, options?: any): AxiosPromise<ResourceTypes> {
            return localVarFp.cloudProviderResourceTypesPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this resource types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderResourceTypesRead(id: number, options?: any): AxiosPromise<ResourceTypes> {
            return localVarFp.cloudProviderResourceTypesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this resource types.
         * @param {ResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderResourceTypesUpdate(id: number, data: ResourceTypes, options?: any): AxiosPromise<ResourceTypes> {
            return localVarFp.cloudProviderResourceTypesUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates Cloud Resources (Admin)
         * @summary Updates Cloud Resources. You can pass an Array as payload
         * @param {CloudProviderResourceTypes} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudProviderUpdateCloudResourceUpdate(data: CloudProviderResourceTypes, options?: any): AxiosPromise<CloudProviderResourceTypes> {
            return localVarFp.cloudProviderUpdateCloudResourceUpdate(data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cloudProviderCloudProviderCreate operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderCloudProviderCreateRequest
 */
export interface CloudProviderApiCloudProviderCloudProviderCreateRequest {
    /**
     * 
     * @type {ProviderService}
     * @memberof CloudProviderApiCloudProviderCloudProviderCreate
     */
    readonly data: ProviderService
}

/**
 * Request parameters for cloudProviderCloudProviderList operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderCloudProviderListRequest
 */
export interface CloudProviderApiCloudProviderCloudProviderListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderCloudProviderList
     */
    readonly page?: number
}

/**
 * Request parameters for cloudProviderCloudProviderPartialUpdate operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderCloudProviderPartialUpdateRequest
 */
export interface CloudProviderApiCloudProviderCloudProviderPartialUpdateRequest {
    /**
     * A unique integer value identifying this provider service.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderCloudProviderPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {ProviderService}
     * @memberof CloudProviderApiCloudProviderCloudProviderPartialUpdate
     */
    readonly data: ProviderService
}

/**
 * Request parameters for cloudProviderCloudProviderRead operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderCloudProviderReadRequest
 */
export interface CloudProviderApiCloudProviderCloudProviderReadRequest {
    /**
     * A unique integer value identifying this provider service.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderCloudProviderRead
     */
    readonly id: number
}

/**
 * Request parameters for cloudProviderCloudProviderResourceTypesCreate operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderCloudProviderResourceTypesCreateRequest
 */
export interface CloudProviderApiCloudProviderCloudProviderResourceTypesCreateRequest {
    /**
     * 
     * @type {CloudProviderResourceTypes}
     * @memberof CloudProviderApiCloudProviderCloudProviderResourceTypesCreate
     */
    readonly data: CloudProviderResourceTypes
}

/**
 * Request parameters for cloudProviderCloudProviderResourceTypesList operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderCloudProviderResourceTypesListRequest
 */
export interface CloudProviderApiCloudProviderCloudProviderResourceTypesListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderCloudProviderResourceTypesList
     */
    readonly page?: number
}

/**
 * Request parameters for cloudProviderCloudProviderResourceTypesRead operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderCloudProviderResourceTypesReadRequest
 */
export interface CloudProviderApiCloudProviderCloudProviderResourceTypesReadRequest {
    /**
     * A unique integer value identifying this cloud provider resource types.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderCloudProviderResourceTypesRead
     */
    readonly id: number
}

/**
 * Request parameters for cloudProviderCloudProviderUpdate operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderCloudProviderUpdateRequest
 */
export interface CloudProviderApiCloudProviderCloudProviderUpdateRequest {
    /**
     * A unique integer value identifying this provider service.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderCloudProviderUpdate
     */
    readonly id: number

    /**
     * 
     * @type {ProviderService}
     * @memberof CloudProviderApiCloudProviderCloudProviderUpdate
     */
    readonly data: ProviderService
}

/**
 * Request parameters for cloudProviderResourceTypesCreate operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderResourceTypesCreateRequest
 */
export interface CloudProviderApiCloudProviderResourceTypesCreateRequest {
    /**
     * 
     * @type {ResourceTypes}
     * @memberof CloudProviderApiCloudProviderResourceTypesCreate
     */
    readonly data: ResourceTypes
}

/**
 * Request parameters for cloudProviderResourceTypesList operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderResourceTypesListRequest
 */
export interface CloudProviderApiCloudProviderResourceTypesListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderResourceTypesList
     */
    readonly page?: number
}

/**
 * Request parameters for cloudProviderResourceTypesPartialUpdate operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderResourceTypesPartialUpdateRequest
 */
export interface CloudProviderApiCloudProviderResourceTypesPartialUpdateRequest {
    /**
     * A unique integer value identifying this resource types.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderResourceTypesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {ResourceTypes}
     * @memberof CloudProviderApiCloudProviderResourceTypesPartialUpdate
     */
    readonly data: ResourceTypes
}

/**
 * Request parameters for cloudProviderResourceTypesRead operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderResourceTypesReadRequest
 */
export interface CloudProviderApiCloudProviderResourceTypesReadRequest {
    /**
     * A unique integer value identifying this resource types.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderResourceTypesRead
     */
    readonly id: number
}

/**
 * Request parameters for cloudProviderResourceTypesUpdate operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderResourceTypesUpdateRequest
 */
export interface CloudProviderApiCloudProviderResourceTypesUpdateRequest {
    /**
     * A unique integer value identifying this resource types.
     * @type {number}
     * @memberof CloudProviderApiCloudProviderResourceTypesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {ResourceTypes}
     * @memberof CloudProviderApiCloudProviderResourceTypesUpdate
     */
    readonly data: ResourceTypes
}

/**
 * Request parameters for cloudProviderUpdateCloudResourceUpdate operation in CloudProviderApi.
 * @export
 * @interface CloudProviderApiCloudProviderUpdateCloudResourceUpdateRequest
 */
export interface CloudProviderApiCloudProviderUpdateCloudResourceUpdateRequest {
    /**
     * 
     * @type {CloudProviderResourceTypes}
     * @memberof CloudProviderApiCloudProviderUpdateCloudResourceUpdate
     */
    readonly data: CloudProviderResourceTypes
}

/**
 * CloudProviderApi - object-oriented interface
 * @export
 * @class CloudProviderApi
 * @extends {BaseAPI}
 */
export class CloudProviderApi extends BaseAPI {
    /**
     * 
     * @param {CloudProviderApiCloudProviderCloudProviderCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderCloudProviderCreate(requestParameters: CloudProviderApiCloudProviderCloudProviderCreateRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderCloudProviderCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderCloudProviderListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderCloudProviderList(requestParameters: CloudProviderApiCloudProviderCloudProviderListRequest = {}, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderCloudProviderList(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderCloudProviderPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderCloudProviderPartialUpdate(requestParameters: CloudProviderApiCloudProviderCloudProviderPartialUpdateRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderCloudProviderPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderCloudProviderReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderCloudProviderRead(requestParameters: CloudProviderApiCloudProviderCloudProviderReadRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderCloudProviderRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderCloudProviderResourceTypesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderCloudProviderResourceTypesCreate(requestParameters: CloudProviderApiCloudProviderCloudProviderResourceTypesCreateRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderCloudProviderResourceTypesCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderCloudProviderResourceTypesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderCloudProviderResourceTypesList(requestParameters: CloudProviderApiCloudProviderCloudProviderResourceTypesListRequest = {}, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderCloudProviderResourceTypesList(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all resources under a cloud provider
     * @summary retrieves all resource types under a cloud provider. Please pass cloud provider id
     * @param {CloudProviderApiCloudProviderCloudProviderResourceTypesReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderCloudProviderResourceTypesRead(requestParameters: CloudProviderApiCloudProviderCloudProviderResourceTypesReadRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderCloudProviderResourceTypesRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderCloudProviderUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderCloudProviderUpdate(requestParameters: CloudProviderApiCloudProviderCloudProviderUpdateRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderCloudProviderUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderResourceTypesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderResourceTypesCreate(requestParameters: CloudProviderApiCloudProviderResourceTypesCreateRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderResourceTypesCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderResourceTypesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderResourceTypesList(requestParameters: CloudProviderApiCloudProviderResourceTypesListRequest = {}, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderResourceTypesList(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderResourceTypesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderResourceTypesPartialUpdate(requestParameters: CloudProviderApiCloudProviderResourceTypesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderResourceTypesPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderResourceTypesReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderResourceTypesRead(requestParameters: CloudProviderApiCloudProviderResourceTypesReadRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderResourceTypesRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CloudProviderApiCloudProviderResourceTypesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderResourceTypesUpdate(requestParameters: CloudProviderApiCloudProviderResourceTypesUpdateRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderResourceTypesUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates Cloud Resources (Admin)
     * @summary Updates Cloud Resources. You can pass an Array as payload
     * @param {CloudProviderApiCloudProviderUpdateCloudResourceUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudProviderApi
     */
    public cloudProviderUpdateCloudResourceUpdate(requestParameters: CloudProviderApiCloudProviderUpdateCloudResourceUpdateRequest, options?: AxiosRequestConfig) {
        return CloudProviderApiFp(this.configuration).cloudProviderUpdateCloudResourceUpdate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomCspmApiApi - axios parameter creator
 * @export
 */
export const CustomCspmApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {HtmlData} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customCspmApiApiUtilsHtmlToPdfCreate: async (data: HtmlData, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('customCspmApiApiUtilsHtmlToPdfCreate', 'data', data)
            const localVarPath = `/custom_cspm_api/api/utils/html-to-pdf/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {JsonData} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customCspmApiApiUtilsJsonToExcelCreate: async (data: JsonData, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('customCspmApiApiUtilsJsonToExcelCreate', 'data', data)
            const localVarPath = `/custom_cspm_api/api/utils/json-to-excel/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ByteArray} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customCspmApiApiUtilsSaveBytearrayToUrlCreate: async (data: ByteArray, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('customCspmApiApiUtilsSaveBytearrayToUrlCreate', 'data', data)
            const localVarPath = `/custom_cspm_api/api/utils/save-bytearray-to-url/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SQLQuery} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customCspmApiApiUtilsSqlToJsonCreate: async (data: SQLQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('customCspmApiApiUtilsSqlToJsonCreate', 'data', data)
            const localVarPath = `/custom_cspm_api/api/utils/sql-to-json/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomCspmApiApi - functional programming interface
 * @export
 */
export const CustomCspmApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomCspmApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {HtmlData} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customCspmApiApiUtilsHtmlToPdfCreate(data: HtmlData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HtmlData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customCspmApiApiUtilsHtmlToPdfCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {JsonData} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customCspmApiApiUtilsJsonToExcelCreate(data: JsonData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customCspmApiApiUtilsJsonToExcelCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ByteArray} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customCspmApiApiUtilsSaveBytearrayToUrlCreate(data: ByteArray, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customCspmApiApiUtilsSaveBytearrayToUrlCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SQLQuery} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customCspmApiApiUtilsSqlToJsonCreate(data: SQLQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SQLQuery>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customCspmApiApiUtilsSqlToJsonCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomCspmApiApi - factory interface
 * @export
 */
export const CustomCspmApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomCspmApiApiFp(configuration)
    return {
        /**
         * 
         * @param {HtmlData} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customCspmApiApiUtilsHtmlToPdfCreate(data: HtmlData, options?: any): AxiosPromise<HtmlData> {
            return localVarFp.customCspmApiApiUtilsHtmlToPdfCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {JsonData} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customCspmApiApiUtilsJsonToExcelCreate(data: JsonData, options?: any): AxiosPromise<JsonData> {
            return localVarFp.customCspmApiApiUtilsJsonToExcelCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ByteArray} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customCspmApiApiUtilsSaveBytearrayToUrlCreate(data: ByteArray, options?: any): AxiosPromise<string> {
            return localVarFp.customCspmApiApiUtilsSaveBytearrayToUrlCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SQLQuery} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customCspmApiApiUtilsSqlToJsonCreate(data: SQLQuery, options?: any): AxiosPromise<SQLQuery> {
            return localVarFp.customCspmApiApiUtilsSqlToJsonCreate(data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for customCspmApiApiUtilsHtmlToPdfCreate operation in CustomCspmApiApi.
 * @export
 * @interface CustomCspmApiApiCustomCspmApiApiUtilsHtmlToPdfCreateRequest
 */
export interface CustomCspmApiApiCustomCspmApiApiUtilsHtmlToPdfCreateRequest {
    /**
     * 
     * @type {HtmlData}
     * @memberof CustomCspmApiApiCustomCspmApiApiUtilsHtmlToPdfCreate
     */
    readonly data: HtmlData
}

/**
 * Request parameters for customCspmApiApiUtilsJsonToExcelCreate operation in CustomCspmApiApi.
 * @export
 * @interface CustomCspmApiApiCustomCspmApiApiUtilsJsonToExcelCreateRequest
 */
export interface CustomCspmApiApiCustomCspmApiApiUtilsJsonToExcelCreateRequest {
    /**
     * 
     * @type {JsonData}
     * @memberof CustomCspmApiApiCustomCspmApiApiUtilsJsonToExcelCreate
     */
    readonly data: JsonData
}

/**
 * Request parameters for customCspmApiApiUtilsSaveBytearrayToUrlCreate operation in CustomCspmApiApi.
 * @export
 * @interface CustomCspmApiApiCustomCspmApiApiUtilsSaveBytearrayToUrlCreateRequest
 */
export interface CustomCspmApiApiCustomCspmApiApiUtilsSaveBytearrayToUrlCreateRequest {
    /**
     * 
     * @type {ByteArray}
     * @memberof CustomCspmApiApiCustomCspmApiApiUtilsSaveBytearrayToUrlCreate
     */
    readonly data: ByteArray
}

/**
 * Request parameters for customCspmApiApiUtilsSqlToJsonCreate operation in CustomCspmApiApi.
 * @export
 * @interface CustomCspmApiApiCustomCspmApiApiUtilsSqlToJsonCreateRequest
 */
export interface CustomCspmApiApiCustomCspmApiApiUtilsSqlToJsonCreateRequest {
    /**
     * 
     * @type {SQLQuery}
     * @memberof CustomCspmApiApiCustomCspmApiApiUtilsSqlToJsonCreate
     */
    readonly data: SQLQuery
}

/**
 * CustomCspmApiApi - object-oriented interface
 * @export
 * @class CustomCspmApiApi
 * @extends {BaseAPI}
 */
export class CustomCspmApiApi extends BaseAPI {
    /**
     * 
     * @param {CustomCspmApiApiCustomCspmApiApiUtilsHtmlToPdfCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomCspmApiApi
     */
    public customCspmApiApiUtilsHtmlToPdfCreate(requestParameters: CustomCspmApiApiCustomCspmApiApiUtilsHtmlToPdfCreateRequest, options?: AxiosRequestConfig) {
        return CustomCspmApiApiFp(this.configuration).customCspmApiApiUtilsHtmlToPdfCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomCspmApiApiCustomCspmApiApiUtilsJsonToExcelCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomCspmApiApi
     */
    public customCspmApiApiUtilsJsonToExcelCreate(requestParameters: CustomCspmApiApiCustomCspmApiApiUtilsJsonToExcelCreateRequest, options?: AxiosRequestConfig) {
        return CustomCspmApiApiFp(this.configuration).customCspmApiApiUtilsJsonToExcelCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomCspmApiApiCustomCspmApiApiUtilsSaveBytearrayToUrlCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomCspmApiApi
     */
    public customCspmApiApiUtilsSaveBytearrayToUrlCreate(requestParameters: CustomCspmApiApiCustomCspmApiApiUtilsSaveBytearrayToUrlCreateRequest, options?: AxiosRequestConfig) {
        return CustomCspmApiApiFp(this.configuration).customCspmApiApiUtilsSaveBytearrayToUrlCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomCspmApiApiCustomCspmApiApiUtilsSqlToJsonCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomCspmApiApi
     */
    public customCspmApiApiUtilsSqlToJsonCreate(requestParameters: CustomCspmApiApiCustomCspmApiApiUtilsSqlToJsonCreateRequest, options?: AxiosRequestConfig) {
        return CustomCspmApiApiFp(this.configuration).customCspmApiApiUtilsSqlToJsonCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PolicyApi - axios parameter creator
 * @export
 */
export const PolicyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Policy} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPoliciesCreate: async (data: Policy, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyPoliciesCreate', 'data', data)
            const localVarPath = `/policy/policies/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPoliciesList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/policy/policies/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this policy.
         * @param {Policy} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPoliciesPartialUpdate: async (id: number, data: Policy, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('policyPoliciesPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyPoliciesPartialUpdate', 'data', data)
            const localVarPath = `/policy/policies/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this policy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPoliciesRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('policyPoliciesRead', 'id', id)
            const localVarPath = `/policy/policies/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this policy.
         * @param {Policy} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPoliciesUpdate: async (id: number, data: Policy, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('policyPoliciesUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyPoliciesUpdate', 'data', data)
            const localVarPath = `/policy/policies/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PolicyRule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRuleCreate: async (data: PolicyRule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyPolicyRuleCreate', 'data', data)
            const localVarPath = `/policy/policy_rule/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRuleList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/policy/policy_rule/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * retrieves a PolicyRule (Please pass policy id for the id field)
         * @summary Retrieves an instance of a Policy and its Rules
         * @param {string} policyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRuleRead: async (policyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('policyPolicyRuleRead', 'policyId', policyId)
            const localVarPath = `/policy/policy_rule/{policy_id}`
                .replace(`{${"policy_id"}}`, encodeURIComponent(String(policyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Rule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRulesCreate: async (data: Rule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyRulesCreate', 'data', data)
            const localVarPath = `/policy/rules/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRulesList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/policy/rules/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule.
         * @param {Rule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRulesPartialUpdate: async (id: number, data: Rule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('policyRulesPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyRulesPartialUpdate', 'data', data)
            const localVarPath = `/policy/rules/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRulesRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('policyRulesRead', 'id', id)
            const localVarPath = `/policy/rules/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule.
         * @param {Rule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRulesUpdate: async (id: number, data: Rule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('policyRulesUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyRulesUpdate', 'data', data)
            const localVarPath = `/policy/rules/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates Policy Rule (Admin)
         * @summary Updates Policy Rules. You can pass an Array as payload
         * @param {PolicyRule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyUpdatePolicyRuleUpdate: async (data: PolicyRule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('policyUpdatePolicyRuleUpdate', 'data', data)
            const localVarPath = `/policy/update_policy_rule/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PolicyApi - functional programming interface
 * @export
 */
export const PolicyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PolicyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Policy} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPoliciesCreate(data: Policy, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Policy>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPoliciesCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPoliciesList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyPoliciesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPoliciesList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this policy.
         * @param {Policy} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPoliciesPartialUpdate(id: number, data: Policy, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Policy>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPoliciesPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this policy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPoliciesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Policy>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPoliciesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this policy.
         * @param {Policy} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPoliciesUpdate(id: number, data: Policy, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Policy>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPoliciesUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PolicyRule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPolicyRuleCreate(data: PolicyRule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyRule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPolicyRuleCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPolicyRuleList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyPolicyRuleList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPolicyRuleList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * retrieves a PolicyRule (Please pass policy id for the id field)
         * @summary Retrieves an instance of a Policy and its Rules
         * @param {string} policyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyPolicyRuleRead(policyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyRule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyPolicyRuleRead(policyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Rule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyRulesCreate(data: Rule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyRulesCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyRulesList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyRulesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyRulesList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule.
         * @param {Rule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyRulesPartialUpdate(id: number, data: Rule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyRulesPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyRulesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyRulesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule.
         * @param {Rule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyRulesUpdate(id: number, data: Rule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyRulesUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates Policy Rule (Admin)
         * @summary Updates Policy Rules. You can pass an Array as payload
         * @param {PolicyRule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policyUpdatePolicyRuleUpdate(data: PolicyRule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyRule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policyUpdatePolicyRuleUpdate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PolicyApi - factory interface
 * @export
 */
export const PolicyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PolicyApiFp(configuration)
    return {
        /**
         * 
         * @param {Policy} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPoliciesCreate(data: Policy, options?: any): AxiosPromise<Policy> {
            return localVarFp.policyPoliciesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPoliciesList(page?: number, options?: any): AxiosPromise<PolicyPoliciesList200Response> {
            return localVarFp.policyPoliciesList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this policy.
         * @param {Policy} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPoliciesPartialUpdate(id: number, data: Policy, options?: any): AxiosPromise<Policy> {
            return localVarFp.policyPoliciesPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this policy.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPoliciesRead(id: number, options?: any): AxiosPromise<Policy> {
            return localVarFp.policyPoliciesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this policy.
         * @param {Policy} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPoliciesUpdate(id: number, data: Policy, options?: any): AxiosPromise<Policy> {
            return localVarFp.policyPoliciesUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PolicyRule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRuleCreate(data: PolicyRule, options?: any): AxiosPromise<PolicyRule> {
            return localVarFp.policyPolicyRuleCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRuleList(page?: number, options?: any): AxiosPromise<PolicyPolicyRuleList200Response> {
            return localVarFp.policyPolicyRuleList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * retrieves a PolicyRule (Please pass policy id for the id field)
         * @summary Retrieves an instance of a Policy and its Rules
         * @param {string} policyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyPolicyRuleRead(policyId: string, options?: any): AxiosPromise<PolicyRule> {
            return localVarFp.policyPolicyRuleRead(policyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Rule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRulesCreate(data: Rule, options?: any): AxiosPromise<Rule> {
            return localVarFp.policyRulesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRulesList(page?: number, options?: any): AxiosPromise<PolicyRulesList200Response> {
            return localVarFp.policyRulesList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule.
         * @param {Rule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRulesPartialUpdate(id: number, data: Rule, options?: any): AxiosPromise<Rule> {
            return localVarFp.policyRulesPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRulesRead(id: number, options?: any): AxiosPromise<Rule> {
            return localVarFp.policyRulesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule.
         * @param {Rule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyRulesUpdate(id: number, data: Rule, options?: any): AxiosPromise<Rule> {
            return localVarFp.policyRulesUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates Policy Rule (Admin)
         * @summary Updates Policy Rules. You can pass an Array as payload
         * @param {PolicyRule} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policyUpdatePolicyRuleUpdate(data: PolicyRule, options?: any): AxiosPromise<PolicyRule> {
            return localVarFp.policyUpdatePolicyRuleUpdate(data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for policyPoliciesCreate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPoliciesCreateRequest
 */
export interface PolicyApiPolicyPoliciesCreateRequest {
    /**
     * 
     * @type {Policy}
     * @memberof PolicyApiPolicyPoliciesCreate
     */
    readonly data: Policy
}

/**
 * Request parameters for policyPoliciesList operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPoliciesListRequest
 */
export interface PolicyApiPolicyPoliciesListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof PolicyApiPolicyPoliciesList
     */
    readonly page?: number
}

/**
 * Request parameters for policyPoliciesPartialUpdate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPoliciesPartialUpdateRequest
 */
export interface PolicyApiPolicyPoliciesPartialUpdateRequest {
    /**
     * A unique integer value identifying this policy.
     * @type {number}
     * @memberof PolicyApiPolicyPoliciesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Policy}
     * @memberof PolicyApiPolicyPoliciesPartialUpdate
     */
    readonly data: Policy
}

/**
 * Request parameters for policyPoliciesRead operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPoliciesReadRequest
 */
export interface PolicyApiPolicyPoliciesReadRequest {
    /**
     * A unique integer value identifying this policy.
     * @type {number}
     * @memberof PolicyApiPolicyPoliciesRead
     */
    readonly id: number
}

/**
 * Request parameters for policyPoliciesUpdate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPoliciesUpdateRequest
 */
export interface PolicyApiPolicyPoliciesUpdateRequest {
    /**
     * A unique integer value identifying this policy.
     * @type {number}
     * @memberof PolicyApiPolicyPoliciesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Policy}
     * @memberof PolicyApiPolicyPoliciesUpdate
     */
    readonly data: Policy
}

/**
 * Request parameters for policyPolicyRuleCreate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPolicyRuleCreateRequest
 */
export interface PolicyApiPolicyPolicyRuleCreateRequest {
    /**
     * 
     * @type {PolicyRule}
     * @memberof PolicyApiPolicyPolicyRuleCreate
     */
    readonly data: PolicyRule
}

/**
 * Request parameters for policyPolicyRuleList operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPolicyRuleListRequest
 */
export interface PolicyApiPolicyPolicyRuleListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof PolicyApiPolicyPolicyRuleList
     */
    readonly page?: number
}

/**
 * Request parameters for policyPolicyRuleRead operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyPolicyRuleReadRequest
 */
export interface PolicyApiPolicyPolicyRuleReadRequest {
    /**
     * 
     * @type {string}
     * @memberof PolicyApiPolicyPolicyRuleRead
     */
    readonly policyId: string
}

/**
 * Request parameters for policyRulesCreate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyRulesCreateRequest
 */
export interface PolicyApiPolicyRulesCreateRequest {
    /**
     * 
     * @type {Rule}
     * @memberof PolicyApiPolicyRulesCreate
     */
    readonly data: Rule
}

/**
 * Request parameters for policyRulesList operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyRulesListRequest
 */
export interface PolicyApiPolicyRulesListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof PolicyApiPolicyRulesList
     */
    readonly page?: number
}

/**
 * Request parameters for policyRulesPartialUpdate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyRulesPartialUpdateRequest
 */
export interface PolicyApiPolicyRulesPartialUpdateRequest {
    /**
     * A unique integer value identifying this rule.
     * @type {number}
     * @memberof PolicyApiPolicyRulesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Rule}
     * @memberof PolicyApiPolicyRulesPartialUpdate
     */
    readonly data: Rule
}

/**
 * Request parameters for policyRulesRead operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyRulesReadRequest
 */
export interface PolicyApiPolicyRulesReadRequest {
    /**
     * A unique integer value identifying this rule.
     * @type {number}
     * @memberof PolicyApiPolicyRulesRead
     */
    readonly id: number
}

/**
 * Request parameters for policyRulesUpdate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyRulesUpdateRequest
 */
export interface PolicyApiPolicyRulesUpdateRequest {
    /**
     * A unique integer value identifying this rule.
     * @type {number}
     * @memberof PolicyApiPolicyRulesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Rule}
     * @memberof PolicyApiPolicyRulesUpdate
     */
    readonly data: Rule
}

/**
 * Request parameters for policyUpdatePolicyRuleUpdate operation in PolicyApi.
 * @export
 * @interface PolicyApiPolicyUpdatePolicyRuleUpdateRequest
 */
export interface PolicyApiPolicyUpdatePolicyRuleUpdateRequest {
    /**
     * 
     * @type {PolicyRule}
     * @memberof PolicyApiPolicyUpdatePolicyRuleUpdate
     */
    readonly data: PolicyRule
}

/**
 * PolicyApi - object-oriented interface
 * @export
 * @class PolicyApi
 * @extends {BaseAPI}
 */
export class PolicyApi extends BaseAPI {
    /**
     * 
     * @param {PolicyApiPolicyPoliciesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPoliciesCreate(requestParameters: PolicyApiPolicyPoliciesCreateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPoliciesCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyPoliciesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPoliciesList(requestParameters: PolicyApiPolicyPoliciesListRequest = {}, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPoliciesList(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyPoliciesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPoliciesPartialUpdate(requestParameters: PolicyApiPolicyPoliciesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPoliciesPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyPoliciesReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPoliciesRead(requestParameters: PolicyApiPolicyPoliciesReadRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPoliciesRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyPoliciesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPoliciesUpdate(requestParameters: PolicyApiPolicyPoliciesUpdateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPoliciesUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyPolicyRuleCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPolicyRuleCreate(requestParameters: PolicyApiPolicyPolicyRuleCreateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPolicyRuleCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyPolicyRuleListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPolicyRuleList(requestParameters: PolicyApiPolicyPolicyRuleListRequest = {}, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPolicyRuleList(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * retrieves a PolicyRule (Please pass policy id for the id field)
     * @summary Retrieves an instance of a Policy and its Rules
     * @param {PolicyApiPolicyPolicyRuleReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyPolicyRuleRead(requestParameters: PolicyApiPolicyPolicyRuleReadRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyPolicyRuleRead(requestParameters.policyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyRulesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyRulesCreate(requestParameters: PolicyApiPolicyRulesCreateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyRulesCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyRulesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyRulesList(requestParameters: PolicyApiPolicyRulesListRequest = {}, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyRulesList(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyRulesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyRulesPartialUpdate(requestParameters: PolicyApiPolicyRulesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyRulesPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyRulesReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyRulesRead(requestParameters: PolicyApiPolicyRulesReadRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyRulesRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PolicyApiPolicyRulesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyRulesUpdate(requestParameters: PolicyApiPolicyRulesUpdateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyRulesUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates Policy Rule (Admin)
     * @summary Updates Policy Rules. You can pass an Array as payload
     * @param {PolicyApiPolicyUpdatePolicyRuleUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policyUpdatePolicyRuleUpdate(requestParameters: PolicyApiPolicyUpdatePolicyRuleUpdateRequest, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policyUpdatePolicyRuleUpdate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SystemSettingsApi - axios parameter creator
 * @export
 */
export const SystemSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AssetManagement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetManagementsCreate: async (data: AssetManagement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsAssetManagementsCreate', 'data', data)
            const localVarPath = `/system_settings/asset_managements/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetManagementsList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/system_settings/asset_managements/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {AssetManagement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetManagementsPartialUpdate: async (id: string, data: AssetManagement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsAssetManagementsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsAssetManagementsPartialUpdate', 'data', data)
            const localVarPath = `/system_settings/asset_managements/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetManagementsRead: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsAssetManagementsRead', 'id', id)
            const localVarPath = `/system_settings/asset_managements/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {AssetManagement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetManagementsUpdate: async (id: string, data: AssetManagement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsAssetManagementsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsAssetManagementsUpdate', 'data', data)
            const localVarPath = `/system_settings/asset_managements/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Region} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegionsCreate: async (data: Region, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsRegionsCreate', 'data', data)
            const localVarPath = `/system_settings/regions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegionsList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/system_settings/regions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this region.
         * @param {Region} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegionsPartialUpdate: async (id: number, data: Region, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsRegionsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsRegionsPartialUpdate', 'data', data)
            const localVarPath = `/system_settings/regions/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this region.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegionsRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsRegionsRead', 'id', id)
            const localVarPath = `/system_settings/regions/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this region.
         * @param {Region} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegionsUpdate: async (id: number, data: Region, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsRegionsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsRegionsUpdate', 'data', data)
            const localVarPath = `/system_settings/regions/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterAsset} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegisterTenantAssetsCreate: async (data: RegisterAsset, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsRegisterTenantAssetsCreate', 'data', data)
            const localVarPath = `/system_settings/register_tenant_assets/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegisterTenantAssetsList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/system_settings/register_tenant_assets/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this register asset.
         * @param {RegisterAsset} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegisterTenantAssetsPartialUpdate: async (id: number, data: RegisterAsset, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsRegisterTenantAssetsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsRegisterTenantAssetsPartialUpdate', 'data', data)
            const localVarPath = `/system_settings/register_tenant_assets/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this register asset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegisterTenantAssetsRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsRegisterTenantAssetsRead', 'id', id)
            const localVarPath = `/system_settings/register_tenant_assets/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this register asset.
         * @param {RegisterAsset} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegisterTenantAssetsUpdate: async (id: number, data: RegisterAsset, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsRegisterTenantAssetsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsRegisterTenantAssetsUpdate', 'data', data)
            const localVarPath = `/system_settings/register_tenant_assets/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RuleText} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleTextsCreate: async (data: RuleText, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsRuleTextsCreate', 'data', data)
            const localVarPath = `/system_settings/rule_texts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleTextsList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/system_settings/rule_texts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule text.
         * @param {RuleText} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleTextsPartialUpdate: async (id: number, data: RuleText, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsRuleTextsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsRuleTextsPartialUpdate', 'data', data)
            const localVarPath = `/system_settings/rule_texts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule text.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleTextsRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsRuleTextsRead', 'id', id)
            const localVarPath = `/system_settings/rule_texts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule text.
         * @param {RuleText} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleTextsUpdate: async (id: number, data: RuleText, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsRuleTextsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsRuleTextsUpdate', 'data', data)
            const localVarPath = `/system_settings/rule_texts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SystemSetting} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsSystemSettingsCreate: async (data: SystemSetting, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsSystemSettingsCreate', 'data', data)
            const localVarPath = `/system_settings/system_settings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsSystemSettingsList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/system_settings/system_settings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system setting.
         * @param {SystemSetting} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsSystemSettingsPartialUpdate: async (id: number, data: SystemSetting, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsSystemSettingsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsSystemSettingsPartialUpdate', 'data', data)
            const localVarPath = `/system_settings/system_settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsSystemSettingsRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsSystemSettingsRead', 'id', id)
            const localVarPath = `/system_settings/system_settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system setting.
         * @param {SystemSetting} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsSystemSettingsUpdate: async (id: number, data: SystemSetting, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemSettingsSystemSettingsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('systemSettingsSystemSettingsUpdate', 'data', data)
            const localVarPath = `/system_settings/system_settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemSettingsApi - functional programming interface
 * @export
 */
export const SystemSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AssetManagement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsAssetManagementsCreate(data: AssetManagement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetManagement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsAssetManagementsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsAssetManagementsList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSettingsAssetManagementsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsAssetManagementsList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {AssetManagement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsAssetManagementsPartialUpdate(id: string, data: AssetManagement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetManagement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsAssetManagementsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsAssetManagementsRead(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetManagement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsAssetManagementsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {AssetManagement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsAssetManagementsUpdate(id: string, data: AssetManagement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetManagement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsAssetManagementsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Region} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRegionsCreate(data: Region, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Region>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRegionsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRegionsList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSettingsRegionsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRegionsList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this region.
         * @param {Region} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRegionsPartialUpdate(id: number, data: Region, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Region>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRegionsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this region.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRegionsRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Region>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRegionsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this region.
         * @param {Region} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRegionsUpdate(id: number, data: Region, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Region>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRegionsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterAsset} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRegisterTenantAssetsCreate(data: RegisterAsset, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRegisterTenantAssetsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRegisterTenantAssetsList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSettingsRegisterTenantAssetsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRegisterTenantAssetsList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this register asset.
         * @param {RegisterAsset} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRegisterTenantAssetsPartialUpdate(id: number, data: RegisterAsset, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRegisterTenantAssetsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this register asset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRegisterTenantAssetsRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRegisterTenantAssetsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this register asset.
         * @param {RegisterAsset} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRegisterTenantAssetsUpdate(id: number, data: RegisterAsset, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRegisterTenantAssetsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RuleText} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRuleTextsCreate(data: RuleText, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RuleText>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRuleTextsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRuleTextsList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSettingsRuleTextsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRuleTextsList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule text.
         * @param {RuleText} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRuleTextsPartialUpdate(id: number, data: RuleText, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RuleText>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRuleTextsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule text.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRuleTextsRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RuleText>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRuleTextsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule text.
         * @param {RuleText} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsRuleTextsUpdate(id: number, data: RuleText, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RuleText>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsRuleTextsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SystemSetting} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsSystemSettingsCreate(data: SystemSetting, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSetting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsSystemSettingsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsSystemSettingsList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSettingsSystemSettingsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsSystemSettingsList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system setting.
         * @param {SystemSetting} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsSystemSettingsPartialUpdate(id: number, data: SystemSetting, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSetting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsSystemSettingsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsSystemSettingsRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSetting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsSystemSettingsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system setting.
         * @param {SystemSetting} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSettingsSystemSettingsUpdate(id: number, data: SystemSetting, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSetting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSettingsSystemSettingsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SystemSettingsApi - factory interface
 * @export
 */
export const SystemSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemSettingsApiFp(configuration)
    return {
        /**
         * 
         * @param {AssetManagement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetManagementsCreate(data: AssetManagement, options?: any): AxiosPromise<AssetManagement> {
            return localVarFp.systemSettingsAssetManagementsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetManagementsList(page?: number, options?: any): AxiosPromise<SystemSettingsAssetManagementsList200Response> {
            return localVarFp.systemSettingsAssetManagementsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {AssetManagement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetManagementsPartialUpdate(id: string, data: AssetManagement, options?: any): AxiosPromise<AssetManagement> {
            return localVarFp.systemSettingsAssetManagementsPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetManagementsRead(id: string, options?: any): AxiosPromise<AssetManagement> {
            return localVarFp.systemSettingsAssetManagementsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {AssetManagement} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsAssetManagementsUpdate(id: string, data: AssetManagement, options?: any): AxiosPromise<AssetManagement> {
            return localVarFp.systemSettingsAssetManagementsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Region} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegionsCreate(data: Region, options?: any): AxiosPromise<Region> {
            return localVarFp.systemSettingsRegionsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegionsList(page?: number, options?: any): AxiosPromise<SystemSettingsRegionsList200Response> {
            return localVarFp.systemSettingsRegionsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this region.
         * @param {Region} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegionsPartialUpdate(id: number, data: Region, options?: any): AxiosPromise<Region> {
            return localVarFp.systemSettingsRegionsPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this region.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegionsRead(id: number, options?: any): AxiosPromise<Region> {
            return localVarFp.systemSettingsRegionsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this region.
         * @param {Region} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegionsUpdate(id: number, data: Region, options?: any): AxiosPromise<Region> {
            return localVarFp.systemSettingsRegionsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterAsset} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegisterTenantAssetsCreate(data: RegisterAsset, options?: any): AxiosPromise<RegisterAsset> {
            return localVarFp.systemSettingsRegisterTenantAssetsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegisterTenantAssetsList(page?: number, options?: any): AxiosPromise<SystemSettingsRegisterTenantAssetsList200Response> {
            return localVarFp.systemSettingsRegisterTenantAssetsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this register asset.
         * @param {RegisterAsset} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegisterTenantAssetsPartialUpdate(id: number, data: RegisterAsset, options?: any): AxiosPromise<RegisterAsset> {
            return localVarFp.systemSettingsRegisterTenantAssetsPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this register asset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegisterTenantAssetsRead(id: number, options?: any): AxiosPromise<RegisterAsset> {
            return localVarFp.systemSettingsRegisterTenantAssetsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this register asset.
         * @param {RegisterAsset} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRegisterTenantAssetsUpdate(id: number, data: RegisterAsset, options?: any): AxiosPromise<RegisterAsset> {
            return localVarFp.systemSettingsRegisterTenantAssetsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RuleText} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleTextsCreate(data: RuleText, options?: any): AxiosPromise<RuleText> {
            return localVarFp.systemSettingsRuleTextsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleTextsList(page?: number, options?: any): AxiosPromise<SystemSettingsRuleTextsList200Response> {
            return localVarFp.systemSettingsRuleTextsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule text.
         * @param {RuleText} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleTextsPartialUpdate(id: number, data: RuleText, options?: any): AxiosPromise<RuleText> {
            return localVarFp.systemSettingsRuleTextsPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule text.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleTextsRead(id: number, options?: any): AxiosPromise<RuleText> {
            return localVarFp.systemSettingsRuleTextsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this rule text.
         * @param {RuleText} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsRuleTextsUpdate(id: number, data: RuleText, options?: any): AxiosPromise<RuleText> {
            return localVarFp.systemSettingsRuleTextsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SystemSetting} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsSystemSettingsCreate(data: SystemSetting, options?: any): AxiosPromise<SystemSetting> {
            return localVarFp.systemSettingsSystemSettingsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsSystemSettingsList(page?: number, options?: any): AxiosPromise<SystemSettingsSystemSettingsList200Response> {
            return localVarFp.systemSettingsSystemSettingsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system setting.
         * @param {SystemSetting} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsSystemSettingsPartialUpdate(id: number, data: SystemSetting, options?: any): AxiosPromise<SystemSetting> {
            return localVarFp.systemSettingsSystemSettingsPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsSystemSettingsRead(id: number, options?: any): AxiosPromise<SystemSetting> {
            return localVarFp.systemSettingsSystemSettingsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this system setting.
         * @param {SystemSetting} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSettingsSystemSettingsUpdate(id: number, data: SystemSetting, options?: any): AxiosPromise<SystemSetting> {
            return localVarFp.systemSettingsSystemSettingsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for systemSettingsAssetManagementsCreate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsAssetManagementsCreateRequest
 */
export interface SystemSettingsApiSystemSettingsAssetManagementsCreateRequest {
    /**
     * 
     * @type {AssetManagement}
     * @memberof SystemSettingsApiSystemSettingsAssetManagementsCreate
     */
    readonly data: AssetManagement
}

/**
 * Request parameters for systemSettingsAssetManagementsList operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsAssetManagementsListRequest
 */
export interface SystemSettingsApiSystemSettingsAssetManagementsListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsAssetManagementsList
     */
    readonly page?: number
}

/**
 * Request parameters for systemSettingsAssetManagementsPartialUpdate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsAssetManagementsPartialUpdateRequest
 */
export interface SystemSettingsApiSystemSettingsAssetManagementsPartialUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsAssetManagementsPartialUpdate
     */
    readonly id: string

    /**
     * 
     * @type {AssetManagement}
     * @memberof SystemSettingsApiSystemSettingsAssetManagementsPartialUpdate
     */
    readonly data: AssetManagement
}

/**
 * Request parameters for systemSettingsAssetManagementsRead operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsAssetManagementsReadRequest
 */
export interface SystemSettingsApiSystemSettingsAssetManagementsReadRequest {
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsAssetManagementsRead
     */
    readonly id: string
}

/**
 * Request parameters for systemSettingsAssetManagementsUpdate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsAssetManagementsUpdateRequest
 */
export interface SystemSettingsApiSystemSettingsAssetManagementsUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsApiSystemSettingsAssetManagementsUpdate
     */
    readonly id: string

    /**
     * 
     * @type {AssetManagement}
     * @memberof SystemSettingsApiSystemSettingsAssetManagementsUpdate
     */
    readonly data: AssetManagement
}

/**
 * Request parameters for systemSettingsRegionsCreate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRegionsCreateRequest
 */
export interface SystemSettingsApiSystemSettingsRegionsCreateRequest {
    /**
     * 
     * @type {Region}
     * @memberof SystemSettingsApiSystemSettingsRegionsCreate
     */
    readonly data: Region
}

/**
 * Request parameters for systemSettingsRegionsList operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRegionsListRequest
 */
export interface SystemSettingsApiSystemSettingsRegionsListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRegionsList
     */
    readonly page?: number
}

/**
 * Request parameters for systemSettingsRegionsPartialUpdate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRegionsPartialUpdateRequest
 */
export interface SystemSettingsApiSystemSettingsRegionsPartialUpdateRequest {
    /**
     * A unique integer value identifying this region.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRegionsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Region}
     * @memberof SystemSettingsApiSystemSettingsRegionsPartialUpdate
     */
    readonly data: Region
}

/**
 * Request parameters for systemSettingsRegionsRead operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRegionsReadRequest
 */
export interface SystemSettingsApiSystemSettingsRegionsReadRequest {
    /**
     * A unique integer value identifying this region.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRegionsRead
     */
    readonly id: number
}

/**
 * Request parameters for systemSettingsRegionsUpdate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRegionsUpdateRequest
 */
export interface SystemSettingsApiSystemSettingsRegionsUpdateRequest {
    /**
     * A unique integer value identifying this region.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRegionsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Region}
     * @memberof SystemSettingsApiSystemSettingsRegionsUpdate
     */
    readonly data: Region
}

/**
 * Request parameters for systemSettingsRegisterTenantAssetsCreate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRegisterTenantAssetsCreateRequest
 */
export interface SystemSettingsApiSystemSettingsRegisterTenantAssetsCreateRequest {
    /**
     * 
     * @type {RegisterAsset}
     * @memberof SystemSettingsApiSystemSettingsRegisterTenantAssetsCreate
     */
    readonly data: RegisterAsset
}

/**
 * Request parameters for systemSettingsRegisterTenantAssetsList operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRegisterTenantAssetsListRequest
 */
export interface SystemSettingsApiSystemSettingsRegisterTenantAssetsListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRegisterTenantAssetsList
     */
    readonly page?: number
}

/**
 * Request parameters for systemSettingsRegisterTenantAssetsPartialUpdate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRegisterTenantAssetsPartialUpdateRequest
 */
export interface SystemSettingsApiSystemSettingsRegisterTenantAssetsPartialUpdateRequest {
    /**
     * A unique integer value identifying this register asset.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRegisterTenantAssetsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {RegisterAsset}
     * @memberof SystemSettingsApiSystemSettingsRegisterTenantAssetsPartialUpdate
     */
    readonly data: RegisterAsset
}

/**
 * Request parameters for systemSettingsRegisterTenantAssetsRead operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRegisterTenantAssetsReadRequest
 */
export interface SystemSettingsApiSystemSettingsRegisterTenantAssetsReadRequest {
    /**
     * A unique integer value identifying this register asset.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRegisterTenantAssetsRead
     */
    readonly id: number
}

/**
 * Request parameters for systemSettingsRegisterTenantAssetsUpdate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRegisterTenantAssetsUpdateRequest
 */
export interface SystemSettingsApiSystemSettingsRegisterTenantAssetsUpdateRequest {
    /**
     * A unique integer value identifying this register asset.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRegisterTenantAssetsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {RegisterAsset}
     * @memberof SystemSettingsApiSystemSettingsRegisterTenantAssetsUpdate
     */
    readonly data: RegisterAsset
}

/**
 * Request parameters for systemSettingsRuleTextsCreate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRuleTextsCreateRequest
 */
export interface SystemSettingsApiSystemSettingsRuleTextsCreateRequest {
    /**
     * 
     * @type {RuleText}
     * @memberof SystemSettingsApiSystemSettingsRuleTextsCreate
     */
    readonly data: RuleText
}

/**
 * Request parameters for systemSettingsRuleTextsList operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRuleTextsListRequest
 */
export interface SystemSettingsApiSystemSettingsRuleTextsListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRuleTextsList
     */
    readonly page?: number
}

/**
 * Request parameters for systemSettingsRuleTextsPartialUpdate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRuleTextsPartialUpdateRequest
 */
export interface SystemSettingsApiSystemSettingsRuleTextsPartialUpdateRequest {
    /**
     * A unique integer value identifying this rule text.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRuleTextsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {RuleText}
     * @memberof SystemSettingsApiSystemSettingsRuleTextsPartialUpdate
     */
    readonly data: RuleText
}

/**
 * Request parameters for systemSettingsRuleTextsRead operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRuleTextsReadRequest
 */
export interface SystemSettingsApiSystemSettingsRuleTextsReadRequest {
    /**
     * A unique integer value identifying this rule text.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRuleTextsRead
     */
    readonly id: number
}

/**
 * Request parameters for systemSettingsRuleTextsUpdate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsRuleTextsUpdateRequest
 */
export interface SystemSettingsApiSystemSettingsRuleTextsUpdateRequest {
    /**
     * A unique integer value identifying this rule text.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsRuleTextsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {RuleText}
     * @memberof SystemSettingsApiSystemSettingsRuleTextsUpdate
     */
    readonly data: RuleText
}

/**
 * Request parameters for systemSettingsSystemSettingsCreate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsSystemSettingsCreateRequest
 */
export interface SystemSettingsApiSystemSettingsSystemSettingsCreateRequest {
    /**
     * 
     * @type {SystemSetting}
     * @memberof SystemSettingsApiSystemSettingsSystemSettingsCreate
     */
    readonly data: SystemSetting
}

/**
 * Request parameters for systemSettingsSystemSettingsList operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsSystemSettingsListRequest
 */
export interface SystemSettingsApiSystemSettingsSystemSettingsListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsSystemSettingsList
     */
    readonly page?: number
}

/**
 * Request parameters for systemSettingsSystemSettingsPartialUpdate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsSystemSettingsPartialUpdateRequest
 */
export interface SystemSettingsApiSystemSettingsSystemSettingsPartialUpdateRequest {
    /**
     * A unique integer value identifying this system setting.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsSystemSettingsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {SystemSetting}
     * @memberof SystemSettingsApiSystemSettingsSystemSettingsPartialUpdate
     */
    readonly data: SystemSetting
}

/**
 * Request parameters for systemSettingsSystemSettingsRead operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsSystemSettingsReadRequest
 */
export interface SystemSettingsApiSystemSettingsSystemSettingsReadRequest {
    /**
     * A unique integer value identifying this system setting.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsSystemSettingsRead
     */
    readonly id: number
}

/**
 * Request parameters for systemSettingsSystemSettingsUpdate operation in SystemSettingsApi.
 * @export
 * @interface SystemSettingsApiSystemSettingsSystemSettingsUpdateRequest
 */
export interface SystemSettingsApiSystemSettingsSystemSettingsUpdateRequest {
    /**
     * A unique integer value identifying this system setting.
     * @type {number}
     * @memberof SystemSettingsApiSystemSettingsSystemSettingsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {SystemSetting}
     * @memberof SystemSettingsApiSystemSettingsSystemSettingsUpdate
     */
    readonly data: SystemSetting
}

/**
 * SystemSettingsApi - object-oriented interface
 * @export
 * @class SystemSettingsApi
 * @extends {BaseAPI}
 */
export class SystemSettingsApi extends BaseAPI {
    /**
     * 
     * @param {SystemSettingsApiSystemSettingsAssetManagementsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsAssetManagementsCreate(requestParameters: SystemSettingsApiSystemSettingsAssetManagementsCreateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsAssetManagementsCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsAssetManagementsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsAssetManagementsList(requestParameters: SystemSettingsApiSystemSettingsAssetManagementsListRequest = {}, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsAssetManagementsList(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsAssetManagementsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsAssetManagementsPartialUpdate(requestParameters: SystemSettingsApiSystemSettingsAssetManagementsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsAssetManagementsPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsAssetManagementsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsAssetManagementsRead(requestParameters: SystemSettingsApiSystemSettingsAssetManagementsReadRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsAssetManagementsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsAssetManagementsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsAssetManagementsUpdate(requestParameters: SystemSettingsApiSystemSettingsAssetManagementsUpdateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsAssetManagementsUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRegionsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRegionsCreate(requestParameters: SystemSettingsApiSystemSettingsRegionsCreateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRegionsCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRegionsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRegionsList(requestParameters: SystemSettingsApiSystemSettingsRegionsListRequest = {}, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRegionsList(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRegionsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRegionsPartialUpdate(requestParameters: SystemSettingsApiSystemSettingsRegionsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRegionsPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRegionsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRegionsRead(requestParameters: SystemSettingsApiSystemSettingsRegionsReadRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRegionsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRegionsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRegionsUpdate(requestParameters: SystemSettingsApiSystemSettingsRegionsUpdateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRegionsUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRegisterTenantAssetsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRegisterTenantAssetsCreate(requestParameters: SystemSettingsApiSystemSettingsRegisterTenantAssetsCreateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRegisterTenantAssetsCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRegisterTenantAssetsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRegisterTenantAssetsList(requestParameters: SystemSettingsApiSystemSettingsRegisterTenantAssetsListRequest = {}, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRegisterTenantAssetsList(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRegisterTenantAssetsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRegisterTenantAssetsPartialUpdate(requestParameters: SystemSettingsApiSystemSettingsRegisterTenantAssetsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRegisterTenantAssetsPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRegisterTenantAssetsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRegisterTenantAssetsRead(requestParameters: SystemSettingsApiSystemSettingsRegisterTenantAssetsReadRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRegisterTenantAssetsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRegisterTenantAssetsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRegisterTenantAssetsUpdate(requestParameters: SystemSettingsApiSystemSettingsRegisterTenantAssetsUpdateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRegisterTenantAssetsUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRuleTextsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRuleTextsCreate(requestParameters: SystemSettingsApiSystemSettingsRuleTextsCreateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRuleTextsCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRuleTextsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRuleTextsList(requestParameters: SystemSettingsApiSystemSettingsRuleTextsListRequest = {}, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRuleTextsList(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRuleTextsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRuleTextsPartialUpdate(requestParameters: SystemSettingsApiSystemSettingsRuleTextsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRuleTextsPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRuleTextsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRuleTextsRead(requestParameters: SystemSettingsApiSystemSettingsRuleTextsReadRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRuleTextsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsRuleTextsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsRuleTextsUpdate(requestParameters: SystemSettingsApiSystemSettingsRuleTextsUpdateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsRuleTextsUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsSystemSettingsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsSystemSettingsCreate(requestParameters: SystemSettingsApiSystemSettingsSystemSettingsCreateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsSystemSettingsCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsSystemSettingsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsSystemSettingsList(requestParameters: SystemSettingsApiSystemSettingsSystemSettingsListRequest = {}, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsSystemSettingsList(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsSystemSettingsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsSystemSettingsPartialUpdate(requestParameters: SystemSettingsApiSystemSettingsSystemSettingsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsSystemSettingsPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsSystemSettingsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsSystemSettingsRead(requestParameters: SystemSettingsApiSystemSettingsSystemSettingsReadRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsSystemSettingsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SystemSettingsApiSystemSettingsSystemSettingsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSettingsApi
     */
    public systemSettingsSystemSettingsUpdate(requestParameters: SystemSettingsApiSystemSettingsSystemSettingsUpdateRequest, options?: AxiosRequestConfig) {
        return SystemSettingsApiFp(this.configuration).systemSettingsSystemSettingsUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TicketsApi - axios parameter creator
 * @export
 */
export const TicketsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TicketActvity} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketActivitiesCreate: async (data: TicketActvity, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('ticketsTicketActivitiesCreate', 'data', data)
            const localVarPath = `/tickets/ticket_activities/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketActivitiesList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tickets/ticket_activities/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket actvity.
         * @param {TicketActvity} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketActivitiesPartialUpdate: async (id: number, data: TicketActvity, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketsTicketActivitiesPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('ticketsTicketActivitiesPartialUpdate', 'data', data)
            const localVarPath = `/tickets/ticket_activities/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket actvity.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketActivitiesRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketsTicketActivitiesRead', 'id', id)
            const localVarPath = `/tickets/ticket_activities/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket actvity.
         * @param {TicketActvity} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketActivitiesUpdate: async (id: number, data: TicketActvity, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketsTicketActivitiesUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('ticketsTicketActivitiesUpdate', 'data', data)
            const localVarPath = `/tickets/ticket_activities/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TicketType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketTypesCreate: async (data: TicketType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('ticketsTicketTypesCreate', 'data', data)
            const localVarPath = `/tickets/ticket_types/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketTypesList: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tickets/ticket_types/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket type.
         * @param {TicketType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketTypesPartialUpdate: async (id: number, data: TicketType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketsTicketTypesPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('ticketsTicketTypesPartialUpdate', 'data', data)
            const localVarPath = `/tickets/ticket_types/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketTypesRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketsTicketTypesRead', 'id', id)
            const localVarPath = `/tickets/ticket_types/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket type.
         * @param {TicketType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketTypesUpdate: async (id: number, data: TicketType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketsTicketTypesUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('ticketsTicketTypesUpdate', 'data', data)
            const localVarPath = `/tickets/ticket_types/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Ticket} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketsCreate: async (data: Ticket, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('ticketsTicketsCreate', 'data', data)
            const localVarPath = `/tickets/tickets/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Tickets
         * @summary List Tickets based on Tenant and Role
         * @param {number} [page] A page number within the paginated result set.
         * @param {string} [status] Filter by ticket status
         * @param {number} [asset] Filter by asset id
         * @param {number} [assignedTo] Filter by assigned_to id
         * @param {number} [ticketType] Filter by ticket_type id
         * @param {number} [createdBy] Filter by created_by id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketsList: async (page?: number, status?: string, asset?: number, assignedTo?: number, ticketType?: number, createdBy?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tickets/tickets/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (assignedTo !== undefined) {
                localVarQueryParameter['assigned_to'] = assignedTo;
            }

            if (ticketType !== undefined) {
                localVarQueryParameter['ticket_type'] = ticketType;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['created_by'] = createdBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Ticket} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketsPartialUpdate: async (id: string, data: Ticket, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketsTicketsPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('ticketsTicketsPartialUpdate', 'data', data)
            const localVarPath = `/tickets/tickets/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketsRead: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketsTicketsRead', 'id', id)
            const localVarPath = `/tickets/tickets/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Ticket} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketsUpdate: async (id: string, data: Ticket, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ticketsTicketsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('ticketsTicketsUpdate', 'data', data)
            const localVarPath = `/tickets/tickets/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TicketsApi - functional programming interface
 * @export
 */
export const TicketsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TicketsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {TicketActvity} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketActivitiesCreate(data: TicketActvity, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketActvity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketActivitiesCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketActivitiesList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketsTicketActivitiesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketActivitiesList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket actvity.
         * @param {TicketActvity} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketActivitiesPartialUpdate(id: number, data: TicketActvity, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketActvity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketActivitiesPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket actvity.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketActivitiesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketActvity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketActivitiesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket actvity.
         * @param {TicketActvity} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketActivitiesUpdate(id: number, data: TicketActvity, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketActvity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketActivitiesUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TicketType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketTypesCreate(data: TicketType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketTypesCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketTypesList(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketsTicketTypesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketTypesList(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket type.
         * @param {TicketType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketTypesPartialUpdate(id: number, data: TicketType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketTypesPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketTypesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketTypesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket type.
         * @param {TicketType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketTypesUpdate(id: number, data: TicketType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketTypesUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Ticket} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketsCreate(data: Ticket, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ticket>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketsCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Tickets
         * @summary List Tickets based on Tenant and Role
         * @param {number} [page] A page number within the paginated result set.
         * @param {string} [status] Filter by ticket status
         * @param {number} [asset] Filter by asset id
         * @param {number} [assignedTo] Filter by assigned_to id
         * @param {number} [ticketType] Filter by ticket_type id
         * @param {number} [createdBy] Filter by created_by id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketsList(page?: number, status?: string, asset?: number, assignedTo?: number, ticketType?: number, createdBy?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketsTicketsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketsList(page, status, asset, assignedTo, ticketType, createdBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {Ticket} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketsPartialUpdate(id: string, data: Ticket, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ticket>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketsPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketsRead(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ticket>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {Ticket} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketsUpdate(id: string, data: Ticket, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ticket>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketsUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TicketsApi - factory interface
 * @export
 */
export const TicketsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TicketsApiFp(configuration)
    return {
        /**
         * 
         * @param {TicketActvity} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketActivitiesCreate(data: TicketActvity, options?: any): AxiosPromise<TicketActvity> {
            return localVarFp.ticketsTicketActivitiesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketActivitiesList(page?: number, options?: any): AxiosPromise<TicketsTicketActivitiesList200Response> {
            return localVarFp.ticketsTicketActivitiesList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket actvity.
         * @param {TicketActvity} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketActivitiesPartialUpdate(id: number, data: TicketActvity, options?: any): AxiosPromise<TicketActvity> {
            return localVarFp.ticketsTicketActivitiesPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket actvity.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketActivitiesRead(id: number, options?: any): AxiosPromise<TicketActvity> {
            return localVarFp.ticketsTicketActivitiesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket actvity.
         * @param {TicketActvity} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketActivitiesUpdate(id: number, data: TicketActvity, options?: any): AxiosPromise<TicketActvity> {
            return localVarFp.ticketsTicketActivitiesUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TicketType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketTypesCreate(data: TicketType, options?: any): AxiosPromise<TicketType> {
            return localVarFp.ticketsTicketTypesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketTypesList(page?: number, options?: any): AxiosPromise<TicketsTicketTypesList200Response> {
            return localVarFp.ticketsTicketTypesList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket type.
         * @param {TicketType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketTypesPartialUpdate(id: number, data: TicketType, options?: any): AxiosPromise<TicketType> {
            return localVarFp.ticketsTicketTypesPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketTypesRead(id: number, options?: any): AxiosPromise<TicketType> {
            return localVarFp.ticketsTicketTypesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ticket type.
         * @param {TicketType} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketTypesUpdate(id: number, data: TicketType, options?: any): AxiosPromise<TicketType> {
            return localVarFp.ticketsTicketTypesUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Ticket} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketsCreate(data: Ticket, options?: any): AxiosPromise<Ticket> {
            return localVarFp.ticketsTicketsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * List Tickets
         * @summary List Tickets based on Tenant and Role
         * @param {number} [page] A page number within the paginated result set.
         * @param {string} [status] Filter by ticket status
         * @param {number} [asset] Filter by asset id
         * @param {number} [assignedTo] Filter by assigned_to id
         * @param {number} [ticketType] Filter by ticket_type id
         * @param {number} [createdBy] Filter by created_by id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketsList(page?: number, status?: string, asset?: number, assignedTo?: number, ticketType?: number, createdBy?: number, options?: any): AxiosPromise<TicketsTicketsList200Response> {
            return localVarFp.ticketsTicketsList(page, status, asset, assignedTo, ticketType, createdBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {Ticket} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketsPartialUpdate(id: string, data: Ticket, options?: any): AxiosPromise<Ticket> {
            return localVarFp.ticketsTicketsPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketsRead(id: string, options?: any): AxiosPromise<Ticket> {
            return localVarFp.ticketsTicketsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {Ticket} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketsUpdate(id: string, data: Ticket, options?: any): AxiosPromise<Ticket> {
            return localVarFp.ticketsTicketsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for ticketsTicketActivitiesCreate operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketActivitiesCreateRequest
 */
export interface TicketsApiTicketsTicketActivitiesCreateRequest {
    /**
     * 
     * @type {TicketActvity}
     * @memberof TicketsApiTicketsTicketActivitiesCreate
     */
    readonly data: TicketActvity
}

/**
 * Request parameters for ticketsTicketActivitiesList operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketActivitiesListRequest
 */
export interface TicketsApiTicketsTicketActivitiesListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof TicketsApiTicketsTicketActivitiesList
     */
    readonly page?: number
}

/**
 * Request parameters for ticketsTicketActivitiesPartialUpdate operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketActivitiesPartialUpdateRequest
 */
export interface TicketsApiTicketsTicketActivitiesPartialUpdateRequest {
    /**
     * A unique integer value identifying this ticket actvity.
     * @type {number}
     * @memberof TicketsApiTicketsTicketActivitiesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {TicketActvity}
     * @memberof TicketsApiTicketsTicketActivitiesPartialUpdate
     */
    readonly data: TicketActvity
}

/**
 * Request parameters for ticketsTicketActivitiesRead operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketActivitiesReadRequest
 */
export interface TicketsApiTicketsTicketActivitiesReadRequest {
    /**
     * A unique integer value identifying this ticket actvity.
     * @type {number}
     * @memberof TicketsApiTicketsTicketActivitiesRead
     */
    readonly id: number
}

/**
 * Request parameters for ticketsTicketActivitiesUpdate operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketActivitiesUpdateRequest
 */
export interface TicketsApiTicketsTicketActivitiesUpdateRequest {
    /**
     * A unique integer value identifying this ticket actvity.
     * @type {number}
     * @memberof TicketsApiTicketsTicketActivitiesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {TicketActvity}
     * @memberof TicketsApiTicketsTicketActivitiesUpdate
     */
    readonly data: TicketActvity
}

/**
 * Request parameters for ticketsTicketTypesCreate operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketTypesCreateRequest
 */
export interface TicketsApiTicketsTicketTypesCreateRequest {
    /**
     * 
     * @type {TicketType}
     * @memberof TicketsApiTicketsTicketTypesCreate
     */
    readonly data: TicketType
}

/**
 * Request parameters for ticketsTicketTypesList operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketTypesListRequest
 */
export interface TicketsApiTicketsTicketTypesListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof TicketsApiTicketsTicketTypesList
     */
    readonly page?: number
}

/**
 * Request parameters for ticketsTicketTypesPartialUpdate operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketTypesPartialUpdateRequest
 */
export interface TicketsApiTicketsTicketTypesPartialUpdateRequest {
    /**
     * A unique integer value identifying this ticket type.
     * @type {number}
     * @memberof TicketsApiTicketsTicketTypesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {TicketType}
     * @memberof TicketsApiTicketsTicketTypesPartialUpdate
     */
    readonly data: TicketType
}

/**
 * Request parameters for ticketsTicketTypesRead operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketTypesReadRequest
 */
export interface TicketsApiTicketsTicketTypesReadRequest {
    /**
     * A unique integer value identifying this ticket type.
     * @type {number}
     * @memberof TicketsApiTicketsTicketTypesRead
     */
    readonly id: number
}

/**
 * Request parameters for ticketsTicketTypesUpdate operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketTypesUpdateRequest
 */
export interface TicketsApiTicketsTicketTypesUpdateRequest {
    /**
     * A unique integer value identifying this ticket type.
     * @type {number}
     * @memberof TicketsApiTicketsTicketTypesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {TicketType}
     * @memberof TicketsApiTicketsTicketTypesUpdate
     */
    readonly data: TicketType
}

/**
 * Request parameters for ticketsTicketsCreate operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketsCreateRequest
 */
export interface TicketsApiTicketsTicketsCreateRequest {
    /**
     * 
     * @type {Ticket}
     * @memberof TicketsApiTicketsTicketsCreate
     */
    readonly data: Ticket
}

/**
 * Request parameters for ticketsTicketsList operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketsListRequest
 */
export interface TicketsApiTicketsTicketsListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof TicketsApiTicketsTicketsList
     */
    readonly page?: number

    /**
     * Filter by ticket status
     * @type {string}
     * @memberof TicketsApiTicketsTicketsList
     */
    readonly status?: string

    /**
     * Filter by asset id
     * @type {number}
     * @memberof TicketsApiTicketsTicketsList
     */
    readonly asset?: number

    /**
     * Filter by assigned_to id
     * @type {number}
     * @memberof TicketsApiTicketsTicketsList
     */
    readonly assignedTo?: number

    /**
     * Filter by ticket_type id
     * @type {number}
     * @memberof TicketsApiTicketsTicketsList
     */
    readonly ticketType?: number

    /**
     * Filter by created_by id
     * @type {number}
     * @memberof TicketsApiTicketsTicketsList
     */
    readonly createdBy?: number
}

/**
 * Request parameters for ticketsTicketsPartialUpdate operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketsPartialUpdateRequest
 */
export interface TicketsApiTicketsTicketsPartialUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof TicketsApiTicketsTicketsPartialUpdate
     */
    readonly id: string

    /**
     * 
     * @type {Ticket}
     * @memberof TicketsApiTicketsTicketsPartialUpdate
     */
    readonly data: Ticket
}

/**
 * Request parameters for ticketsTicketsRead operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketsReadRequest
 */
export interface TicketsApiTicketsTicketsReadRequest {
    /**
     * 
     * @type {string}
     * @memberof TicketsApiTicketsTicketsRead
     */
    readonly id: string
}

/**
 * Request parameters for ticketsTicketsUpdate operation in TicketsApi.
 * @export
 * @interface TicketsApiTicketsTicketsUpdateRequest
 */
export interface TicketsApiTicketsTicketsUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof TicketsApiTicketsTicketsUpdate
     */
    readonly id: string

    /**
     * 
     * @type {Ticket}
     * @memberof TicketsApiTicketsTicketsUpdate
     */
    readonly data: Ticket
}

/**
 * TicketsApi - object-oriented interface
 * @export
 * @class TicketsApi
 * @extends {BaseAPI}
 */
export class TicketsApi extends BaseAPI {
    /**
     * 
     * @param {TicketsApiTicketsTicketActivitiesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketActivitiesCreate(requestParameters: TicketsApiTicketsTicketActivitiesCreateRequest, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketActivitiesCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketsApiTicketsTicketActivitiesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketActivitiesList(requestParameters: TicketsApiTicketsTicketActivitiesListRequest = {}, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketActivitiesList(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketsApiTicketsTicketActivitiesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketActivitiesPartialUpdate(requestParameters: TicketsApiTicketsTicketActivitiesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketActivitiesPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketsApiTicketsTicketActivitiesReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketActivitiesRead(requestParameters: TicketsApiTicketsTicketActivitiesReadRequest, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketActivitiesRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketsApiTicketsTicketActivitiesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketActivitiesUpdate(requestParameters: TicketsApiTicketsTicketActivitiesUpdateRequest, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketActivitiesUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketsApiTicketsTicketTypesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketTypesCreate(requestParameters: TicketsApiTicketsTicketTypesCreateRequest, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketTypesCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketsApiTicketsTicketTypesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketTypesList(requestParameters: TicketsApiTicketsTicketTypesListRequest = {}, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketTypesList(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketsApiTicketsTicketTypesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketTypesPartialUpdate(requestParameters: TicketsApiTicketsTicketTypesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketTypesPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketsApiTicketsTicketTypesReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketTypesRead(requestParameters: TicketsApiTicketsTicketTypesReadRequest, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketTypesRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketsApiTicketsTicketTypesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketTypesUpdate(requestParameters: TicketsApiTicketsTicketTypesUpdateRequest, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketTypesUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketsApiTicketsTicketsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketsCreate(requestParameters: TicketsApiTicketsTicketsCreateRequest, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketsCreate(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Tickets
     * @summary List Tickets based on Tenant and Role
     * @param {TicketsApiTicketsTicketsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketsList(requestParameters: TicketsApiTicketsTicketsListRequest = {}, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketsList(requestParameters.page, requestParameters.status, requestParameters.asset, requestParameters.assignedTo, requestParameters.ticketType, requestParameters.createdBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketsApiTicketsTicketsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketsPartialUpdate(requestParameters: TicketsApiTicketsTicketsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketsPartialUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketsApiTicketsTicketsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketsRead(requestParameters: TicketsApiTicketsTicketsReadRequest, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketsApiTicketsTicketsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public ticketsTicketsUpdate(requestParameters: TicketsApiTicketsTicketsUpdateRequest, options?: AxiosRequestConfig) {
        return TicketsApiFp(this.configuration).ticketsTicketsUpdate(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}


